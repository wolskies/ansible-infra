---
domain_name: ""
domain_timezone: ""
domain_locale: "en_US.UTF-8"
domain_language: "en_US.UTF-8"
# Time synchronization via systemd-timesyncd
domain_timesync:
  enabled: true
  servers: []
host_hostname: ""
host_update_hosts: true
# Names of services to be passed to ansible.builtin.systemd_service to enable/disable/mask
host_services:
  enable: []
  disable: []
  mask: []
# Linux kernel modules to load/blacklist
host_modules:
  load: []
  blacklist: []
host_udev_rules: []
# Example:
# host_udev_rules:
#   - name: pico-usb
#     content: 'SUBSYSTEM=="usb", ATTRS{idVendor}=="2e8a", ATTRS{idProduct}=="000c", MODE="0666"'
#     priority: 99
#     state: present
#   - name: dialout-tty
#     content: 'KERNEL=="ttyACM[0-9]*", GROUP="dialout", MODE="0660"'
#     priority: 99
#     state: present
hardening:
  # Triggers devsec.hardening.os_hardening role (Linux only)
  # All devsec.hardening.os_hardening variables can be set directly
  # See: https://github.com/dev-sec/ansible-collection-hardening/tree/master/roles/os_hardening
  os_hardening_enabled: false
  # SSH hardening via devsec.hardening.ssh_hardening (Linux only)
  # All devsec.hardening.ssh_hardening variables can be set directly
  # See: https://github.com/dev-sec/ansible-collection-hardening/tree/master/roles/ssh_hardening
  ssh_hardening_enabled: false
journal:
  configure: false
  max_size: "500M"
  max_retention: "30d"
  forward_to_syslog: false
  compress: true
apt:
  proxy: ""
  no_recommends: false
  unattended_upgrades:
    enabled: false
  system_upgrade:
    enable: false
    type: "safe"
apt_repositories_all: {}
apt_repositories_group: {}
apt_repositories_host: {}
# Example:
# apt_repositories_host:
#   Ubuntu:
#     - name: docker
#       types: [deb]
#       uris: "https://download.docker.com/linux/ubuntu"
#       suites: "{{ ansible_distribution_release }}"
#       components: "stable"
#       signed_by: "https://download.docker.com/linux/ubuntu/gpg"
#     - name: nodejs
#       uris: "https://deb.nodesource.com/node_20.x"
#       suites: "nodistro"
#       components: "main"
#       signed_by: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
#   Debian:
#     - name: docker
#       types: [deb]
#       uris: "https://download.docker.com/linux/debian"
#       suites: "{{ ansible_distribution_release }}"
#       components: "stable"
#       signed_by: "https://download.docker.com/linux/debian/gpg"
pacman:
  proxy: ""
  no_confirm: false
  multilib:
    enabled: false
  enable_aur: true
macosx:
  updates:
    auto_check: true
    auto_download: true
  gatekeeper:
    enabled: true
  system_preferences:
    natural_scroll: true
    measurement_units: "Inches"
    use_metric: false
    show_all_extensions: false
  airdrop:
    ethernet_enabled: false
homebrew:
  cleanup_cache: true
  taps: []
# Package management - layered by inventory level (all → group → host)
manage_packages_all: {}
# Example:
# manage_packages_all:
#   Ubuntu:
#     - name: git
#     - name: curl
#     - name: vim
#   Debian:
#     - name: git
#     - name: curl
#   Archlinux:
#     - name: git
#     - name: curl
#   MacOSX:
#     - name: git
#     - name: curl

manage_packages_group: {}
# Example:
# manage_packages_group:
#   Ubuntu:
#     - name: nginx
#     - name: postgresql

manage_packages_host: {}
# Example:
# manage_packages_host:
#   Ubuntu:
#     - name: redis-server
#     - name: telnet
#       state: absent

# macOS Homebrew casks (GUI applications)
manage_casks: {}
# Example:
# manage_casks:
#   MacOSX:
#     - name: visual-studio-code
#     - name: docker
#     - name: firefox
snap:
  remove_completely: false
  packages:
    install: []
    remove: []
flatpak:
  enabled: false
  remotes: []
  packages:
    install: []
    remove: []
users: []
# Example:
# users:
#   - name: developer               # Must be an existing user
#     shell: /bin/bash              # Optional: Set user shell (Linux only)
#     git:                          # Optional: Git configuration
#       user_name: "John Doe"
#       user_email: "john@example.com"
#       editor: "nvim"
#     nodejs:                       # Optional: Node.js packages
#       packages: [eslint, prettier, typescript]
#     rust:                         # Optional: Rust packages
#       packages: [cargo-watch, ripgrep]
#     go:                           # Optional: Go packages
#       packages: [github.com/golangci/golangci-lint/cmd/golangci-lint]
#     neovim:                       # Optional: Neovim installation
#       enabled: true
#     terminal_entries: [alacritty, kitty]  # Optional: Terminal emulator configs
#     dotfiles:                     # Optional: Dotfiles repository
#       enable: true
#       repository: "https://github.com/user/dotfiles.git"
#       dest: ".dotfiles"
#       branch: "main"
firewall:
  enabled: false
  prevent_ssh_lockout: true
  stealth_mode: false
  block_all: false
  logging: false
  rules: []
  # SSH is automatically allowed when prevent_ssh_lockout is true
  # Additional rules can be added:
  # rules:
  #   - rule: allow
  #     port: 22
  #     protocol: tcp
  #   - rule: allow
  #     port: 80
  #     protocol: tcp
  #   - rule: allow
  #     source: 192.168.1.0/24
  #     port: 3000
  #     protocol: tcp
fail2ban:
  enabled: false
  bantime: "1h"
  findtime: "10m"
  maxretry: 5
  jails:
    - name: sshd
      enabled: true
      maxretry: 5
      bantime: "1h"
      findtime: "10m"
      logpath: /var/log/auth.log

---
# Workstation Setup Example
# Clean architecture: basic_setup â†’ third_party_packages â†’ dotfiles
#
# This playbook demonstrates the recommended flow for setting up workstations
# with development tools, applications, and user customization.
#
# VARIABLE HIERARCHY (packages are merged, others follow precedence):
# 1. all.yml (global defaults) - minimal universal settings
# 2. workstation.yml (group defaults) - development tools and desktop packages
# 3. host_vars/ (machine-specific) - discovery output and unique packages
# 4. playbook vars: (runtime overrides) - deployment-specific settings

- name: Setup Workstation
  hosts: all
  gather_facts: true

  # Collections are referenced by FQCN in role names

  vars_files:
    - all.yml # Global defaults (group_vars/all/all.yml)
    - workstation.yml # Group defaults (group_vars/workstations/workstation.yml)
    # Note: host_vars/ files are loaded automatically by Ansible

  # Example: Playbook-level variable overrides (highest precedence)
  # These variables override all file-based variables (all.yml, workstation.yml, host_vars/)
  vars:
    # Override defaults for this specific playbook run
    environment_type: "development"

    # Example: Runtime dotfiles configuration
    dotfiles_repository_url: "{{ vault_dotfiles_url | default('') }}"

    # Example: Force specific behavior for this playbook execution
    setup_development_tools: true

    # Most configuration should be in the hierarchical variable files:
    # - all.yml (global defaults)
    # - workstation.yml (group-specific)
    # - host_vars/ (machine-specific, including discovery output)
    # Only use vars: for runtime overrides or playbook-specific settings

  pre_tasks:
    - name: Display workstation setup information
      ansible.builtin.debug:
        msg:
          - "=== Workstation Setup Started ==="
          - "Target: {{ inventory_hostname }}"
          - "OS: {{ ansible_distribution }} {{ ansible_distribution_version | default('Unknown') }}"
          - "Architecture: {{ ansible_architecture }}"
          - "Machine Type: {{ machine_type }}"

  roles:
    # 1. Core system setup with standard OS packages
    - role: configure_operating_system
      tags:
        - basic
        - system
        - configuration

    - role: configure_software
      tags:
        - basic
        - system
        - packages

    # User management now handled by configure_operating_system role
    # Use configure_operating_system with 'users' tag for user management only:
    # - role: wolskies.infrastructure.configure_operating_system
    #   tags: [users]

    # 2. Language packages (uncomment if you have language-specific roles)
    # - role: nodejs
    #   when: npm_packages is defined and npm_packages | length > 0
    #   tags:
    #     - nodejs
    #     - development
    # - role: rust
    #   when: cargo_packages is defined and cargo_packages | length > 0
    #   tags:
    #     - rust
    #     - development
    # - role: go
    #   when: go_packages is defined and go_packages | length > 0
    #   tags:
    #     - go
    #     - development

    # 3. User configuration (configure_users role)
    # - role: configure_users
    #   become: false
    #   when: configure_users is defined
    #   tags:
    #     - dotfiles
    #     - user-config

  post_tasks:
    - name: Enable desktop services (Linux)
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - NetworkManager
        - bluetooth
      become: true
      when:
        - ansible_os_family != 'Darwin'
        - ansible_service_mgr == 'systemd'
      failed_when: false # Services might not exist on all systems

    - name: Display workstation setup summary
      ansible.builtin.debug:
        msg:
          - "=== Workstation Setup Complete ==="
          - "Host: {{ inventory_hostname }}"
          - "OS Packages: {{ (group_packages_install_Ubuntu | default([])) if ansible_distribution == 'Ubuntu' else (group_packages_install_Archlinux | default([])) | length }}"
          - "Third-party Packages: {{ third_party_packages | default([]) | length }}"
          - "Python Packages: {{ pip_packages | default([]) | length }}"
          - "Node.js Packages: {{ npm_packages | default([]) | length }}"
          - "Dotfiles: {{ 'Configured' if (dotfiles_repository_url is defined and dotfiles_repository_url != '') else 'Skipped' }}"
          - ""
          - "ðŸŽ‰ Your workstation is ready for development!"
# Usage Examples:
#
# Basic workstation setup:
#   ansible-playbook -i inventory setup-workstation-example.yml
#
# With custom dotfiles:
#   ansible-playbook -i inventory setup-workstation-example.yml \
#     -e "dotfiles_repository_url=https://github.com/user/dotfiles.git"
#
# Skip dotfiles:
#   ansible-playbook -i inventory setup-workstation-example.yml --skip-tags dotfiles
#
# Development packages only:
#   ansible-playbook -i inventory setup-workstation-example.yml --tags third-party

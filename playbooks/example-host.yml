---
# HOST VARIABLES (Specific Machine)
# File: host_vars/hostname/example-host.yml
#
# üñ•Ô∏è  HOST SCOPE - HIGHEST PRECEDENCE
# These variables apply ONLY to this specific machine.
# They override both group variables and global variables.
#
# ANSIBLE VARIABLE PRECEDENCE REMINDER:
# - Host variables (this file) have HIGHEST precedence for individual settings
# - Host variables override group variables (group_vars/workstations/)
# - Host variables override global variables (group_vars/all/) 
# - üì¶ EXCEPTION: Package variables are merged additively (all + group + host)
#
# TYPICAL SOURCES FOR HOST VARIABLES:
# 1. Discovery system output (wolskinet.infrastructure.discovery role)
# 2. Machine-specific overrides (hardware, network, unique packages)
# 3. Environment-specific settings (production vs development)
# 4. User preferences for individual machines

# =============================================================================
# HOST PACKAGE VARIABLES (This Machine Only)
# =============================================================================
# Machine-specific packages that are unique to this host.
# Often populated by the discovery system when scanning existing machines.

# Ubuntu/Debian host-specific packages
# These are typically generated by discovery or manually added for unique needs
host_packages_install_Ubuntu:
  # Discovery-found packages (example)
  - nginx              # Web server discovered on this machine
  - redis-server       # Cache server discovered on this machine  
  - postgresql-client  # Database client discovered on this machine
  - docker.io          # Container runtime discovered on this machine
  
  # Machine-specific additions (manual)
  - htop               # System monitoring (if not in group/global)
  - ncdu               # Disk usage analyzer (unique to this machine)
  - tmux               # Terminal multiplexer (user preference)

# Arch Linux host-specific packages (if this were an Arch machine)
# host_packages_install_Archlinux:
#   - nginx            # Web server
#   - redis            # Cache server  
#   - postgresql       # Database client
#   - docker           # Container runtime
#   - htop             # System monitoring
#   - ncdu             # Disk usage analyzer
#   - tmux             # Terminal multiplexer

# =============================================================================
# HOST-SPECIFIC THIRD-PARTY PACKAGES
# =============================================================================
# Third-party packages unique to this machine, requiring additional repositories.

# Host-specific third-party packages (example: development machine extras)
host_third_party_packages:
  - google-chrome-stable    # Chrome browser (requires Google repository)
  - slack-desktop          # Slack communication (requires Slack repository)
  - zoom                   # Video conferencing (requires Zoom repository)

# Host-specific AUR packages (if Arch Linux)
host_aur_packages:
  - google-chrome         # Chrome from AUR
  - slack-desktop         # Slack from AUR
  - zoom                  # Zoom from AUR

# Host-specific Python packages (unique development needs)
host_pip_packages:
  - django               # Web framework (project-specific)
  - fastapi              # API framework (project-specific)  
  - sqlalchemy           # Database ORM (project-specific)
  - redis                # Redis client (matches server setup)
  - psycopg2-binary      # PostgreSQL adapter (matches database)

# Host-specific Node.js packages (unique project needs)
host_npm_packages:
  - "@nestjs/cli"        # NestJS framework (project-specific)
  - prisma               # Database toolkit (project-specific)
  - "@types/node"        # TypeScript definitions (development)

# Host-specific repositories (for the third-party packages above)
host_additional_repositories:
  apt:
    sources:
      - "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
      - "deb https://packagecloud.io/slacktechnologies/slack/debian/ jessie main"
      - "deb [arch=amd64] https://zoom.us/linux/apt/repo/ focal main"
    keys:
      - url: "https://dl.google.com/linux/linux_signing_key.pub"
        name: "google-chrome"
      - url: "https://packagecloud.io/slacktechnologies/slack/gpgkey"
        name: "slack"
      - url: "https://zoom.us/linux/apt/repo/pubkey.asc"
        name: "zoom"

# =============================================================================
# HOST SYSTEM INFORMATION
# =============================================================================
# Machine-specific system information, often populated by discovery.

# System identification
ansible_user: "developer"           # Primary user account
system_hostname: "dev-laptop-01"    # System hostname
system_fqdn: "dev-laptop-01.company.local"  # Fully qualified domain name

# Hardware configuration (discovered)
system_memory_mb: 16384              # 16GB RAM
system_cpu_cores: 8                 # 8 CPU cores
system_architecture: "x86_64"       # Architecture

# Network configuration (discovered) 
primary_network_interface: "wlp0s20f3"     # Primary network interface
primary_ip_address: "192.168.1.100"        # Primary IP address

# =============================================================================
# HOST-SPECIFIC SYSTEM SETTINGS
# =============================================================================
# Settings that override group and global defaults for this specific machine.

# User preferences for this machine
default_user_shell: "/bin/zsh"      # Override group default (bash)
preferred_editor: "nvim"            # This user prefers neovim

# Machine-specific OS settings
ubuntu_disable_snap: false          # Keep snap on this machine (override group)
enable_desktop_services: true       # This is a desktop machine
configure_graphics_drivers: true    # This machine has dedicated graphics

# Development environment (this machine's specific needs)  
setup_development_tools: true
install_development_languages:
  - python
  - nodejs
  - typescript
  - rust                             # Additional language for this machine

# Security settings (development machine - more relaxed)
configure_ssh_hardening: false      # Development machine, no SSH hardening
enable_automatic_updates: true      # Keep development tools updated
firewall_allow_development_ports: true  # Allow development server ports

# Docker configuration (this machine runs containers)
install_docker: true                # Override group default
docker_users:
  - "{{ ansible_user }}"
  - "developer"
docker_compose_version: "latest"

# =============================================================================
# HOST SERVICE CONFIGURATION
# =============================================================================
# Services specific to this machine's role/function.

# Web services (this machine runs local development servers)
nginx_remove_default_vhost: true
nginx_vhosts:
  - name: "dev.local"
    port: 80
    root: "/home/developer/projects"

# Database services (local development databases)
postgresql_databases:
  - name: "dev_db"
    owner: "developer"

redis_bind_interface: "127.0.0.1"
redis_port: 6379

# =============================================================================
# DISCOVERY METADATA
# =============================================================================
# Information about when and how this configuration was discovered/created.

# Discovery information (if generated by discovery system)
discovery_completed_at: "2024-01-15T10:30:00Z"
discovery_source_os: "Ubuntu 24.04"
discovered_machine_characteristics:
  - "development"
  - "docker" 
  - "web-server"

# Machine characteristics (affects role behavior)
machine_type: "workstation"         # Machine classification
environment_type: "development"     # Environment classification

# Feature flags for this machine
docker_detected: true               # Container platform detected
dotfiles_detected: true             # Dotfiles repository detected
development_environment: true       # This is a development machine

# =============================================================================
# USAGE EXAMPLES AND BEST PRACTICES
# =============================================================================
#
# 1. COMPLETE HIERARCHICAL PACKAGE MERGING EXAMPLE:
#    all.yml: all_packages_install_Ubuntu: [git, vim, htop]                           ‚Üê Global (all machines)
#    workstation.yml: group_packages_install_Ubuntu: [nodejs, firefox]               ‚Üê Group (all workstations) 
#    example-host.yml: host_packages_install_Ubuntu: [nginx, docker.io]              ‚Üê This file (this machine only)
#    
#    Final result for dev-laptop: [git, vim, htop, nodejs, firefox, nginx, docker.io]
#
#    The same hierarchical merging applies to ALL package types:
#    all_third_party_packages + group_third_party_packages + host_third_party_packages ‚Üí final_third_party_packages
#    all_pip_packages + group_pip_packages + host_pip_packages ‚Üí final_pip_packages
#    all_npm_packages + group_npm_packages + host_npm_packages ‚Üí final_npm_packages
#    all_aur_packages + group_aur_packages + host_aur_packages ‚Üí final_aur_packages  
#    all_homebrew_packages + group_homebrew_packages + host_homebrew_packages ‚Üí final_homebrew_packages
#    all_additional_repositories + group_additional_repositories + host_additional_repositories ‚Üí final_additional_repositories
#
# 2. VARIABLE PRECEDENCE EXAMPLE:
#    group_vars/all/all.yml: default_user_shell: "/bin/bash"
#    group_vars/workstations/workstation.yml: default_user_shell: "/bin/bash"  
#    host_vars/dev-laptop/example-host.yml: default_user_shell: "/bin/zsh"    ‚Üê This file wins
#    
#    Result: dev-laptop uses zsh, other machines use bash
#
# 3. DISCOVERY INTEGRATION:
#    # Before discovery (manual example)
#    host_packages_install_Ubuntu: []
#    
#    # After running discovery on existing machine  
#    host_packages_install_Ubuntu:
#      - nginx              # Found installed
#      - redis-server       # Found installed  
#      - postgresql-client  # Found installed
#      # ... all discovered packages
#    
#    Discovery populates this file automatically, you can then edit as needed.
#
# 4. MACHINE-SPECIFIC OVERRIDES:
#    - Hardware requirements: more memory, different GPU drivers
#    - Network configuration: static IP, different DNS servers
#    - Security requirements: stricter settings for production machines
#    - Development needs: extra languages, frameworks, databases
#    - User preferences: different shell, editor, desktop environment
#
# 5. INVENTORY INTEGRATION:
#    inventory/
#    ‚îú‚îÄ‚îÄ hosts.yml                 ‚Üê Inventory file
#    ‚îú‚îÄ‚îÄ group_vars/
#    ‚îÇ   ‚îú‚îÄ‚îÄ all/all.yml          ‚Üê Global variables
#    ‚îÇ   ‚îî‚îÄ‚îÄ workstations/workstation.yml ‚Üê Group variables
#    ‚îî‚îÄ‚îÄ host_vars/
#        ‚îú‚îÄ‚îÄ dev-laptop-01/
#        ‚îÇ   ‚îî‚îÄ‚îÄ main.yml         ‚Üê This file renamed to main.yml
#        ‚îú‚îÄ‚îÄ dev-laptop-02/
#        ‚îÇ   ‚îî‚îÄ‚îÄ main.yml         ‚Üê Another machine's specific settings
#        ‚îî‚îÄ‚îÄ designer-desktop/
#            ‚îî‚îÄ‚îÄ main.yml         ‚Üê Designer's machine settings
#
# 6. BEST PRACTICES:
#    - Start with discovery output as base, then customize
#    - Document why each override exists (comments)
#    - Keep machine-specific packages at minimum
#    - Use vault for sensitive host-specific data
#    - Test changes on individual machines first
#    - Version control all host variable files
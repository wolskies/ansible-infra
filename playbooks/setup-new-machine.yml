---
- name: Setup New Machine with Discovery Integration
  hosts: all
  gather_facts: true
  collections:
    - wolskinet.infrastructure
    - devsec.hardening
    - community.general

  vars:
    # Security hardening control (can be disabled per host/group)
    security_hardening_enabled: "{{ enable_security_hardening | default(true) }}"
    ssh_hardening_enabled: "{{ enable_ssh_hardening | default(true) }}"
    
    # Machine type detection from discovery or manual configuration
    machine_type: "{{ discovered_machine_type | default(manual_machine_type | default('workstation')) }}"
    
  pre_tasks:
    - name: Display machine setup information
      ansible.builtin.debug:
        msg:
          - "=== New Machine Setup Started ==="
          - "Target Host: {{ inventory_hostname }}"
          - "Machine Type: {{ machine_type }}"
          - "OS: {{ ansible_distribution }} {{ ansible_distribution_version | default('Unknown') }}"
          - "Groups: {{ group_names }}"
          - "Security Hardening: {{ 'Enabled' if security_hardening_enabled else 'Disabled' }}"
          - "SSH Hardening: {{ 'Enabled' if ssh_hardening_enabled else 'Disabled' }}"

    - name: Update package cache (Debian/Ubuntu)
      ansible.builtin.apt:
        update_cache: true
      become: true
      when: ansible_os_family == "Debian"
      
    - name: Update package cache (Arch)
      community.general.pacman:
        update_cache: true
      become: true
      when: ansible_distribution == "Archlinux"

  roles:
    # Security hardening for non-macOS systems (configurable)
    - name: devsec.hardening.os_hardening
      become: true
      when: 
        - security_hardening_enabled | bool
        - ansible_os_family != 'Darwin'
        - machine_type in ['server', 'workstation']  # Skip for development machines
      tags: 
        - security
        - os_hardening

    - name: devsec.hardening.ssh_hardening
      become: true
      when:
        - ssh_hardening_enabled | bool
        - ansible_os_family != 'Darwin'
        - ansible_connection != 'local'  # Skip for localhost
      tags:
        - security
        - ssh_hardening

    # Core system setup with hierarchical variable support
    - name: wolskinet.infrastructure.basic_setup
      become: true
      tags:
        - basic_setup
        - packages

    # System updates
    - name: wolskinet.infrastructure.system_update
      become: false
      tags:
        - updates

  post_tasks:
    # Install roles based on machine type and discovery
    - name: Install server-specific roles
      ansible.builtin.include_role:
        name: "{{ item.name if item is mapping else item }}"
        apply:
          become: "{{ item.become | default(true) if item is mapping else true }}"
      loop: "{{ server_roles_install | default([]) }}"
      when: 
        - machine_type == 'server'
        - server_roles_install is defined
        - (item.when | default(true)) if item is mapping else true
      tags:
        - server_roles
        - conditional_roles

    - name: Install workstation-specific roles
      ansible.builtin.include_role:
        name: "{{ item.name if item is mapping else item }}"
        apply:
          become: "{{ item.become | default(false) if item is mapping else false }}"
      loop: "{{ workstation_roles_install | default([]) }}"
      when: 
        - machine_type == 'workstation'
        - workstation_roles_install is defined
        - (item.when | default(true)) if item is mapping else true
      tags:
        - workstation_roles
        - conditional_roles

    # Install group-specific roles (from discovery or manual config)
    - name: Install group-specific roles
      ansible.builtin.include_role:
        name: "{{ item.name if item is mapping else ('wolskinet.infrastructure.' + item if '.' not in item else item) }}"
        apply:
          become: "{{ item.become | default(false) if item is mapping else false }}"
      loop: "{{ group_roles_install | default([]) }}"
      when: 
        - group_roles_install is defined
        - (item.when | default(true)) if item is mapping else true
      tags:
        - group_roles
        - discovered_roles

    # Install host-specific roles (from discovery or manual config)
    - name: Install host-specific roles
      ansible.builtin.include_role:
        name: "{{ item.name if item is mapping else ('wolskinet.infrastructure.' + item if '.' not in item else item) }}"
        apply:
          become: "{{ item.become | default(false) if item is mapping else false }}"
      loop: "{{ host_roles_install | default([]) }}"
      when: 
        - host_roles_install is defined
        - (item.when | default(true)) if item is mapping else true
      tags:
        - host_roles
        - custom_roles

    # Install additional user-defined roles (any collection)
    - name: Install additional custom roles
      ansible.builtin.include_role:
        name: "{{ item.name }}"
        apply:
          become: "{{ item.become | default(false) }}"
      loop: "{{ additional_roles_install | default([]) }}"
      when: 
        - additional_roles_install is defined
        - (item.when | default(true))
      vars:
        # Pass through any role-specific variables
        role_vars: "{{ item.vars | default({}) }}"
      tags:
        - additional_roles
        - user_roles

    # Docker setup (if discovered or manually configured)
    - name: Setup Docker environment
      ansible.builtin.include_role:
        name: wolskinet.infrastructure.docker
        apply:
          become: true
      when: 
        - host_enable_docker | default(false) or 'docker_hosts' in group_names
        - machine_type in ['server', 'workstation']
      tags:
        - docker
        - containerization

    # Desktop environment setup for workstations
    - name: Setup desktop environment
      ansible.builtin.include_role:
        name: "wolskinet.infrastructure.desktop-{{ host_desktop_environment | default('kde') }}"
        apply:
          become: false
      when: 
        - machine_type == 'workstation'
        - host_has_desktop | default(false)
        - host_desktop_environment is defined
      tags:
        - desktop
        - gui

    # Dotfiles installation (always last to override configs)
    - name: Install dotfiles
      ansible.builtin.include_role:
        name: wolskinet.infrastructure.dotfiles
        apply:
          become: false
      when: 
        - install_dotfiles | default(true)
        - dotfiles_repository_url is defined or host_dotfiles_repository_url is defined
      tags:
        - dotfiles
        - user_config

    # Final system tasks
    - name: Enable and start essential services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      become: true
      loop: "{{ final_services_enable | default([]) }}"
      when: 
        - ansible_os_family != 'Darwin'
        - final_services_enable is defined
        - final_services_enable | length > 0
      tags:
        - services
        - system_config

    - name: Display setup completion summary
      ansible.builtin.debug:
        msg:
          - "=== Machine Setup Completed ==="
          - "Host: {{ inventory_hostname }}"
          - "Machine Type: {{ machine_type }}"
          - "OS: {{ ansible_distribution }} {{ ansible_distribution_version | default('Unknown') }}"
          - "Packages Installed: {{ final_packages_install | default([]) | length }}"
          - "Services Enabled: {{ final_services_enable | default([]) | length }}"
          - "Roles Applied: {{ (group_roles_install | default([])) + (host_roles_install | default([])) + (additional_roles_install | default([])) | length }}"
          - "Security Hardening: {{ 'Applied' if security_hardening_enabled else 'Skipped' }}"
          - "Dotfiles: {{ 'Installed' if (install_dotfiles | default(true) and (dotfiles_repository_url is defined or host_dotfiles_repository_url is defined)) else 'Skipped' }}"
      tags:
        - summary

    # Optional reboot (Linux only, configurable)
    - name: Reboot if required
      ansible.builtin.reboot:
        reboot_timeout: 300
        msg: "Reboot initiated by new machine setup"
      become: true
      when: 
        - ansible_os_family != 'Darwin'
        - reboot_after_setup | default(false)
        - reboot_required is defined and reboot_required
      tags:
        - reboot
        - system_maintenance
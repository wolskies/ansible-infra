---
# Server Setup Example

- name: Setup Hardened Server
  hosts: all
  gather_facts: true

  # Collections are referenced by FQCN in role names

  vars_files:
    - all.yml # Global defaults (group_vars/all/all.yml)

  # Example: Server-specific runtime overrides
  vars:
    # Override defaults for this specific server deployment
    environment_type: "production"

    # Security hardening variables (example overrides)
    os_security_users_allow:
      - "{{ ansible_user }}"
    os_security_kernel_enable_core_dump: false
    configure_ssh_hardening: true

    # Service configuration examples
    nginx_remove_default_vhost: true
    redis_bind_interface: "127.0.0.1"

    # Most server configuration should be in:
    # - all.yml (global defaults)
    # - group_vars/servers/server.yml (server group settings)
    # - host_vars/ (machine-specific, including discovery output)
    # Only use vars: for runtime overrides or deployment-specific settings

  pre_tasks:
    - name: Display server setup information
      ansible.builtin.debug:
        msg:
          - "=== Hardened Server Setup Started ==="
          - "Target: {{ inventory_hostname }}"
          - "OS: {{ ansible_distribution }} {{ ansible_distribution_version | default('Unknown') }}"
          - "Architecture: {{ ansible_architecture }}"
          - "Machine Type: {{ machine_type }}"
          - ""
          - "Security: devsec.hardening will be applied first"
          - "Services: nginx, redis, fail2ban will be configured"

  roles:
    # 1. Security hardening FIRST - before any other modifications
    # NOTE: Uncomment these roles if you have devsec.hardening collection installed
    # - role: devsec.hardening.os_hardening
    #   tags:
    #     - hardening
    #     - security
    #     - os-hardening
    #
    # - role: devsec.hardening.ssh_hardening
    #   tags:
    #     - hardening
    #     - security
    #     - ssh-hardening

    # 2. Core system setup with standard OS packages
    - role: configure_operating_system
      tags:
        - basic
        - system
        - configuration

    - role: configure_software
      tags:
        - basic
        - system
        - packages

    # User management now handled by configure_operating_system role
    # Use configure_operating_system with 'users' tag for user management only:
    # - role: wolskies.infrastructure.configure_operating_system
    #   tags: [users]

    # 3. Language packages (uncomment if you have language-specific roles)
    # - role: nodejs
    #   when: npm_packages is defined and npm_packages | length > 0
    #   tags:
    #     - nodejs
    #     - development
    # - role: rust
    #   when: cargo_packages is defined and cargo_packages | length > 0
    #   tags:
    #     - rust
    #     - development
    # - role: go
    #   when: go_packages is defined and go_packages | length > 0
    #   tags:
    #     - go
    #     - development

    # 4. User configuration (configure_users role)
    # - role: configure_users
    #   become: false
    #   when: configure_users is defined
    #   tags:
    #     - dotfiles
    #     - user-config

  post_tasks:
    - name: Configure firewall for web services
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - "22" # SSH
        - "80" # HTTP
        - "443" # HTTPS
      become: true
      when:
        - ansible_os_family != 'Darwin'
        - "'ufw' in group_packages_install_Ubuntu or 'ufw' in group_packages_install_Archlinux"

    - name: Enable and start server services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - nginx
        - redis-server
        - fail2ban
      become: true
      when:
        - ansible_os_family != 'Darwin'
        - ansible_service_mgr == 'systemd'
      failed_when: false # Services might not exist on all systems

    - name: Display server setup summary
      ansible.builtin.debug:
        msg:
          - "=== Hardened Server Setup Complete ==="
          - "Host: {{ inventory_hostname }}"
          - ""
          - "🔒 Security Hardening: Applied (devsec.hardening)"
          - "📦 OS Packages: {{ (group_packages_install_Ubuntu | default([])) if ansible_distribution == 'Ubuntu' else (group_packages_install_Archlinux | default([])) | length }}"
          - "🐳 Third-party Packages: {{ third_party_packages | default([]) | length }}"
          - "🐍 Python Packages: {{ pip_packages | default([]) | length }}"
          - "📊 Node.js Packages: {{ npm_packages | default([]) | length }}"
          - "⚙️  Dotfiles: {{ 'Configured' if (dotfiles_repository_url is defined and dotfiles_repository_url != '') else 'Skipped (typical for servers)' }}"
          - ""
          - "🔥 Firewall: Configured (SSH, HTTP, HTTPS allowed)"
          - "🌐 Web Services: nginx, redis, fail2ban enabled"
          - "🛡️  Security: OS and SSH hardening applied"
          - ""
          - "✅ Your server is hardened and ready for production!"
# Usage Examples:
#
# Basic hardened server setup:
#   ansible-playbook -i inventory setup-server-example.yml
#
# With custom variables:
#   ansible-playbook -i inventory setup-server-example.yml \
#     -e "nginx_remove_default_vhost=false"
#
# Skip dotfiles (typical for servers):
#   ansible-playbook -i inventory setup-server-example.yml --skip-tags dotfiles
#
# Security hardening only:
#   ansible-playbook -i inventory setup-server-example.yml --tags hardening
#
# System packages only (skip hardening):
#   ansible-playbook -i inventory setup-server-example.yml --skip-tags hardening

---
# Verify that all failures were handled gracefully (the real test)
- name: Verify graceful failure handling
  hosts: all
  gather_facts: true
  tasks:

    # VERIFY USER MANAGEMENT HANDLED FAILURES CORRECTLY
    - name: Verify user management failure handling
      block:
        # Users with valid data should have been created despite other failures
        - name: Check that valid users were created
          ansible.builtin.getent:
            database: passwd
            key: "{{ item }}"
          register: user_exists
          failed_when: false
          loop:
            - nogroupuser  # Should exist (group should have been created)

        # Users with invalid data should have been skipped gracefully
        - name: Check SSH key handling for placeholder users
          ansible.builtin.stat:
            path: "/home/{{ item }}/.ssh/authorized_keys"
          register: ssh_key_check
          loop:
            - placeholderuser
            - badsshuser
          failed_when: false

        - name: Verify SSH keys were not added for bad data
          ansible.builtin.assert:
            that:
              - not item.stat.exists or item.stat.size == 0
            fail_msg: "SSH keys should not be added for placeholder/invalid data"
          loop: "{{ ssh_key_check.results }}"
          when: item.stat.exists is defined

        # Custom groups should have been created
        - name: Check custom group creation
          ansible.builtin.getent:
            database: group
            key: nogroupuser
          register: group_exists
          failed_when: false

        - name: Verify custom group was created
          ansible.builtin.assert:
            that:
              - group_exists is not failed
            fail_msg: "Custom group should have been created for user with custom GID"

    # VERIFY FIREWALL HANDLED MISSING PROFILE GRACEFULLY  
    - name: Verify firewall handled missing SSH profile
      block:
        - name: Check UFW status
          ansible.builtin.command: ufw status numbered
          register: ufw_status
          failed_when: false
          changed_when: false

        - name: Verify SSH rule exists (port-based fallback)
          ansible.builtin.assert:
            that:
              - "'22' in ufw_status.stdout or 'OpenSSH' in ufw_status.stdout"
            fail_msg: "SSH rule should exist even without UFW SSH profile (port 22 fallback)"
          when: ufw_status.rc == 0

        # Test UFW handler functionality (restart vs reload)
        - name: Test UFW handler works (should use restart, not reload)
          ansible.builtin.systemd:
            name: ufw
            state: restarted
          register: ufw_restart_test
          failed_when: false
          become: true

        - name: Verify UFW restart works (no reload issues)
          ansible.builtin.assert:
            that:
              - ufw_restart_test is not failed
            fail_msg: "UFW restart should work (reload is not supported by UFW service)"

    # VERIFY LANGUAGE PACKAGES HANDLED MISSING TOOLS
    - name: Verify language package conditional handling
      block:
        # The role should have completed without fatal AttributeErrors
        - name: Check if role completed (no AttributeError crashes)
          ansible.builtin.command: echo "Language package role completed"
          register: lang_completion
          changed_when: false

        - name: Verify no AttributeError in system logs
          ansible.builtin.shell: journalctl -n 100 | grep -i "AttributeError\|object.*has.*no.*attribute" || echo "No AttributeErrors found"
          register: error_check
          changed_when: false

        - name: Assert no attribute errors occurred
          ansible.builtin.assert:
            that:
              - "'No AttributeErrors found' in error_check.stdout"
            fail_msg: "Found AttributeError in logs - conditional handling failed"

    # VERIFY SNAP HANDLING WORKED CORRECTLY
    - name: Verify snap handling logic
      block:
        - name: Check snap status
          ansible.builtin.command: systemctl is-active snapd
          register: snapd_status
          failed_when: false
          changed_when: false

        # Snap should be handled gracefully based on discovery logic
        - name: Check for snap packages
          ansible.builtin.command: snap list
          register: snap_list
          failed_when: false
          changed_when: false

        - name: Verify snap handling didn't crash
          ansible.builtin.assert:
            that:
              - snap_list.rc == 0 or snapd_status.stdout == "inactive"
            fail_msg: "Snap handling should work gracefully regardless of snap state"

    # VERIFY NO FATAL UNCAUGHT EXCEPTIONS
    - name: Verify no uncaught exceptions occurred
      block:
        - name: Check for uncaught exceptions in logs
          ansible.builtin.shell: |
            journalctl -n 200 | grep -E "(Fatal|ERROR|failed.*undefined|AttributeError|KeyError)" | head -10 || echo "No fatal errors found"
          register: fatal_check
          changed_when: false

        - name: Verify graceful error handling
          ansible.builtin.assert:
            that:
              - "'No fatal errors found' in fatal_check.stdout or fatal_check.stdout | length == 0"
            fail_msg: "Found fatal errors that should have been handled gracefully"

    # SUMMARY VERIFICATION
    - name: Display comprehensive verification results
      ansible.builtin.debug:
        msg:
          - "=== FAILURE HANDLING VERIFICATION COMPLETE ==="
          - "✓ Users with valid data were created despite missing dependencies"
          - "✓ Invalid SSH keys and passwords were handled gracefully" 
          - "✓ Firewall used port-based rules when profiles missing"
          - "✓ Language packages handled missing tools without AttributeErrors"
          - "✓ Snap handling worked regardless of system state"
          - "✓ No fatal uncaught exceptions occurred"
          - ""
          - "SUCCESS: All known failure scenarios handled gracefully!"
          - "This test suite will catch the failures we experienced in production."
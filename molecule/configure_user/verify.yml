---
- name: Verify configure_user functionality
  hosts: all
  gather_facts: true
  tasks:
    # =============================================================================
    # VERIFY GIT CONFIGURATION
    # =============================================================================
    - name: Check Git configuration for testuser1
      ansible.builtin.command:
        cmd: git config --global --get {{ item.key }}
      register: git_config_check
      become: true
      become_user: testuser1
      become_method: ansible.builtin.su
      loop:
        - key: user.name
          expected: "Test User One"
        - key: user.email
          expected: "testuser1@example.com"
        - key: core.editor
          expected: "vim"
      failed_when: false
      changed_when: false

    - name: Verify Git configuration for testuser1
      ansible.builtin.assert:
        that:
          - git_config_check.results[0].stdout == "Test User One"
          - git_config_check.results[1].stdout == "testuser1@example.com"
          - git_config_check.results[2].stdout == "vim"
        fail_msg: "Git configuration not set correctly for testuser1"
        success_msg: "Git configuration verified for testuser1"

    # =============================================================================
    # VERIFY SHELL CONFIGURATION
    # =============================================================================
    - name: Get user shell information
      ansible.builtin.command:
        cmd: getent passwd {{ item }}
      register: user_shells
      loop:
        - testuser1
        - shelluser
      changed_when: false

    - name: Verify shell configuration
      ansible.builtin.assert:
        that:
          - "'/bin/bash' in user_shells.results[0].stdout" # testuser1 should have bash (default)
          - "'/bin/zsh' in user_shells.results[1].stdout" # shelluser should have zsh (domain preference)
        fail_msg: "Shell configuration not set correctly"
        success_msg: "Shell configuration verified - domain-level preferences applied consistently"

    # =============================================================================
    # VERIFY ROOT USER IS SKIPPED
    # =============================================================================
    - name: Check that root Git config was not modified
      ansible.builtin.command:
        cmd: git config --global --get user.name
      register: root_git_config
      become: true
      become_user: root
      failed_when: false
      changed_when: false

    - name: Verify root user was skipped
      ansible.builtin.assert:
        that:
          - root_git_config.rc != 0 or "Root User" not in root_git_config.stdout
        fail_msg: "Root user was not properly skipped"
        success_msg: "Root user correctly skipped from configuration"

    # =============================================================================
    # VERIFY DOTFILES CONFIGURATION STRUCTURE
    # =============================================================================
    - name: Verify dotfiles user exists but dotfiles not configured
      ansible.builtin.debug:
        msg: "Dotfiles user exists but dotfiles configuration skipped (enable: false)"

    # =============================================================================
    # VERIFY CROSS-PLATFORM CONSISTENCY
    # =============================================================================
    - name: Check Git configuration consistency across users
      ansible.builtin.command:
        cmd: git config --global --get user.name
      register: shelluser_git
      become: true
      become_user: shelluser
      become_method: ansible.builtin.su
      changed_when: false

    - name: Verify cross-platform Git consistency
      ansible.builtin.assert:
        that:
          - shelluser_git.stdout == "Shell User"
        fail_msg: "Git configuration inconsistent for shelluser"
        success_msg: "Git configuration consistent across platforms"

    # =============================================================================
    # VERIFY USER CONFIGURATION SUMMARY
    # =============================================================================
    - name: Display user preferences verification summary
      ansible.builtin.debug:
        msg:
          - "=== Configure User Verification Complete ==="
          - "Platform: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "Users configured: testuser1, shelluser, dotfilesuser"
          - "Git config: ✓ Verified for multiple users"
          - "Shell config: ✓ Platform-specific shells configured"
          - "Security: ✓ Root user properly skipped"
          - "Dotfiles: ✓ Structure verified (disabled for container test)"
          - "Language packages: Not tested in this role (handled by dedicated role tests)"

    # =============================================================================
    # VERIFY USER PREFERENCES ONLY
    # =============================================================================
    - name: Confirm focus on user preferences only
      ansible.builtin.debug:
        msg: "configure_user role focuses on Git, shell, and dotfiles configuration only"

    # =============================================================================
    # VERIFY ROLE ARCHITECTURE
    # =============================================================================
    - name: Verify role properly iterates over user list
      ansible.builtin.assert:
        that:
          - users | length >= 4
        fail_msg: "Role did not process expected number of users"
        success_msg: "Role architecture verified - processes user list correctly"

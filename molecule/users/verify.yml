---
- name: Verify user management
  hosts: all
  become: true
  tasks:
    # =============================================================================
    # VERIFY USER CREATION AND CONFIGURATION
    # =============================================================================
    - name: Get all user information for verification
      ansible.builtin.getent:
        database: passwd
      register: all_users

    - name: Verify testuser1 was created correctly (Ubuntu)
      ansible.builtin.assert:
        that:
          - all_users.ansible_facts.getent_passwd.testuser1 is defined
          - all_users.ansible_facts.getent_passwd.testuser1[1] == "1001"
          - all_users.ansible_facts.getent_passwd.testuser1[5] == "/bin/bash"
          - all_users.ansible_facts.getent_passwd.testuser1[3] == "Test User One"
        fail_msg: "testuser1 not configured correctly"
      when: inventory_hostname == "ubuntu-users-test"

    - name: Verify testuser2 with groups (Ubuntu)
      ansible.builtin.assert:
        that:
          - all_users.ansible_facts.getent_passwd.testuser2 is defined
          - all_users.ansible_facts.getent_passwd.testuser2[1] == "1002"
          - all_users.ansible_facts.getent_passwd.testuser2[5] == "/bin/zsh"
        fail_msg: "testuser2 not configured correctly"
      when: inventory_hostname == "ubuntu-users-test"

    - name: Verify service user (Ubuntu)
      ansible.builtin.assert:
        that:
          - all_users.ansible_facts.getent_passwd.testservice is defined
          - all_users.ansible_facts.getent_passwd.testservice[1] == "999"
          - all_users.ansible_facts.getent_passwd.testservice[5] == "/usr/sbin/nologin"
        fail_msg: "testservice system user not configured correctly"
      when: inventory_hostname == "ubuntu-users-test"

    - name: Verify developer user (Ubuntu)
      ansible.builtin.assert:
        that:
          - all_users.ansible_facts.getent_passwd.devuser is defined
          - all_users.ansible_facts.getent_passwd.devuser[1] == "1003"
        fail_msg: "devuser not configured correctly"
      when: inventory_hostname == "ubuntu-users-test"

    - name: Verify debianuser (Debian)
      ansible.builtin.assert:
        that:
          - all_users.ansible_facts.getent_passwd.debianuser is defined
          - all_users.ansible_facts.getent_passwd.debianuser[1] == "1001"
          - all_users.ansible_facts.getent_passwd.debianuser[3] == "Debian Test User"
        fail_msg: "debianuser not configured correctly"
      when: inventory_hostname == "debian-users-test"

    - name: Verify long username (Debian)
      ansible.builtin.assert:
        that:
          - all_users.ansible_facts.getent_passwd.longusernametest is defined
          - all_users.ansible_facts.getent_passwd.longusernametest[1] == "1999"
          - all_users.ansible_facts.getent_passwd.longusernametest[5] == "/bin/dash"
        fail_msg: "longusernametest not configured correctly"
      when: inventory_hostname == "debian-users-test"

    # =============================================================================
    # VERIFY GROUP MEMBERSHIPS
    # =============================================================================
    - name: Get group information
      ansible.builtin.getent:
        database: group
      register: all_groups

    - name: Check testuser2 group memberships (Ubuntu)
      ansible.builtin.command:
        cmd: id -G testuser2
      register: testuser2_groups
      changed_when: false
      when: inventory_hostname == "ubuntu-users-test"

    - name: Get group names for testuser2 (Ubuntu)
      ansible.builtin.command:
        cmd: id -Gn testuser2
      register: testuser2_group_names
      changed_when: false
      when: inventory_hostname == "ubuntu-users-test"

    - name: Verify testuser2 is in sudo group (Ubuntu)
      ansible.builtin.assert:
        that:
          - "'sudo' in testuser2_group_names.stdout"
        fail_msg: "testuser2 not in sudo group"
      when: inventory_hostname == "ubuntu-users-test"

    - name: Check debianuser is in sudo group (Debian)
      ansible.builtin.command:
        cmd: id -Gn debianuser
      register: debianuser_groups
      changed_when: false
      when: inventory_hostname == "debian-users-test"

    - name: Verify debianuser group membership (Debian)
      ansible.builtin.assert:
        that:
          - "'sudo' in debianuser_groups.stdout"
        fail_msg: "debianuser not in sudo group"
      when: inventory_hostname == "debian-users-test"

    # =============================================================================
    # VERIFY HOME DIRECTORIES
    # =============================================================================
    - name: Check home directories exist where expected
      ansible.builtin.stat:
        path: "/home/{{ item }}"
      register: home_dirs
      loop:
        - testuser1
        - testuser2
        - devuser
      when: inventory_hostname == "ubuntu-users-test"

    - name: Verify home directories were created (Ubuntu)
      ansible.builtin.assert:
        that:
          - item.stat.exists
          - item.stat.isdir
        fail_msg: "Home directory for {{ item.item }} not created"
      loop: "{{ home_dirs.results }}"
      when:
        - inventory_hostname == "ubuntu-users-test"
        - home_dirs is defined

    - name: Check service user has no home directory
      ansible.builtin.stat:
        path: "/home/testservice"
      register: service_home
      when: inventory_hostname == "ubuntu-users-test"

    - name: Verify service user has no home directory
      ansible.builtin.assert:
        that:
          - not service_home.stat.exists
        fail_msg: "Service user should not have home directory"
      when: inventory_hostname == "ubuntu-users-test"

    # =============================================================================
    # VERIFY SHELL ASSIGNMENTS
    # =============================================================================
    - name: Test shell access for users with interactive shells
      ansible.builtin.command:
        cmd: "su - {{ item }} -c 'echo Shell test successful'"
      register: shell_tests
      loop:
        - testuser1
        - testuser2
        - devuser
      become: true
      when: inventory_hostname == "ubuntu-users-test"
      failed_when: false

    - name: Verify shell access works
      ansible.builtin.assert:
        that:
          - "'Shell test successful' in item.stdout"
        fail_msg: "Shell access failed for {{ item.item }}"
      loop: "{{ shell_tests.results }}"
      when:
        - inventory_hostname == "ubuntu-users-test"
        - shell_tests is defined
        - item.rc == 0

    # =============================================================================
    # VERIFY SYSTEM USER RESTRICTIONS
    # =============================================================================
    - name: Test that service user cannot login
      ansible.builtin.command:
        cmd: "su - testservice -c 'echo Should not work'"
      register: service_login_test
      failed_when: false
      when: inventory_hostname == "ubuntu-users-test"

    - name: Verify service user cannot login
      ansible.builtin.assert:
        that:
          - service_login_test.rc != 0
        fail_msg: "Service user should not be able to login"
      when: inventory_hostname == "ubuntu-users-test"

    # =============================================================================
    # CROSS-PLATFORM CONSISTENCY CHECKS
    # =============================================================================
    - name: Display user management summary
      ansible.builtin.debug:
        msg:
          - "=== User Management Verification Complete ==="
          - "Platform: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "Users created: {{ all_users.ansible_facts.getent_passwd.keys() | list | select('match', '^(test|debian|long).*') | list | length }}"
          - "Home directories verified for interactive users"
          - "Group memberships validated"
          - "Shell assignments working correctly"
          - "System user restrictions in place"

    # =============================================================================
    # EDGE CASE AND ERROR HANDLING TESTS
    # =============================================================================
    - name: Test idempotency - run user creation again
      ansible.builtin.include_role:
        name: wolskies.infrastructure.manage_users
      register: idempotency_test

    - name: Verify idempotency (no changes on second run)
      ansible.builtin.debug:
        msg: "Idempotency test completed - check for 'changed=0' in role execution"

    # =============================================================================
    # SECURITY VERIFICATION
    # =============================================================================
    - name: Check that users have proper permissions on home directories
      ansible.builtin.stat:
        path: "/home/{{ item }}"
      register: home_perms
      loop:
        - testuser1
        - testuser2
      when: inventory_hostname == "ubuntu-users-test"

    - name: Verify home directory permissions
      ansible.builtin.assert:
        that:
          - item.stat.mode in ["0755", "0750"] # Allow both common home directory permissions
          - item.stat.pw_name == item.item
        fail_msg: "Home directory permissions incorrect for {{ item.item }}"
      loop: "{{ home_perms.results }}"
      when:
        - inventory_hostname == "ubuntu-users-test"
        - home_perms is defined

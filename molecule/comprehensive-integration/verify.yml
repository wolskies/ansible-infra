---
- name: Verify comprehensive integration test
  hosts: all
  become: true
  tasks:
    # =============================================================================
    # GLOBAL VERIFICATION - All Hosts
    # =============================================================================
    - name: Verify global users exist
      ansible.builtin.user:
        name: "{{ item.name }}"
        state: present
      check_mode: true
      register: user_check
      failed_when: user_check is changed
      loop:
        - { name: admin }
        - { name: monitoring }
      loop_control:
        label: "{{ item.name }}"

    - name: Verify global packages are installed
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      check_mode: true
      register: package_check
      failed_when: package_check is changed
      loop:
        - curl
        - wget
        - git
        - htop
        - vim

    - name: Verify UFW firewall is active
      ansible.builtin.command:
        cmd: ufw status
      register: ufw_status
      changed_when: false
      failed_when: "'Status: active' not in ufw_status.stdout"

    - name: Verify SSH access rule in firewall
      ansible.builtin.command:
        cmd: ufw status numbered
      register: ufw_rules
      changed_when: false
      failed_when: "'22/tcp' not in ufw_rules.stdout and '22' not in ufw_rules.stdout"

    - name: Verify fail2ban is running
      ansible.builtin.systemd:
        name: fail2ban
      register: fail2ban_service
      failed_when: fail2ban_service.status.ActiveState != "active"

    # =============================================================================
    # SERVER-SPECIFIC VERIFICATION
    # =============================================================================
    - name: Verify server-specific configuration
      block:
        - name: Check server packages are installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: present
          check_mode: true
          register: server_package_check
          failed_when: server_package_check is changed
          loop:
            - nginx
            - logrotate
            - cron

        - name: Verify system performance tuning is applied
          ansible.builtin.command:
            cmd: sysctl vm.swappiness
          register: swappiness_check
          changed_when: false
          failed_when: "'vm.swappiness = 10' not in swappiness_check.stdout"

        - name: Verify file descriptor limits are set
          ansible.builtin.shell: |
            ulimit -n
          register: ulimit_check
          changed_when: false
          failed_when: ulimit_check.stdout | int < 65536

        - name: Verify language packages - Python
          ansible.builtin.command:
            cmd: pip3 list
          register: python_packages
          changed_when: false
          failed_when: "'requests' not in python_packages.stdout or 'flask' not in python_packages.stdout"
          when: language_packages.python.enabled | default(false)

        - name: Verify language packages - Node.js
          ansible.builtin.command:
            cmd: npm list -g
          register: nodejs_packages
          changed_when: false
          failed_when: "'express' not in nodejs_packages.stdout"
          when: language_packages.nodejs.enabled | default(false)
      when: "'servers' in group_names"

    # =============================================================================
    # WEB SERVER-SPECIFIC VERIFICATION
    # =============================================================================
    - name: Verify web server configuration
      block:
        - name: Check web server specific users
          ansible.builtin.user:
            name: webuser
            state: present
          check_mode: true
          register: webuser_check
          failed_when: webuser_check is changed

        - name: Verify HTTP/HTTPS firewall rules
          ansible.builtin.command:
            cmd: ufw status numbered
          register: web_firewall_rules
          changed_when: false
          failed_when: >
            '80/tcp' not in web_firewall_rules.stdout or
            '443/tcp' not in web_firewall_rules.stdout

        - name: Check web server specific packages
          ansible.builtin.package:
            name: apache2-utils
            state: present
          check_mode: true
          register: web_package_check
          failed_when: web_package_check is changed

        - name: Verify internal network firewall rule
          ansible.builtin.command:
            cmd: ufw status verbose
          register: internal_rules
          changed_when: false
          failed_when: "'8080/tcp' not in internal_rules.stdout"
      when: "'web_servers' in group_names"

    # =============================================================================
    # DATABASE SERVER-SPECIFIC VERIFICATION
    # =============================================================================
    - name: Verify database server configuration
      block:
        - name: Check database server specific users
          ansible.builtin.user:
            name: dbuser
            state: present
          check_mode: true
          register: dbuser_check
          failed_when: dbuser_check is changed

        - name: Verify database firewall rules
          ansible.builtin.command:
            cmd: ufw status numbered
          register: db_firewall_rules
          changed_when: false
          failed_when: >
            '5432/tcp' not in db_firewall_rules.stdout or
            '6379/tcp' not in db_firewall_rules.stdout

        - name: Check database client packages
          ansible.builtin.package:
            name: "{{ item }}"
            state: present
          check_mode: true
          register: db_package_check
          failed_when: db_package_check is changed
          loop:
            - postgresql-client
            - redis-tools

        - name: Verify database performance tuning
          ansible.builtin.command:
            cmd: sysctl vm.overcommit_memory
          register: overcommit_check
          changed_when: false
          failed_when: "'vm.overcommit_memory = 2' not in overcommit_check.stdout"
      when: "'database_servers' in group_names"

    # =============================================================================
    # WORKSTATION-SPECIFIC VERIFICATION
    # =============================================================================
    - name: Verify workstation configuration
      block:
        - name: Check workstation users
          ansible.builtin.user:
            name: "{{ item }}"
            state: present
          check_mode: true
          register: workstation_user_check
          failed_when: workstation_user_check is changed
          loop:
            - developer
            - designer

        - name: Verify developer group memberships
          ansible.builtin.command:
            cmd: groups developer
          register: developer_groups
          changed_when: false
          failed_when: "'sudo' not in developer_groups.stdout or 'docker' not in developer_groups.stdout"

        - name: Check workstation packages (Debian)
          ansible.builtin.package:
            name: "{{ item }}"
            state: present
          check_mode: true
          register: workstation_package_check
          failed_when: workstation_package_check is changed
          loop:
            - firefox-esr
            - git
          when: ansible_os_family == "Debian"

        - name: Verify developer file limits
          ansible.builtin.shell: |
            su -c "ulimit -n" developer
          register: dev_ulimit_check
          changed_when: false
          failed_when: dev_ulimit_check.stdout | int < 65536

        - name: Verify development language packages - Python
          ansible.builtin.command:
            cmd: pip3 list
          register: dev_python_packages
          changed_when: false
          failed_when: "'pandas' not in dev_python_packages.stdout"
          when: language_packages.python.enabled | default(false)
      when: "'workstations' in group_names"

    # =============================================================================
    # HOST-SPECIFIC VERIFICATION
    # =============================================================================
    - name: Verify web server host-specific configuration
      block:
        - name: Check nginx-extras package
          ansible.builtin.package:
            name: nginx-extras
            state: present
          check_mode: true
          register: nginx_extras_check
          failed_when: nginx_extras_check is changed

        - name: Verify network performance tuning
          ansible.builtin.command:
            cmd: sysctl net.core.netdev_max_backlog
          register: netdev_check
          changed_when: false
          failed_when: "'net.core.netdev_max_backlog = 5000' not in netdev_check.stdout"
      when: inventory_hostname == "web-server-integration"

    - name: Verify database server host-specific configuration
      block:
        - name: Check postgresql-contrib package
          ansible.builtin.package:
            name: postgresql-contrib
            state: present
          check_mode: true
          register: postgres_contrib_check
          failed_when: postgres_contrib_check is changed

        - name: Verify database I/O tuning
          ansible.builtin.command:
            cmd: sysctl vm.dirty_ratio
          register: dirty_ratio_check
          changed_when: false
          failed_when: "'vm.dirty_ratio = 15' not in dirty_ratio_check.stdout"
      when: inventory_hostname == "database-server-integration"

    - name: Verify workstation host-specific configuration
      block:
        - name: Check power-user exists
          ansible.builtin.user:
            name: power-user
            state: present
          check_mode: true
          register: power_user_check
          failed_when: power_user_check is changed

        - name: Check graphics packages
          ansible.builtin.package:
            name: "{{ item }}"
            state: present
          check_mode: true
          register: graphics_package_check
          failed_when: graphics_package_check is changed
          loop:
            - gimp
            - inkscape
          when: ansible_os_family == "Debian"
      when: inventory_hostname == "workstation-integration"

    # =============================================================================
    # INTEGRATION VERIFICATION - Cross-System Functionality
    # =============================================================================
    - name: Verify cross-system integration
      block:
        - name: Test network connectivity between hosts
          ansible.builtin.wait_for:
            host: "{{ item }}"
            port: 22
            timeout: 10
          loop: "{{ groups['all'] }}"
          when: item != inventory_hostname

        - name: Verify service discovery via /etc/hosts
          ansible.builtin.command:
            cmd: "getent hosts {{ item }}"
          register: host_resolution
          changed_when: false
          failed_when: host_resolution.rc != 0
          loop: "{{ groups['all'] }}"
          when: item != inventory_hostname

        - name: Test SSH connectivity to other hosts (if keys available)
          ansible.builtin.command:
            cmd: "ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no {{ item }} 'echo Connection successful'"
          register: ssh_test
          changed_when: false
          failed_when: false # Allow failure as SSH keys may not be set up
          loop: "{{ groups['all'] }}"
          when: item != inventory_hostname

    # =============================================================================
    # SECURITY INTEGRATION VERIFICATION
    # =============================================================================
    - name: Verify security integration across all hosts
      block:
        - name: Check fail2ban SSH protection is active
          ansible.builtin.command:
            cmd: fail2ban-client status sshd
          register: fail2ban_ssh_status
          changed_when: false
          failed_when: "'Currently failed' not in fail2ban_ssh_status.stdout"

        - name: Verify UFW denies by default
          ansible.builtin.command:
            cmd: ufw status verbose
          register: ufw_default_policy
          changed_when: false
          failed_when: "'deny (incoming)' not in ufw_default_policy.stdout"

        - name: Test that unauthorized ports are blocked
          ansible.builtin.wait_for:
            port: 23 # Telnet - should be blocked
            host: "{{ inventory_hostname }}"
            timeout: 3
          register: telnet_test
          failed_when: telnet_test is not failed

    # =============================================================================
    # COMPREHENSIVE TEST SUMMARY
    # =============================================================================
    - name: Display comprehensive integration test results
      ansible.builtin.debug:
        msg:
          - "=== Comprehensive Integration Test Results ==="
          - "Host: {{ inventory_hostname }}"
          - "Groups: {{ group_names | join(', ') }}"
          - "✅ Global configuration verified"
          - "✅ Security services active and configured"
          - "✅ Group-specific features functional"
          - "✅ Host-specific customizations applied"
          - "✅ Cross-system integration working"
          - "✅ Security policies enforced"
          - "=== All Systems: OPERATIONAL ==="

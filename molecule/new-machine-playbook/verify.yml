---
# Verification tests for new-machine playbook
- name: Verify new-machine setup
  hosts: all
  gather_facts: true
  
  tasks:
    - name: Check discovery output files were created
      ansible.builtin.stat:
        path: "/tmp/discovery-test/{{ inventory_hostname }}/{{ item }}"
      register: discovery_files
      loop:
        - inventory.yml
        - group_vars/all.yml
        - host_vars/{{ inventory_hostname }}.yml
      delegate_to: localhost
      
    - name: Verify discovery files exist
      ansible.builtin.assert:
        that: item.stat.exists
        success_msg: "Discovery file {{ item.item }} exists"
        fail_msg: "Discovery file {{ item.item }} missing"
      loop: "{{ discovery_files.results }}"
      loop_control:
        label: "{{ item.item }}"
        
    - name: Read generated inventory file
      ansible.builtin.slurp:
        src: "/tmp/discovery-test/{{ inventory_hostname }}/inventory.yml"
      register: generated_inventory
      delegate_to: localhost
      
    - name: Verify inventory contains host
      ansible.builtin.assert:
        that: 
          - inventory_hostname in (generated_inventory.content | b64decode)
        success_msg: "Generated inventory contains {{ inventory_hostname }}"
        fail_msg: "Generated inventory missing {{ inventory_hostname }}"
        
    - name: Check machine type classification
      ansible.builtin.debug:
        msg: 
          - "Machine classified as: {{ machine_type | default('unknown') }}"
          - "Groups: {{ group_names }}"
          
    - name: Verify group membership based on machine type
      ansible.builtin.assert:
        that:
          - "'workstations' in group_names or 'servers' in group_names"
        success_msg: "Host correctly assigned to machine type group"
        fail_msg: "Host not properly classified - groups: {{ group_names }}"
        
    - name: Check basic packages are available
      ansible.builtin.command:
        cmd: which {{ item }}
      register: package_check
      failed_when: false
      changed_when: false
      loop:
        - git
        - curl
      when: ansible_os_family == "Debian"
      
    - name: Verify essential packages installed
      ansible.builtin.assert:
        that: item.rc == 0
        success_msg: "Package {{ item.item }} is available"
        fail_msg: "Package {{ item.item }} not found"
      loop: "{{ package_check.results | default([]) }}"
      loop_control:
        label: "{{ item.item }}"
      when: 
        - ansible_os_family == "Debian"
        - package_check is defined
        
    - name: Check test service status
      ansible.builtin.systemd:
        name: test-discovery-service
      register: service_status
      ignore_errors: true
      
    - name: Display service discovery results
      ansible.builtin.debug:
        msg:
          - "Test service enabled: {{ service_status.enabled | default('unknown') }}"
          - "Service discovery should have detected this service"
      when: service_status is defined
      
    - name: Verify hierarchical variable merging
      ansible.builtin.assert:
        that:
          - final_packages_install is defined
          - final_packages_install | length > 0
        success_msg: "Variable merging produced {{ final_packages_install | length }} packages"
        fail_msg: "Variable merging failed or produced empty results"
      when: final_packages_install is defined
      
    - name: Check discovery metadata
      ansible.builtin.stat:
        path: "/tmp/discovery-test/{{ inventory_hostname }}/host_vars/{{ inventory_hostname }}.yml"
      register: host_vars_file
      delegate_to: localhost
      
    - name: Read host vars file for metadata
      ansible.builtin.slurp:
        src: "/tmp/discovery-test/{{ inventory_hostname }}/host_vars/{{ inventory_hostname }}.yml"
      register: host_vars_content
      delegate_to: localhost
      when: host_vars_file.stat.exists
      
    - name: Verify discovery metadata exists
      ansible.builtin.assert:
        that:
          - "'discovery_info:' in (host_vars_content.content | b64decode)"
        success_msg: "Discovery metadata found in host vars"
        fail_msg: "Discovery metadata missing from host vars"
      when: host_vars_content is defined
      
    - name: Final verification summary
      ansible.builtin.debug:
        msg:
          - "=== Verification Complete ==="
          - "✓ Discovery files generated"
          - "✓ Machine type classification"
          - "✓ Group assignment"
          - "✓ Package availability"
          - "✓ Variable merging"
          - "✓ Discovery metadata"
          - ""
          - "New-machine playbook test: PASSED"
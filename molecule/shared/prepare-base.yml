# Robust container preparation for all molecule scenarios
# This playbook ensures containers are properly prepared with error handling

- name: Prepare test environment for all platforms
  hosts: all
  gather_facts: false
  become: true
  vars:
    # Retry configuration for flaky container operations
    retry_count: 3
    retry_delay: 5
  
  tasks:
    # ========================================================================
    # PRE-FLIGHT CHECKS AND PYTHON INSTALLATION
    # ========================================================================
    
    - name: Check container connectivity
      ansible.builtin.ping:
      register: connectivity_check
      until: connectivity_check is succeeded
      retries: "{{ retry_count }}"
      delay: "{{ retry_delay }}"
      
    - name: Install Python and essential packages on Arch Linux
      ansible.builtin.raw: |
        set -e
        pacman -Sy --noconfirm python python-pip openssh sudo systemd-timesyncd || true
        # Ensure systemd is running
        systemctl --version > /dev/null 2>&1 || true
      when: inventory_hostname == 'archlinux-latest'
      register: arch_install
      until: arch_install.rc == 0
      retries: "{{ retry_count }}"
      delay: "{{ retry_delay }}"
      changed_when: true

    - name: Bootstrap Python on Ubuntu/Debian  
      ansible.builtin.raw: |
        set -e
        apt-get update -qq
        apt-get install -y python3 python3-pip systemd-timesyncd || true
      when: inventory_hostname in ['ubuntu-24-04', 'debian-13']
      register: ubuntu_bootstrap
      until: ubuntu_bootstrap.rc == 0
      retries: "{{ retry_count }}"
      delay: "{{ retry_delay }}"
      changed_when: true
      failed_when: false

    # ========================================================================
    # FACT GATHERING AND ADDITIONAL PACKAGE INSTALLATION
    # ========================================================================
    
    - name: Gather facts after Python installation
      ansible.builtin.setup:
      register: fact_gathering
      until: fact_gathering is succeeded
      retries: "{{ retry_count }}"
      delay: "{{ retry_delay }}"

    - name: Install essential packages (Debian/Ubuntu)
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
          - openssh-server
          - openssh-client 
          - sudo
          - systemd-timesyncd
          - systemd
        state: present
        update_cache: true
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
      register: debian_packages
      until: debian_packages is succeeded
      retries: "{{ retry_count }}"
      delay: "{{ retry_delay }}"
      failed_when: false  # Don't fail if some packages aren't available

    - name: Install essential packages (Arch)
      community.general.pacman:
        name:
          - python
          - python-pip
          - openssh
          - sudo
          - systemd-timesyncd
        state: present
        update_cache: true
      when: ansible_distribution == "Archlinux"
      register: arch_packages
      until: arch_packages is succeeded
      retries: "{{ retry_count }}"
      delay: "{{ retry_delay }}"
      failed_when: false

    # ========================================================================
    # SYSTEMD AND SERVICE CONFIGURATION
    # ========================================================================
    
    - name: Initialize systemd in container (if needed)
      ansible.builtin.shell: |
        if [ -f /lib/systemd/systemd ] || [ -f /usr/lib/systemd/systemd ]; then
          systemctl --version >/dev/null 2>&1 || {
            echo "SystemD not running properly in container"
            exit 0
          }
        fi
      register: systemd_check
      changed_when: false
      failed_when: false

    - name: Start SSH service if available
      ansible.builtin.systemd:
        name: "{{ 'sshd' if ansible_distribution == 'Archlinux' else 'ssh' }}"
        state: started
        enabled: false  # Don't enable to avoid container restart issues
      register: ssh_service
      when: 
        - ansible_service_mgr == "systemd"
        - systemd_check.rc == 0
      failed_when: false
      changed_when: ssh_service.changed | default(false)

    # ========================================================================
    # SUDO CONFIGURATION  
    # ========================================================================
    
    - name: Configure passwordless sudo (Arch Linux)
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
        backup: true
      when: ansible_distribution == "Archlinux"
      register: arch_sudo
      failed_when: false

    - name: Configure passwordless sudo (Debian/Ubuntu)
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL:ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
        backup: true
      when: ansible_os_family == "Debian"
      register: debian_sudo
      failed_when: false
      
    # ========================================================================
    # CONTAINER ENVIRONMENT FIXES
    # ========================================================================
      
    - name: Create test directories that may not exist in containers
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /var/log
        - /etc/systemd/system
        - /etc/sysctl.d
        - /etc/systemd/timesyncd.conf.d
      failed_when: false
        
    - name: Set up minimal environment for testing
      ansible.builtin.copy:
        content: |
          # Minimal container environment setup
          export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
          export HOME="/root"
        dest: /etc/environment
        mode: '0644'
      failed_when: false
      
    # ========================================================================
    # VALIDATION AND REPORTING
    # ========================================================================
    
    - name: Validate container preparation
      ansible.builtin.debug:
        msg: |
          Container preparation completed:
          - Hostname: {{ inventory_hostname }}
          - OS Family: {{ ansible_os_family | default('Unknown') }}  
          - Python Available: {{ ansible_python_version | default('Unknown') }}
          - SystemD Status: {{ 'Available' if systemd_check.rc == 0 else 'Not Available' }}
          - SSH Service: {{ 'Started' if ssh_service.changed | default(false) else 'Not Started/Available' }}

    - name: Report preparation warnings
      ansible.builtin.debug:
        msg: |
          Preparation warnings (expected in containers):
          - SystemD services may not be fully functional
          - Some system services may be missing
          - Container networking may be limited
      when: systemd_check.rc != 0 or ssh_service.failed | default(false)
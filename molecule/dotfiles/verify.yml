---
# Verify dotfiles role functionality
- name: Verify dotfiles role deployment
  hosts: all
  gather_facts: true
  vars:
    # Test users from converge.yml
    test_users:
      - name: testuser1
        uid: 1001
        shell: /bin/bash
        dotfiles_repository_url: "https://github.com/ohmyzsh/ohmyzsh.git"
        dotfiles_uses_stow: false
        
      - name: testuser2  
        uid: 1002
        shell: /bin/bash
        dotfiles_repository_url: "https://github.com/mathiasbynens/dotfiles.git"
        dotfiles_uses_stow: true
        dotfiles_stow_packages: ["git", "vim"]

  tasks:
    - name: Verify test users were created
      ansible.builtin.getent:
        database: passwd
      register: system_users

    - name: Check test users exist
      ansible.builtin.assert:
        that:
          - "item.name in ansible_facts.getent_passwd"
          - "ansible_facts.getent_passwd[item.name][1] == item.uid | string"
        fail_msg: "Test user {{ item.name }} not found or incorrect UID"
        success_msg: "Test user {{ item.name }} verified"
      loop: "{{ test_users }}"

    - name: Verify dotfiles directories exist
      ansible.builtin.stat:
        path: "/home/{{ item.name }}/.dotfiles"
      register: dotfiles_directories
      loop: "{{ test_users }}"

    - name: Check dotfiles directories were created
      ansible.builtin.assert:
        that:
          - "item.stat.exists"
          - "item.stat.isdir"
        fail_msg: "Dotfiles directory not created for {{ item.item.name }}"
        success_msg: "Dotfiles directory verified for {{ item.item.name }}"
      loop: "{{ dotfiles_directories.results }}"
      ignore_errors: true  # May fail if repo clone failed

    - name: Verify git repository was cloned
      ansible.builtin.stat:
        path: "/home/{{ item.name }}/.dotfiles/.git"
      register: git_directories
      loop: "{{ test_users }}"

    - name: Check git repositories exist
      ansible.builtin.assert:
        that:
          - "item.stat.exists"
          - "item.stat.isdir"  
        fail_msg: "Git repository not cloned for {{ item.item.name }}"
        success_msg: "Git repository verified for {{ item.item.name }}"
      loop: "{{ git_directories.results }}"
      ignore_errors: true  # May fail if repo clone failed

    - name: Check for stow deployment evidence (for stow users)
      ansible.builtin.find:
        paths: "/home/{{ item.name }}"
        file_type: link
      register: stow_symlinks
      loop: "{{ test_users | selectattr('dotfiles_uses_stow', 'equalto', true) }}"
      ignore_errors: true

    - name: Verify stow created symlinks (when applicable)
      ansible.builtin.debug:
        msg:
          - "Stow verification for {{ item.item.name }}:"
          - "  Repository: {{ item.item.dotfiles_repository_url }}"
          - "  Stow packages: {{ item.item.dotfiles_stow_packages | default(['all']) }}"
          - "  Symlinks found: {{ item.matched }}"
          - "  Status: {{ 'SUCCESS' if item.matched > 0 else 'NO SYMLINKS (repo may be empty/incompatible)' }}"
      loop: "{{ stow_symlinks.results | default([]) }}"
      when: stow_symlinks is defined

    - name: Check file ownership
      ansible.builtin.stat:
        path: "/home/{{ item.name }}/.dotfiles"
      register: ownership_check
      loop: "{{ test_users }}"

    - name: Verify correct ownership
      ansible.builtin.assert:
        that:
          - "item.stat.pw_name == item.item.name"
        fail_msg: "Incorrect ownership for {{ item.item.name }} dotfiles directory"
        success_msg: "Correct ownership verified for {{ item.item.name }}"
      loop: "{{ ownership_check.results }}"
      when: item.stat.exists
      ignore_errors: true

    - name: Test dotfiles role error handling
      block:
        - name: Test invalid repository handling
          ansible.builtin.include_role:
            name: wolskinet.infrastructure.dotfiles
          vars:
            dotfiles_user: "testuser1"
            dotfiles_repository_url: "https://github.com/nonexistent/invalid-repo-12345.git"
            dotfiles_uses_stow: true
          ignore_errors: true
          register: invalid_repo_result

        - name: Verify role handles invalid repositories gracefully
          ansible.builtin.debug:
            msg: "Role handled invalid repository appropriately: {{ invalid_repo_result.failed | default(false) }}"

    - name: Summary verification
      ansible.builtin.debug:
        msg:
          - "=== Dotfiles Role Test Summary ==="
          - "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "Test users: {{ test_users | length }}"
          - "Dotfiles directories created: {{ dotfiles_directories.results | selectattr('stat.exists', 'equalto', true) | list | length }}"
          - "Git repositories cloned: {{ git_directories.results | selectattr('stat.exists', 'equalto', true) | list | length }}"
          - "Stow deployment scenarios: {{ test_users | selectattr('dotfiles_uses_stow', 'equalto', true) | list | length }}"
          - "Test status: {{ 'PASSED' if (dotfiles_directories.results | selectattr('stat.exists', 'equalto', true) | list | length) > 0 else 'PARTIAL (network/repo issues expected)' }}"
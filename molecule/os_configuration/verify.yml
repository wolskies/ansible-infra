---
- name: Verify
  hosts: all
  gather_facts: true
  tasks:
    - name: Check timezone configuration
      ansible.builtin.command: timedatectl show --property=Timezone --value
      register: current_timezone
      changed_when: false

    - name: Verify timezone is set correctly
      ansible.builtin.assert:
        that:
          - "'America/New_York' in current_timezone.stdout"
        fail_msg: "Timezone not set correctly"
        success_msg: "Timezone correctly set to America/New_York"

    - name: Check hostname in /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: "molecule-test"
        state: absent
      check_mode: true
      register: hosts_check

    - name: Verify hostname entry exists in /etc/hosts
      ansible.builtin.assert:
        that:
          - hosts_check is not changed
        fail_msg: "Hostname entry not found in /etc/hosts"
        success_msg: "Hostname properly configured in /etc/hosts"

    - name: Check systemd-timesyncd configuration
      ansible.builtin.stat:
        path: /etc/systemd/timesyncd.conf
      register: timesyncd_config

    - name: Verify timesyncd configuration exists
      ansible.builtin.assert:
        that:
          - timesyncd_config.stat.exists
        fail_msg: "timesyncd configuration not found"
        success_msg: "timesyncd configuration exists"

    - name: Check journal configuration
      ansible.builtin.stat:
        path: /etc/systemd/journald.conf.d/00-ansible-managed.conf
      register: journal_config

    - name: Verify journal configuration exists
      ansible.builtin.assert:
        that:
          - journal_config.stat.exists
        fail_msg: "Journal configuration not found"
        success_msg: "Journal configuration exists"

    - name: Check udev rules files
      ansible.builtin.stat:
        path: "/etc/udev/rules.d/{{ item }}"
      register: udev_files
      loop:
        - "99-pico-test.rules"
        - "99-ttyacm-test.rules"
      when: ansible_distribution == 'Ubuntu'

    - name: Verify udev rules were created
      ansible.builtin.assert:
        that:
          - item.stat.exists
        fail_msg: "Udev rule {{ item.item }} not found"
        success_msg: "Udev rule {{ item.item }} exists"
      loop: "{{ udev_files.results }}"
      when:
        - ansible_distribution == 'Ubuntu'
        - udev_files.results is defined

    - name: Check vm.swappiness configuration
      ansible.builtin.command: sysctl vm.swappiness
      register: swappiness_check
      changed_when: false

    - name: Verify swappiness is configured
      ansible.builtin.assert:
        that:
          - "'vm.swappiness = 5' in swappiness_check.stdout"
        fail_msg: "vm.swappiness not configured correctly"
        success_msg: "vm.swappiness correctly set to 5"

    - name: Check APT no-recommends configuration (Debian family)
      ansible.builtin.stat:
        path: /etc/apt/apt.conf.d/99-no-recommends
      register: apt_recommends_config
      when: ansible_os_family == "Debian"

    - name: Verify APT no-recommends is configured (Debian family)
      ansible.builtin.assert:
        that:
          - apt_recommends_config.stat.exists
        fail_msg: "APT no-recommends configuration not found"
        success_msg: "APT no-recommends configured"
      when: ansible_os_family == "Debian"

    - name: Check unattended-upgrades configuration (Debian family)
      ansible.builtin.stat:
        path: /etc/apt/apt.conf.d/50unattended-upgrades
      register: unattended_upgrades_config
      when: ansible_os_family == "Debian"

    - name: Verify unattended-upgrades is configured (Debian family)
      ansible.builtin.assert:
        that:
          - unattended_upgrades_config.stat.exists
        fail_msg: "Unattended upgrades configuration not found"
        success_msg: "Unattended upgrades configured"
      when: ansible_os_family == "Debian"

    - name: Check service states
      ansible.builtin.service_facts:

    - name: Verify rsyslog service is enabled
      ansible.builtin.assert:
        that:
          - ansible_facts.services['rsyslog.service'].state == 'running'
          - ansible_facts.services['rsyslog.service'].status == 'enabled'
        fail_msg: "rsyslog service not properly enabled"
        success_msg: "rsyslog service is enabled and running"
      when: "'rsyslog.service' in ansible_facts.services"

    - name: Test locale configuration
      ansible.builtin.command: locale
      register: locale_output
      changed_when: false

    - name: Debug locale output
      ansible.builtin.debug:
        msg: "Current locale output: {{ locale_output.stdout_lines }}"

    - name: Verify locale is configured (non-blocking in containers)
      ansible.builtin.assert:
        that:
          - "'en_US.UTF-8' in locale_output.stdout or 'POSIX' in locale_output.stdout"
        fail_msg: "Locale not configured correctly. Output was: {{ locale_output.stdout }}"
        success_msg: "Locale properly configured"
      failed_when: false # Non-blocking - locale may not work properly in containers

    - name: Check host-specific proxy configuration (Ubuntu test host)
      ansible.builtin.stat:
        path: /etc/apt/apt.conf.d/99-proxy
      register: proxy_config
      when: inventory_hostname == "ubuntu-os-config-test"

    - name: Verify proxy configuration does not exist (Ubuntu test host - empty proxy)
      ansible.builtin.assert:
        that:
          - not proxy_config.stat.exists
        fail_msg: "APT proxy configuration should not exist when proxy is empty"
        success_msg: "APT proxy configuration correctly absent for empty proxy"
      when: inventory_hostname == "ubuntu-os-config-test"

    # =============================================================================
    # USER MANAGEMENT VERIFICATION
    # =============================================================================
    - name: Get user information
      ansible.builtin.getent:
        database: passwd
      register: users_info

    - name: Verify test user was created
      ansible.builtin.assert:
        that:
          - users_info.ansible_facts.getent_passwd.testuser is defined
          - users_info.ansible_facts.getent_passwd.testuser[1] == "1001"
          - users_info.ansible_facts.getent_passwd.testuser[3] == "Test User for OS Config"
          - users_info.ansible_facts.getent_passwd.testuser[5] == "/bin/bash"
        fail_msg: "Test user not configured correctly"
        success_msg: "Test user created successfully"

    - name: Check user group membership
      ansible.builtin.command:
        cmd: id -Gn testuser
      register: user_groups
      changed_when: false

    - name: Verify user is in sudo group
      ansible.builtin.assert:
        that:
          - "'sudo' in user_groups.stdout"
        fail_msg: "User not in sudo group"
        success_msg: "User correctly added to sudo group"

    - name: Check user home directory
      ansible.builtin.stat:
        path: "/home/testuser"
      register: user_home

    - name: Verify user home directory exists
      ansible.builtin.assert:
        that:
          - user_home.stat.exists
          - user_home.stat.isdir
          - user_home.stat.pw_name == "testuser"
        fail_msg: "User home directory not configured correctly"
        success_msg: "User home directory created with correct ownership"

    # =============================================================================
    # PASSWORDLESS SUDO VERIFICATION
    # =============================================================================
    - name: Verify sudouser was created
      ansible.builtin.assert:
        that:
          - users_info.ansible_facts.getent_passwd.sudouser is defined
          - users_info.ansible_facts.getent_passwd.sudouser[1] == "1002"
        fail_msg: "Sudo test user not created"
        success_msg: "Sudo test user created successfully"

    - name: Check passwordless sudo configuration file exists
      ansible.builtin.stat:
        path: "/etc/sudoers.d/sudouser"
      register: sudo_config

    - name: Verify passwordless sudo file was created
      ansible.builtin.assert:
        that:
          - sudo_config.stat.exists
          - sudo_config.stat.mode == "0440"
        fail_msg: "Passwordless sudo configuration file not created or incorrect permissions"
        success_msg: "Passwordless sudo configuration file created with correct permissions"

    - name: Check sudo configuration content
      ansible.builtin.slurp:
        src: "/etc/sudoers.d/sudouser"
      register: sudo_content

    - name: Verify sudo configuration content is correct
      ansible.builtin.assert:
        that:
          - "'sudouser\tALL=(ALL:ALL) NOPASSWD: ALL' in (sudo_content.content | b64decode)"
        fail_msg: "Passwordless sudo configuration content is incorrect"
        success_msg: "Passwordless sudo configuration content is correct"

    - name: Check that normal user does not have passwordless sudo file
      ansible.builtin.stat:
        path: "/etc/sudoers.d/testuser"
      register: normal_sudo_config

    - name: Verify normal user does not have passwordless sudo
      ansible.builtin.assert:
        that:
          - not normal_sudo_config.stat.exists
        fail_msg: "Normal user should not have passwordless sudo configuration"
        success_msg: "Normal user correctly does not have passwordless sudo"

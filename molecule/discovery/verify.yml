---
# Verify infrastructure discovery functionality
- name: Verify infrastructure discovery
  hosts: discovery_targets
  gather_facts: false
  tasks:
    - name: Verify discovery output files exist
      block:
        - name: Check for host vars file
          ansible.builtin.stat:
            path: "{{ discovery_output_path }}/host_vars/{{ inventory_hostname }}.yml"
          register: host_vars_file
          delegate_to: localhost

        - name: Verify host vars file exists
          ansible.builtin.assert:
            that:
              - host_vars_file.stat.exists
            fail_msg: "Host vars file not created at {{ discovery_output_path }}/host_vars/{{ inventory_hostname }}.yml"

        - name: Check for deployment playbook
          ansible.builtin.stat:
            path: "{{ discovery_output_path }}/playbooks/{{ inventory_hostname }}_discovered.yml"
          register: playbook_file
          delegate_to: localhost

        - name: Verify deployment playbook exists
          ansible.builtin.assert:
            that:
              - playbook_file.stat.exists
            fail_msg: "Deployment playbook not created"

    - name: Verify discovered data content
      block:
        - name: Read generated host vars file
          ansible.builtin.slurp:
            src: "{{ discovery_output_path }}/host_vars/{{ inventory_hostname }}.yml"
          register: host_vars_content
          delegate_to: localhost

        - name: Parse host vars content
          ansible.builtin.set_fact:
            discovered_vars: "{{ host_vars_content.content | b64decode | from_yaml }}"

        - name: Verify all discovery tasks executed successfully
          ansible.builtin.assert:
            that:
              - discovered_vars.discovered_users is defined
              - discovered_vars.discovered_users.system_users is defined
              - discovered_vars.discovered_users.system_users.regular_users_detailed is defined
              - discovered_vars.discovered_users.system_users.regular_users_detailed | length >= 4  # Our 4 test users
              - discovered_vars.discovered_packages is defined
              - discovered_vars.discovered_packages.all_native is defined
              - discovered_vars.discovered_packages.languages is defined
              - discovered_vars.discovered_services is defined
              - discovered_vars.discovered_dotfiles is defined
              - discovered_vars.discovered_repositories is defined
            fail_msg: "Discovery tasks did not complete successfully - missing expected data structures"

        - name: Verify user scanning worked correctly
          ansible.builtin.assert:
            that:
              - discovered_vars.discovered_users.system_users.regular_users_detailed | selectattr('name', 'equalto', 'discoverytest') | list | length == 1
              - discovered_vars.discovered_users.system_users.regular_users_detailed | selectattr('name', 'equalto', 'testuser2') | list | length == 1
              - discovered_vars.discovered_users.system_users.regular_users_detailed | selectattr('name', 'equalto', 'testuser3') | list | length == 1
              - discovered_vars.discovered_users.system_users.regular_users_detailed | selectattr('name', 'equalto', 'serviceuser') | list | length == 1
            fail_msg: "User discovery did not find all expected test users"

        - name: Verify groups discovery worked
          ansible.builtin.assert:
            that:
              - discovered_vars.discovered_users.system_users.regular_users_detailed | selectattr('name', 'equalto', 'discoverytest') | map(attribute='groups') | first | length > 0
            fail_msg: "Groups discovery failed - discoverytest user should have groups"

        - name: Verify no system users with high UIDs were included
          ansible.builtin.assert:
            that:
              - discovered_vars.discovered_users.system_users.regular_users_detailed | selectattr('uid', '>', '59999') | list | length == 0
            fail_msg: "System users with UID > 59999 should be filtered out"

        - name: Verify basic discovered data structure
          ansible.builtin.assert:
            that:
              - discovered_vars is defined
              - discovered_vars is mapping
            fail_msg: "Host vars file is not valid YAML or is empty"

        - name: Display discovery summary
          ansible.builtin.debug:
            msg:
              - "Discovery verification completed"
              - "Target: {{ inventory_hostname }}"
              - "Host vars created: {{ host_vars_file.stat.exists }}"
              - "Playbook created: {{ playbook_file.stat.exists }}"
              - "Variables discovered: {{ discovered_vars.keys() | list | length }}"

    - name: Verify dotfiles discovery data
      block:
        - name: Check if discovered_dotfiles is in vars
          ansible.builtin.assert:
            that:
              - discovered_vars.discovered_dotfiles is defined
              - discovered_vars.discovered_dotfiles is mapping
            fail_msg: "discovered_dotfiles not found or not a dictionary"
          when: discovered_vars is defined

        - name: Verify dotfiles data structure
          ansible.builtin.assert:
            that:
              - discovered_vars.discovered_dotfiles.users_with_dotfiles is defined
              - discovered_vars.discovered_dotfiles.users_with_dotfiles is sequence
              - discovered_vars.discovered_dotfiles.dotfiles_methods_found is defined
              - discovered_vars.discovered_dotfiles.primary_dotfiles is defined
            fail_msg: "Dotfiles discovery data structure is incomplete"
          when: 
            - discovered_vars is defined
            - discovered_vars.discovered_dotfiles is defined

        - name: Display dotfiles discovery results
          ansible.builtin.debug:
            msg:
              - "Dotfiles discovery results:"
              - "Users with dotfiles: {{ discovered_vars.discovered_dotfiles.users_with_dotfiles | length }}"
              - "Repository method found: {{ discovered_vars.discovered_dotfiles.dotfiles_methods_found.repository | length > 0 }}"
              - "Local configs found: {{ discovered_vars.discovered_dotfiles.dotfiles_methods_found.local_configs | length > 0 }}"
          when:
            - discovered_vars is defined
            - discovered_vars.discovered_dotfiles is defined

    - name: Test templates with minimal data
      block:
        - name: Validate template with realistic discovery data structure
          ansible.builtin.template:
            src: "{{ role_path }}/templates/host_vars_collection.yml.j2"
            dest: "/tmp/test-realistic-data.yml"
          vars:
            discovered_machine: { type: "workstation", hostname: "test-machine" }
            discovered_system: 
              os: 
                distribution: "Ubuntu"
                version: "24.04"
                architecture: "x86_64"
              kernel: "6.15.9-generic"
            discovered_packages: 
              all: ['vim', 'git', 'curl', 'htop']
              third_party: ['docker-ce', 'gitlab-runner']
              aur_packages: []
            discovered_services:
              running: ['ssh', 'systemd-resolved', 'docker']
              enabled: ['ssh', 'docker', 'systemd-resolved']
              collection_relevant:
                ssh_enabled: true
                docker_enabled: true
                fail2ban_enabled: false
                ufw_enabled: true
            discovered_docker:
              installed: true
              version: "24.0.7"
              compose_files: ['/home/discoverytest/docker-compose.yml']
            discovered_dotfiles:
              users_with_dotfiles:
                - user: "discoverytest"
                  home: "/home/discoverytest" 
                  dotfiles_repo: true
                  dotfiles_dir: ".dotfiles"
                  repository_url: ""
                  repository_branch: "main"
                  discovered_config_files: []
                  shell: "/bin/bash"
                - user: "testuser2"
                  home: "/home/testuser2"
                  dotfiles_repo: false
                  dotfiles_dir: "dotfiles"
                  repository_url: ""
                  repository_branch: "main" 
                  discovered_config_files: []
                  shell: "/bin/zsh"
                - user: "testuser3"
                  home: "/home/testuser3"
                  dotfiles_repo: false
                  dotfiles_dir: ""
                  repository_url: ""
                  repository_branch: "main"
                  discovered_config_files: ['.bashrc', '.vimrc', '.gitconfig']
                  shell: "/bin/fish"
            discovered_users:
              system_users:
                total: 25
                regular_users: ['discoverytest', 'testuser2', 'testuser3']
                regular_users_detailed:
                  - name: "discoverytest"
                    home: "/home/discoverytest"
                    shell: "/bin/bash"
                    uid: "1500"
                    gid: "1500"
                    groups: ['sudo', 'docker', 'users']
                  - name: "testuser2"
                    home: "/home/testuser2"
                    shell: "/bin/zsh"
                    uid: "1501"
                    gid: "1501"
                    groups: ['users', 'audio']
                  - name: "testuser3"
                    home: "/home/testuser3"
                    shell: "/bin/fish"
                    uid: "1502"
                    gid: "1502"
                    groups: ['users']
                system_users: ['root', 'daemon', 'bin', 'sys']
            discovered_repositories:
              apt:
                keys: ['/etc/apt/trusted.gpg.d/docker.gpg', '/usr/share/keyrings/gitlab_gitlab-runner-archive-keyring.gpg']
                third_party_repos:
                  - file: 'docker.list'
                    line: 'deb [signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu jammy stable'
                    repo_name: 'docker'
                  - file: 'gitlab_gitlab-runner.list'
                    line: 'deb https://packages.gitlab.com/runner/gitlab-runner/ubuntu/ jammy main'
                    repo_name: 'gitlab-runner'
                manual_packages: ['vim', 'git', 'curl', 'docker-ce', 'gitlab-runner']
            discovered_security:
              ssh:
                service_running: true
                settings:
                  port: "22"
                  protocol: "2"
              firewall:
                detected: true
                type: "ufw"
                status: "active"
                allowed_ports: ["22", "80", "443", "8080"]
              fail2ban:
                service_enabled: false
            ansible_distribution: "Ubuntu"
            inventory_hostname: "test-realistic-host"
            ansible_architecture: "x86_64"
            ansible_date_time: { iso8601: "2024-01-01T12:00:00Z" }
          delegate_to: localhost
          register: realistic_template_result
          
        - name: Verify realistic template rendered successfully
          ansible.builtin.assert:
            that:
              - realistic_template_result is succeeded
            fail_msg: "Template failed to render with realistic discovery data structure"

        - name: Test template rendering with empty data structures
          ansible.builtin.template:
            src: "{{ item }}"
            dest: "/tmp/test-{{ item | basename }}"
          vars:
            discovered_machine: {}
            discovered_system: {}
            discovered_packages: { all_native: [], languages: {} }
            discovered_services: {}
            discovered_docker: {}
            discovered_dotfiles: {}
            discovered_users: {}
            discovered_repositories: {}
            discovered_security: {}
          loop:
            - "{{ role_path }}/templates/host_vars.yml.j2"
            - "{{ role_path }}/templates/host_vars_collection.yml.j2"
            - "{{ role_path }}/templates/README.md.j2"
            - "{{ role_path }}/templates/new_machine.yml.j2"
          delegate_to: localhost
          
        - name: Verify templates handle missing data gracefully
          ansible.builtin.debug:
            msg: "All templates successfully handle missing/empty data structures"

    - name: Test templates with edge case data
      block:
        - name: Test templates with malformed data structures
          ansible.builtin.template:
            src: "{{ role_path }}/templates/host_vars_collection.yml.j2"
            dest: "/tmp/test-edge-cases.yml"
          vars:
            discovered_machine: { type: "server" }
            discovered_system: { os: { distribution: "Debian" } }
            discovered_packages:
              all_native: ['package1', 'package2']
              languages:
                python: { pip_user: [], pipx: [] }
                nodejs: { npm_global: [] }
                rust: { cargo: [] }
            discovered_services:
              running: ['ssh', 'docker']
              enabled: ['ssh', 'docker', 'cron']
              collection_relevant:
                ssh_enabled: true
                docker_enabled: true
                fail2ban_enabled: false
            discovered_docker:
              installed: true
              version: "24.0.0"
              compose_files: []
            discovered_dotfiles:
              users_with_dotfiles: []
            discovered_users:
              system_users:
                regular_users_detailed: []
              current_user:
                name: "testuser"
                groups: ['sudo', 'docker']
            discovered_repositories:
              apt:
                keys: []  # Empty list to test edge case
                third_party_repos: []  # Empty list
                manual_packages: null  # Null value test
            discovered_security:
              ssh:
                service_running: true
                settings:
                  port: "22"
              firewall:
                detected: false
                type: "none"
              fail2ban:
                service_enabled: false
            ansible_distribution: "Debian"
            inventory_hostname: "edge-case-host"
            ansible_architecture: "x86_64"
            ansible_date_time: { iso8601: "2024-01-01T00:00:00Z" }
          delegate_to: localhost
          register: edge_case_result
          
        - name: Verify edge case template rendered successfully
          ansible.builtin.assert:
            that:
              - edge_case_result is succeeded
            fail_msg: "Template failed to handle edge case data"

        - name: Test templates with undefined nested values
          ansible.builtin.template:
            src: "{{ role_path }}/templates/host_vars_collection.yml.j2"
            dest: "/tmp/test-undefined.yml"
          vars:
            discovered_machine: {}
            discovered_system: {}
            discovered_packages: { all_native: [], languages: {} }
            discovered_services: {}
            discovered_docker: {}
            discovered_dotfiles: {}
            discovered_users: {}
            discovered_repositories: {}  # No apt key at all
            discovered_security: {}
            ansible_distribution: "Ubuntu"
            inventory_hostname: "undefined-test"
            ansible_architecture: "x86_64"
            ansible_date_time: { iso8601: "2024-01-01T00:00:00Z" }
          delegate_to: localhost
          register: undefined_result
          
        - name: Verify undefined values handled gracefully
          ansible.builtin.assert:
            that:
              - undefined_result is succeeded
            fail_msg: "Template failed to handle undefined values"
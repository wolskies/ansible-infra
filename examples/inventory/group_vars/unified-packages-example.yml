---
# Example: Unified Package Configuration
# This demonstrates the unified approach where discovery and manual configuration
# use the same variable structure

# Standard package variables that work with both manual and discovery workflows

# System packages (core utilities beyond basic_setup)
system_packages:
  - htop
  - tree
  - jq
  - tmux

# Development packages for development environments
development_packages:
  - vim
  - neovim
  - git-delta
  - code

# Desktop packages for workstations
desktop_packages:
  - firefox
  - thunderbird
  - libreoffice

# Python packages (for third_party_packages role)
group_pip_packages:
  - requests
  - ansible
  - poetry

# Node.js packages (for third_party_packages role)
group_npm_packages:
  - "@angular/cli"
  - typescript
  - prettier

# Additional repositories (all platforms)
group_additional_repositories:
  apt:
    sources:
      - "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
    keys:
      - "https://download.docker.com/linux/ubuntu/gpg"

  homebrew:
    taps:
      - "homebrew/cask-fonts"
      - "homebrew/cask-drivers"

# Platform-specific packages
# Arch Linux AUR packages
group_aur_packages:
  - visual-studio-code-bin
  - discord
  - spotify

# macOS Homebrew casks
group_homebrew_casks:
  - visual-studio-code
  - discord
  - spotify

# Package installation controls
install_development_packages: true
install_desktop_packages: true
install_media_packages: false  # Skip large media packages
enable_additional_repositories: true

# Note: The discovery system populates these same variables.
# When discovery runs, it generates host_vars files with the same structure:
#
# host_vars/discovered-machine.yml:
# system_packages:
#   - htop    # Found on source machine
#   - tree    # Found on source machine
#
# host_development_packages:
#   - docker  # Additional packages unique to this host
#
# final_system_packages = system_packages + group_system_packages + host_system_packages

---
# GLOBAL VARIABLES (All Machines)
# File: group_vars/all/all.yml
# 
# ‚ö†Ô∏è  WARNING: GLOBAL SCOPE - AFFECTS ALL MACHINES ‚ö†Ô∏è
# These variables apply to EVERY machine in your inventory.
# Use sparingly - prefer group-specific or host-specific variables.
#
# ANSIBLE VARIABLE PRECEDENCE (highest to lowest):
# 1. Extra vars (ansible-playbook -e "var=value") 
# 2. Task vars
# 3. Block vars  
# 4. Role and include vars
# 5. Play vars_files
# 6. Play vars
# 7. Set_facts / registered vars
# 8. Host facts
# 9. Playbook host_vars/* ‚Üê HOST LEVEL
# 10. Playbook group_vars/* ‚Üê GROUP LEVEL  
# 11. Inventory host_vars/*
# 12. Inventory group_vars/*
# 13. Inventory vars
# 14. Role defaults (lowest priority)
#
# üì¶ EXCEPTION: ALL PACKAGE VARIABLES USE HIERARCHICAL MERGING
# Package variables are merged together additively, not overridden by precedence.
# ALL package types support all/group/host hierarchy:
#
# OS Packages: all_packages_install_Ubuntu + group_packages_install_Ubuntu + host_packages_install_Ubuntu
# Third-party: all_third_party_packages + group_third_party_packages + host_third_party_packages  
# Python: all_pip_packages + group_pip_packages + host_pip_packages
# Node.js: all_npm_packages + group_npm_packages + host_npm_packages
# AUR: all_aur_packages + group_aur_packages + host_aur_packages
# Homebrew: all_homebrew_packages + group_homebrew_packages + host_homebrew_packages
# Homebrew Casks: all_homebrew_casks + group_homebrew_casks + host_homebrew_casks
# Repositories: all_additional_repositories + group_additional_repositories + host_additional_repositories
#
# Final result = all + group + host packages combined (duplicates removed)

# =============================================================================
# GLOBAL PACKAGE VARIABLES (All Machines) - USE SPARINGLY
# =============================================================================
# These packages will be installed on ALL machines regardless of group/host.
# Only include truly universal packages that every machine needs.

# Essential packages for all Ubuntu/Debian machines
all_packages_install_Ubuntu:
  - curl
  - wget
  - git
  - vim
  - htop
  - ca-certificates

all_packages_install_Debian:
  - curl
  - wget
  - git
  - vim
  - htop
  - ca-certificates

# Essential packages for all Arch Linux machines
all_packages_install_Archlinux:
  - curl
  - wget
  - git
  - vim
  - htop
  - ca-certificates

# Essential packages for all macOS machines
all_homebrew_packages:
  - curl
  - wget
  - git
  - vim
  - htop

# Global third-party packages (use sparingly - only truly universal)
all_third_party_packages: []

# Global Python packages (use sparingly - only truly universal)  
all_pip_packages: []

# Global Node.js packages (use sparingly - only truly universal)
all_npm_packages: []

# Global AUR packages (use sparingly - only truly universal)
all_aur_packages: []

# Global Homebrew casks (use sparingly - only truly universal)
all_homebrew_casks: []

# Global additional repositories (use sparingly - only truly universal)
all_additional_repositories:
  apt:
    sources: []
    keys: []
  homebrew:
    taps: []
  yum:
    repos: []

# =============================================================================
# GLOBAL SYSTEM DEFAULTS
# =============================================================================
# These settings apply to all machines unless overridden at group/host level

# User management
default_user_shell: "/bin/bash"
create_admin_users: true

# OS-specific global defaults
ubuntu_disable_snap: true
archlinux_install_aur_helper: true
macos_install_homebrew: true

# Security defaults
enable_basic_firewall: true
configure_ssh_hardening: false  # Enable in group_vars/servers/

# System maintenance
enable_automatic_updates: true
cleanup_package_cache: true

# =============================================================================
# GLOBAL ROLE BEHAVIOR
# =============================================================================

# Basic setup role
perform_os_optimization: true
install_essential_tools: true

# Third-party packages role
setup_additional_repositories: true
verify_repository_keys: true

# Dotfiles role
dotfiles_backup_existing: true
dotfiles_force_update: false

# =============================================================================
# GLOBAL INFRASTRUCTURE SETTINGS
# =============================================================================

# Environment classification (affects security settings, etc.)
environment_type: "development"  # Override to "production" in inventory

# Resource optimization
low_resource_mode: false
optimize_for_ssd: true

# Logging and monitoring (disabled globally, enable per group)
enable_centralized_logging: false
enable_system_monitoring: false

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================
#
# 1. HIERARCHICAL STRUCTURE:
#    ‚îú‚îÄ‚îÄ group_vars/all/all.yml          ‚Üê This file (global defaults)
#    ‚îú‚îÄ‚îÄ group_vars/workstations/workstation.yml ‚Üê Group-specific
#    ‚îú‚îÄ‚îÄ group_vars/servers/server.yml    ‚Üê Group-specific  
#    ‚îî‚îÄ‚îÄ host_vars/hostname/example-host.yml ‚Üê Host-specific
#
# 2. HIERARCHICAL PACKAGE MERGING EXAMPLES:
#    all.yml: all_packages_install_Ubuntu: [git, vim]
#    workstation.yml: group_packages_install_Ubuntu: [nodejs, python3-dev] 
#    example-host.yml: host_packages_install_Ubuntu: [docker.io, nginx]
#    Final result: [git, vim, nodejs, python3-dev, docker.io, nginx]
#
#    all.yml: all_pip_packages: []
#    workstation.yml: group_pip_packages: [pytest, black]
#    example-host.yml: host_pip_packages: [django, fastapi]  
#    Final result: [pytest, black, django, fastapi]
#
# 3. VARIABLE PRECEDENCE (non-packages):
#    Host variables override group variables override global variables
#    Example: ubuntu_disable_snap in host_vars/ overrides this file
#
# 4. BEST PRACTICES:
#    - Keep this file minimal - only truly global settings
#    - Use group_vars/ for role-specific settings (workstations, servers)
#    - Use host_vars/ for machine-specific overrides and discovery
#    - Package lists: all (universal) ‚Üí group (role-specific) ‚Üí host (unique)
#    - Security settings: Start conservative, override per group/host as needed
#
# 5. FILE ORGANIZATION:
#    inventory/
#    ‚îú‚îÄ‚îÄ group_vars/
#    ‚îÇ   ‚îú‚îÄ‚îÄ all/
#    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ all.yml              ‚Üê Global defaults (this file)
#    ‚îÇ   ‚îú‚îÄ‚îÄ workstations/
#    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ workstation.yml      ‚Üê Development tools, desktop packages
#    ‚îÇ   ‚îî‚îÄ‚îÄ servers/
#    ‚îÇ       ‚îî‚îÄ‚îÄ server.yml           ‚Üê Security hardening, server packages
#    ‚îî‚îÄ‚îÄ host_vars/
#        ‚îî‚îÄ‚îÄ hostname/
#            ‚îî‚îÄ‚îÄ example-host.yml     ‚Üê Discovery output, machine-specific
#
# 6. LOADING ORDER:
#    Ansible loads: all/ ‚Üí group/ ‚Üí host/ (packages merge, others override)
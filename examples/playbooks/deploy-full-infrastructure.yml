---
# Complete infrastructure deployment playbook
# This demonstrates the full intended architecture with different host types
- name: Deploy complete infrastructure
  hosts: all
  gather_facts: true
  collections:
    - wolskinet.infrastructure
    - devsec.hardening
    - community.general
    - community.docker
  
  pre_tasks:
    - name: Display deployment plan
      ansible.builtin.debug:
        msg:
          - "Deploying infrastructure for {{ inventory_hostname }}"
          - "Groups: {{ group_names }}"
          - "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
      
    - name: Update package cache (Debian/Ubuntu)
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      become: true
      when: ansible_os_family == "Debian"
      
    - name: Update package cache (Arch)
      community.general.pacman:
        update_cache: true
      become: true
      when: ansible_distribution == "Archlinux"

# Play 1: Basic setup for all hosts
- name: Basic setup for all hosts
  hosts: all
  gather_facts: false
  roles:
    - name: wolskinet.infrastructure.basic_setup
      become: true
      
    - name: wolskinet.infrastructure.maintenance
      become: false

# Play 2: Server hardening (servers only)
- name: Harden servers
  hosts: servers
  gather_facts: false
  roles:
    - name: devsec.hardening.os_hardening
      become: true
      when: security_hardening_enabled | default(true)
      
    - name: devsec.hardening.ssh_hardening
      become: true
      when: security_hardening_enabled | default(true)

# Play 3: Docker setup (docker_hosts only)
- name: Setup Docker infrastructure
  hosts: docker_hosts
  gather_facts: false
  roles:
    - name: wolskinet.infrastructure.container_platform
      become: true

# Play 4: Workstation setup (workstations only)
- name: Setup workstations
  hosts: workstations
  gather_facts: false
  roles:
    - name: wolskinet.infrastructure.dotfiles
      become: false

# Play 5: Install group-specific and additional roles
- name: Install group-specific and additional roles
  hosts: all
  gather_facts: false
  tasks:
    # Install group-specific roles based on inventory group
    - name: Install group-specific roles
      ansible.builtin.include_role:
        name: "{{ item.name if item is mapping else 'wolskinet.infrastructure.' + item }}"
      loop: "{{ group_roles_install | default([]) }}"
      when: 
        - group_roles_install is defined
        - (item.when | default(true)) if item is mapping else true
      vars:
        role_vars: "{{ item.vars | default({}) if item is mapping else {} }}"
        
    # Install additional user-defined roles (any collection)
    - name: Install additional roles
      ansible.builtin.include_role:
        name: "{{ item.name }}"
        apply:
          become: "{{ item.become | default(false) }}"
      loop: "{{ additional_roles_install | default([]) }}"
      when: 
        - additional_roles_install is defined
        - (item.when | default(true))
      vars:
        role_vars: "{{ item.vars | default({}) }}"

# Play 6: Final verification and cleanup
- name: Final verification and status
  hosts: all
  gather_facts: false
  tasks:
    - name: Gather service facts
      ansible.builtin.service_facts:
      become: true

    - name: Check critical services (servers)
      ansible.builtin.debug:
        msg: "{{ item }} is {{ 'running' if ansible_facts.services[item + '.service'].state == 'running' else 'not running' }}"
      loop:
        - ssh
        - fail2ban
      when: 
        - inventory_hostname in groups['servers'] | default([])
        - item + '.service' in ansible_facts.services

    - name: Check Docker service (docker_hosts)
      ansible.builtin.debug:
        msg: "Docker is {{ 'running' if ansible_facts.services['docker.service'].state == 'running' else 'not running' }}"
      when: 
        - inventory_hostname in groups['docker_hosts'] | default([])
        - "'docker.service' in ansible_facts.services"

    - name: Display deployed services (docker_hosts)
      ansible.builtin.debug:
        msg: "Docker services: {{ docker_services_deploy | default(['None']) }}"
      when: inventory_hostname in groups['docker_hosts'] | default([])

    - name: Check if reboot is required (Linux)
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      when: ansible_os_family != 'Darwin'

    - name: Display reboot status
      ansible.builtin.debug:
        msg: "{{ inventory_hostname }} {{ 'requires a reboot' if (reboot_required_file.stat.exists | default(false)) else 'does not require a reboot' }}"
      when: ansible_os_family != 'Darwin'

    - name: Infrastructure deployment summary
      ansible.builtin.debug:
        msg:
          - "Infrastructure deployment completed for {{ inventory_hostname }}"
          - "Groups: {{ group_names }}"
          - "Roles installed: {{ group_roles_install | default([]) + additional_roles_install | default([]) | map(attribute='name') | list }}"
      when: inventory_hostname == groups['all'][0]  # Only show once
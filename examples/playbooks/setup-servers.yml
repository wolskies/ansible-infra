---
- name: Setup and harden servers
  hosts: servers
  gather_facts: true
  collections:
    - wolskinet.infrastructure
    - devsec.hardening
    - community.general
  
  pre_tasks:
    - name: Update package cache (Debian/Ubuntu)
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      become: true
      when: ansible_os_family == "Debian"
      
    - name: Update package cache (Arch)
      community.general.pacman:
        update_cache: true
      become: true
      when: ansible_distribution == "Archlinux"

  roles:
    # Security hardening first
    - name: devsec.hardening.os_hardening
      become: true
      
    - name: devsec.hardening.ssh_hardening
      become: true
      
    # Basic server setup
    - name: wolskinet.infrastructure.basic_setup
      become: true
      
    # System updates and maintenance
    - name: wolskinet.infrastructure.system_update
      become: false

  tasks:
    - name: Install server-specific packages
      ansible.builtin.package:
        name: "{{ server_packages[ansible_distribution] }}"
        state: present
      become: true
      when: server_packages is defined and ansible_distribution in server_packages

    - name: Configure fail2ban
      ansible.builtin.template:
        src: fail2ban-jail.local.j2
        dest: /etc/fail2ban/jail.local
        backup: true
      become: true
      notify: restart fail2ban
      when: fail2ban_enabled | default(true)

    - name: Enable and start server services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop: "{{ systemd_services.enable | default([]) }}"
      become: true

    - name: Disable unnecessary server services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: false
        state: stopped
      loop: "{{ systemd_services.disable | default([]) }}"
      become: true
      failed_when: false  # Don't fail if service doesn't exist

    - name: Configure automatic security updates (Debian/Ubuntu)
      ansible.builtin.template:
        src: 50unattended-upgrades.j2
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
      become: true
      when: 
        - ansible_os_family == "Debian"
        - enable_automatic_updates | default(true)

    - name: Enable unattended-upgrades (Debian/Ubuntu)
      ansible.builtin.systemd:
        name: unattended-upgrades
        enabled: true
        state: started
      become: true
      when: 
        - ansible_os_family == "Debian"
        - enable_automatic_updates | default(true)

  post_tasks:
    # Install group-specific roles (like docker_setup for docker_hosts)
    - name: Install group-specific roles
      ansible.builtin.include_role:
        name: "{{ item.name if item is mapping else 'wolskinet.infrastructure.' + item }}"
      loop: "{{ group_roles_install | default([]) }}"
      when: 
        - group_roles_install is defined
        - (item.when | default(true)) if item is mapping else true
        
    # Install additional user-defined roles
    - name: Install additional server roles
      ansible.builtin.include_role:
        name: "{{ item.name }}"
        apply:
          become: "{{ item.become | default(true) }}"  # Default to become for servers
      loop: "{{ additional_roles_install | default([]) }}"
      when: 
        - additional_roles_install is defined
        - (item.when | default(true))

    - name: Check if reboot is required (Debian/Ubuntu)
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      when: ansible_os_family == "Debian"

    - name: Reboot if required and allowed
      ansible.builtin.reboot:
        reboot_timeout: 300
        pre_reboot_delay: 10
      become: true
      when: 
        - reboot_if_required | default(false)
        - reboot_required_file is defined 
        - reboot_required_file.stat.exists

    - name: Display reboot status
      ansible.builtin.debug:
        msg: "{{ inventory_hostname }} requires a reboot but automatic reboot is disabled. Please reboot manually."
      when: 
        - reboot_required_file is defined 
        - reboot_required_file.stat.exists
        - not (reboot_if_required | default(false))

  handlers:
    - name: restart fail2ban
      ansible.builtin.systemd:
        name: fail2ban
        state: restarted
      become: true
# GitLab CI/CD Pipeline for wolskinet.infrastructure Ansible Collection
# Supports self-hosted GitLab with GitHub sync
# Updated to match current molecule scenarios and Makefile targets

stages:
  - validate      # Quick validation, linting, template validation
  - test-roles    # Individual molecule scenario tests (basic_setup, container_platform, discovery, dotfiles, system_tuning)
  - test-integration # Full integration and e2e testing
  - build         # Collection package building
  - sync-github   # GitHub synchronization

variables:
  COLLECTION_NAMESPACE: wolskinet
  COLLECTION_NAME: infrastructure
  COLLECTION_VERSION: 1.0.0
  ANSIBLE_FORCE_COLOR: 'true'
  ANSIBLE_HOST_KEY_CHECKING: 'false'
  PY_COLORS: '1'
  ANSIBLE_COLLECTIONS_PATH: "${CI_PROJECT_DIR}/..:${HOME}/.ansible/collections:/usr/share/ansible/collections"

# Cache for pip and ansible collections
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .pip-cache/
    - .ansible-cache/

# Docker-in-Docker template for molecule tests
.docker-setup: &docker-setup
  image: python:3.11-slim
  services:
    - name: docker:dind
      command: ["--tls=false", "--host=tcp://0.0.0.0:2375"]
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
    DOCKER_BUILDKIT: 0

.base-setup: &base-setup
  before_script:
    # Install Docker client and dependencies
    - apt-get update -qq
    - apt-get install -y -qq python3-pip make curl apt-transport-https ca-certificates gnupg lsb-release
    - pip3 install --cache-dir .pip-cache/ ansible molecule molecule-plugins[docker] docker pytest-testinfra ansible-lint yamllint jinja2
    - ansible-galaxy collection install community.general community.docker -p .ansible-cache/
    # Install Docker CLI (don't install docker.io which conflicts with DinD)
    - curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    - >
      echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg]
      https://download.docker.com/linux/debian bullseye stable" |
      tee /etc/apt/sources.list.d/docker.list > /dev/null
    - apt-get update -qq
    - apt-get install -y -qq docker-ce-cli
    # Wait for Docker daemon to be ready with better error handling
    - echo "Waiting for Docker daemon to start..."
    - echo "Docker host: ${DOCKER_HOST}"
    - >
      for i in $(seq 1 60); do
        if docker info >/dev/null 2>&1; then
          echo "Docker daemon ready after $i attempts";
          break;
        fi;
        echo "Attempt $i/60: Docker not ready, waiting...";
        sleep 3;
      done
    - docker info || (echo "Docker daemon failed to start after 60 attempts (3 minutes)" && exit 1)
    # Test Docker connectivity
    - echo "Testing Docker connectivity..."
    - docker run --rm hello-world || echo "Docker connectivity test failed"
    # Verify setup
    - docker --version
    - ansible --version
    - molecule --version
    - echo "Checking available molecule scenarios..."
    - molecule list || echo "No molecule scenarios found"

# Docker connectivity test job for debugging
test-docker-connectivity:
  stage: validate
  <<: *docker-setup
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq curl apt-transport-https ca-certificates gnupg lsb-release
    - curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    - >
      echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg]
      https://download.docker.com/linux/debian bullseye stable" |
      tee /etc/apt/sources.list.d/docker.list > /dev/null
    - apt-get update -qq
    - apt-get install -y -qq docker-ce-cli
  script:
    - echo "=== Docker Connectivity Debug ==="
    - echo "Docker host: ${DOCKER_HOST}"
    - echo "Waiting for Docker daemon..."
    - >
      for i in $(seq 1 30); do
        if docker info >/dev/null 2>&1; then
          echo "✅ Docker daemon ready after $i attempts";
          break;
        fi;
        echo "⏳ Attempt $i/30: Docker not ready, waiting...";
        sleep 2;
      done
    - echo "=== Docker Info ==="
    - docker info
    - echo "=== Docker Version ==="
    - docker version
    - echo "=== Test Container Run ==="
    - docker run --rm hello-world
    - echo "✅ Docker connectivity test passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: true

# Validation Stage
quick-validation:
  stage: validate
  image: python:3.11-slim
  before_script:
    - apt-get update -qq && apt-get install -y -qq python3-pip make
    - pip3 install --cache-dir .pip-cache/ ansible ansible-lint yamllint jinja2
    - ansible --version
  script:
    - echo "Running quick validation (lint + syntax check)..."
    - make test-quick
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

lint-collection:
  stage: validate
  image: python:3.11-slim
  before_script:
    - apt-get update -qq && apt-get install -y -qq python3-pip make
    - pip3 install --cache-dir .pip-cache/ ansible ansible-lint yamllint
  script:
    - echo "Linting Ansible collection files..."
    - ansible-lint --version
    - ansible-lint . --offline
    - echo "Checking YAML syntax..."
    - yamllint .
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

validate-galaxy:
  stage: validate
  image: python:3.11-slim
  before_script:
    - apt-get update -qq && apt-get install -y -qq python3-pip make
    - pip3 install --cache-dir .pip-cache/ ansible
    - ansible --version
  script:
    - echo "Validating galaxy.yml..."
    - ansible-galaxy collection build . --force
    - ls -la *.tar.gz
  artifacts:
    paths:
      - "*.tar.gz"
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

validate-templates:
  stage: validate
  image: python:3.11-slim
  before_script:
    - apt-get update -qq && apt-get install -y -qq python3-pip make
    - pip3 install --cache-dir .pip-cache/ ansible jinja2
  script:
    - echo "Validating all Jinja2 templates using script and edge cases..."
    - make validate-templates
    - make test-template-edge-cases
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Role Testing Stage - Test individual molecule scenarios

test-configure-host:
  stage: test-roles
  <<: *docker-setup
  <<: *base-setup
  script:
    - echo "Testing configure_host role..."
    - molecule test -s configure_host
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  retry:
    max: 2
    when: runner_system_failure

test-manage-packages:
  stage: test-roles
  <<: *docker-setup
  <<: *base-setup
  script:
    - echo "Testing manage_packages role..."
    - molecule test -s manage_packages
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  retry:
    max: 2
    when: runner_system_failure

test-manage-users:
  stage: test-roles
  <<: *docker-setup
  <<: *base-setup
  script:
    - echo "Testing manage_users role..."
    - molecule test -s manage_users
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  retry:
    max: 2
    when: runner_system_failure

test-manage-firewall:
  stage: test-roles
  <<: *docker-setup
  <<: *base-setup
  script:
    - echo "Testing manage_firewall role..."
    - molecule test -s manage_firewall
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  retry:
    max: 2
    when: runner_system_failure

test-manage-language-packages:
  stage: test-roles
  <<: *docker-setup
  <<: *base-setup
  script:
    - echo "Testing manage_language_packages role..."
    - molecule test -s manage_language_packages
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  retry:
    max: 2
    when: runner_system_failure

test-manage-system-settings:
  stage: test-roles
  <<: *docker-setup
  <<: *base-setup
  script:
    - echo "Testing manage_system_settings role..."
    - molecule test -s manage_system_settings
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  retry:
    max: 2
    when: runner_system_failure

test-discovery:
  stage: test-roles
  <<: *docker-setup
  <<: *base-setup
  script:
    - echo "Testing discovery role..."
    - molecule test -s discovery
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  retry:
    max: 2
    when: runner_system_failure

test-dotfiles:
  stage: test-roles
  <<: *docker-setup
  <<: *base-setup
  script:
    - echo "Testing dotfiles role..."
    - molecule test -s dotfiles
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  retry:
    max: 2
    when: runner_system_failure

# Integration Testing Stage
test-collection-integration:
  stage: test-integration
  <<: *docker-setup
  <<: *base-setup
  script:
    - echo "Running full collection integration tests..."
    - molecule test -s integration
  needs:
    - test-configure-host
    - test-manage-packages
    - test-manage-users
    - test-manage-firewall
    - test-manage-language-packages
    - test-manage-system-settings
    - test-discovery
    - test-dotfiles
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  retry:
    max: 2
    when: runner_system_failure

# Build Stage
build-collection:
  stage: build
  image: python:3.11-slim
  <<: *base-setup
  script:
    - echo "Building collection for release..."
    - ansible-galaxy collection build . --force
    - echo "Collection built successfully:"
    - ls -la *.tar.gz
  artifacts:
    paths:
      - "${COLLECTION_NAMESPACE}-${COLLECTION_NAME}-*.tar.gz"
    expire_in: 1 week
  needs:
    - quick-validation
    - lint-collection
    - validate-galaxy
    - test-collection-integration
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# GitHub Sync Stage
sync-to-github:
  stage: sync-github
  image: alpine/git:latest
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  before_script:
    - apk add --no-cache git openssh-client
    - eval $(ssh-agent -s)
    - echo "$GITHUB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
  script:
    - echo "Syncing repository to GitHub..."
    - git remote add github git@github.com:${GITHUB_USERNAME}/${GITHUB_REPOSITORY}.git || true
    - git fetch github || echo "GitHub remote not accessible, continuing..."
    - |
      if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then
        echo "Syncing main branch to GitHub..."
        git push github HEAD:main --force-with-lease
      elif [ -n "$CI_COMMIT_TAG" ]; then
        echo "Syncing tag $CI_COMMIT_TAG to GitHub..."
        git push github $CI_COMMIT_TAG
      else
        echo "Skipping sync for feature branch $CI_COMMIT_BRANCH"
      fi
    - echo "GitHub sync completed"
  needs:
    - build-collection
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - if: $CI_COMMIT_TAG
      when: on_success
  # Required GitLab CI/CD variables:
  # GITHUB_SSH_PRIVATE_KEY - SSH private key for GitHub access
  # GITHUB_USERNAME - GitHub username/organization
  # GITHUB_REPOSITORY - GitHub repository name

# Cleanup job for failed pipelines
cleanup-on-failure:
  stage: .post
  image: alpine:latest
  script:
    - echo "Pipeline failed - cleaning up resources"
    - echo "Check logs for test failures or infrastructure issues"
  when: on_failure
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Security scanning (optional, requires GitLab Premium)
ansible-security-scan:
  stage: validate
  image: python:3.11-slim
  before_script:
    - pip3 install ansible-lint bandit safety
  script:
    - echo "Running security scans..."
    - ansible-lint . --offline
    - find . -name "*.py" -exec bandit {} + || true
    - safety check || true
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Performance testing (runs on schedule)
performance-test:
  stage: test-integration
  <<: *docker-setup
  <<: *base-setup
  script:
    - echo "Running performance tests..."
    - time molecule test -s integration
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  allow_failure: true

# Multi-OS Testing Matrix (scheduled runs)
.os-matrix-test: &os-matrix-test
  stage: test-integration
  <<: *docker-setup
  <<: *base-setup
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $TEST_MATRIX == "true"
  allow_failure: true

test-ubuntu-discovery:
  <<: *os-matrix-test
  script:
    - echo "Testing discovery on Ubuntu 24.04..."
    - molecule test -s discovery
  variables:
    MOLECULE_PLATFORM: ubuntu2404

test-debian-discovery:
  <<: *os-matrix-test
  script:
    - echo "Testing discovery on Debian 12..."
    - molecule test -s discovery
  variables:
    MOLECULE_PLATFORM: debian12

test-cross-os-compatibility:
  <<: *os-matrix-test
  script:
    - echo "Testing cross-OS compatibility..."
    - molecule test -s integration --parallel
  variables:
    MOLECULE_PARALLEL: "true"

# End-to-End Testing (full workflow)
test-e2e-workflow:
  stage: test-integration
  <<: *docker-setup
  <<: *base-setup
  script:
    - echo "Running end-to-end workflow test..."
    - echo "1. Discovery -> 2. Configuration Generation -> 3. Infrastructure Setup"
    - molecule test -s integration
    - echo "Testing discovery-to-deployment pipeline..."
    - molecule converge -s discovery
    - molecule verify -s discovery
  needs:
    - test-collection-integration
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $MR_LABELS =~ /.*e2e-test.*/
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  artifacts:
    paths:
      - molecule/*/logs/
      - /tmp/discovery-test*/
    expire_in: 1 hour
    when: always

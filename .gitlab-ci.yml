stages:
  - validate
  - test
  - integration
  - build
  - publish

variables:
  ANSIBLE_FORCE_COLOR: "true"
  FF_WAIT_FOR_POD_TO_BE_REACHABLE: 1
  # Docker connection resilience
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: 1
  # Use CI-specific config for Docker temp directory issues
  ANSIBLE_CONFIG: "$CI_PROJECT_DIR/ansible-ci.cfg"
  # Force Ansible to use /tmp for all temp operations
  ANSIBLE_REMOTE_TEMP: "/tmp/ansible-tmp"
  ANSIBLE_LOCAL_TEMP: "/tmp/ansible-tmp"

# Global cache configuration
cache:
  # Use same cache for all jobs with same key
  policy: pull-push
  # Fallback cache for different branches
  fallback_keys:
    - cache-main

# Comprehensive validation - combines all linting and syntax checks
validate-all:
  stage: validate
  image: python:3.13-slim
  cache:
    key: "validation-$CI_COMMIT_REF_SLUG"
    paths:
      - /root/.cache/pip/
      - /root/.ansible/collections/
      - /var/cache/apt/
      - /root/.cache/pre-commit/
  script:
    # Install all required tools
    - apt-get update -qq && apt-get install -y -qq ansible python3-pip git make
    - pip install --break-system-packages pre-commit ansible-lint pyyaml
    # Install collections with caching and retry for transient Galaxy failures
    - |
      if [ ! -f /root/.ansible/collections/.installed ]; then
        echo "Installing Ansible collections (not cached)..."
        for i in {1..3}; do
          echo "Attempt $i: Installing ansible collections..."
          if ansible-galaxy collection install -r requirements.yml --force; then
            echo "✅ Collections installed successfully"
            touch /root/.ansible/collections/.installed
            break
          else
            echo "❌ Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
          if [ $i -eq 3 ]; then
            echo "❌ All attempts failed"
            exit 1
          fi
        done
      else
        echo "✅ Using cached Ansible collections"
      fi

    # Run pre-commit checks (includes yamllint, prettier, custom checks)
    - git config --global --add safe.directory $CI_PROJECT_DIR
    - pre-commit run --all-files || true # Non-blocking but shows issues

    # Run ansible-lint (critical for Ansible best practices)
    - ansible-lint

    # Run syntax check (ensures playbooks are parseable)
    - make syntax-check

    - echo "✅ All validation checks completed"

# Template for molecule test jobs
.molecule_test_template:
  image: python:3.13-slim
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
    FF_NETWORK_PER_BUILD: "true"
  cache:
    key: "molecule-$CI_COMMIT_REF_SLUG"
    paths:
      - /root/.cache/pip/
      - /root/.ansible/collections/
      - /var/cache/apt/
      - /var/lib/apt/lists/
  before_script:
    # Install system packages like we do locally
    - apt-get update -qq
    - apt-get install -y -qq ansible docker.io make dnsutils python3-pip
    # Login to Docker Hub to avoid rate limiting
    - echo "$DOCKER_HUB_TOKEN" | docker login -u "$DOCKER_HUB_USER" --password-stdin || echo "Docker Hub login failed (continuing anyway)"
    # Ensure collections directory exists for caching
    - mkdir -p /root/.ansible/collections
    # Install molecule and testing tools via pip (user install, no venv)
    - pip install --break-system-packages molecule[docker] molecule-plugins[docker] pytest-testinfra
    # Install collections with caching and retry for transient Galaxy failures
    - |
      if [ ! -f /root/.ansible/collections/.installed ]; then
        echo "Installing Ansible collections (not cached)..."
        for i in {1..3}; do
          echo "Attempt $i: Installing ansible collections..."
          if ansible-galaxy collection install -r requirements.yml --force; then
            echo "✅ Collections installed successfully"
            touch /root/.ansible/collections/.installed
            break
          else
            echo "❌ Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
          if [ $i -eq 3 ]; then
            echo "❌ All attempts failed"
            exit 1
          fi
        done
      else
        echo "✅ Using cached Ansible collections"
      fi
    - echo "=== Installed collections ==="
    - ansible-galaxy collection list | grep -E "(community\.general|ansible\.posix|community\.docker)"
    - echo "=== Collection paths ==="
    - ansible --version | grep "collection location"
    # Debug DNS and network connectivity
    - echo "Checking network connectivity..."
    - nslookup docker || echo "DNS lookup failed"
    - ping -c 3 docker || echo "Ping failed"
    # Wait for Docker with enhanced retry logic
    - echo "Waiting for Docker daemon..."
    - for i in {1..60}; do docker info >/dev/null 2>&1 && break || (echo "Attempt $i failed, retrying..."; sleep 2); done
    - docker info

# Essential individual tests
test-discovery:
  extends: .molecule_test_template
  stage: test
  script:
    - molecule test -s discovery
    - echo "✅ Discovery role tests passed"

# REMOVED: test-docker - role not ready for production
# Docker compose functionality needs further development

test-minimal:
  extends: .molecule_test_template
  stage: test
  script:
    - molecule test -s minimal
    - echo "✅ Minimal configuration safety tests passed"

# REMOVED: test-dotfiles - functionality consolidated into configure_user role
# Dotfiles deployment is now handled as part of per-user configuration

# Individual role-level tests (run in parallel for faster feedback)
test-role-nodejs:
  extends: .molecule_test_template
  stage: test
  script:
    - cd roles/nodejs && molecule test
    - echo "✅ Node.js role tests passed"

test-role-rust:
  extends: .molecule_test_template
  stage: test
  script:
    - cd roles/rust && molecule test
    - echo "✅ Rust role tests passed"

test-role-go:
  extends: .molecule_test_template
  stage: test
  script:
    - cd roles/go && molecule test
    - echo "✅ Go role tests passed"

test-role-neovim:
  extends: .molecule_test_template
  stage: test
  script:
    - cd roles/neovim && molecule test
    - echo "✅ Neovim role tests passed"

test-role-terminal-config:
  extends: .molecule_test_template
  stage: test
  script:
    - cd roles/terminal_config && molecule test
    - echo "✅ Terminal config role tests passed"

# Integration tests
test-integration:
  extends: .molecule_test_template
  stage: integration
  script:
    - make test-integration
    - echo "✅ Integration tests passed"
  only:
    - main
    - merge_requests

# Collection build
collection-build:
  stage: build
  image: python:3.13-slim
  cache:
    key: "build-$CI_COMMIT_REF_SLUG"
    paths:
      - /var/cache/apt/
  script:
    - apt-get update -qq && apt-get install -y -qq make ansible
    - make collection-build
    - ls -la *.tar.gz
    - echo "✅ Collection built successfully"
  artifacts:
    paths:
      - "*.tar.gz"
    expire_in: 1 week

# Version validation and tagging
version-check:
  stage: build
  image: python:3.13-slim
  script:
    - apt-get update -qq && apt-get install -y -qq python3-yaml
    - python3 -c "import yaml; print('Version:', yaml.safe_load(open('galaxy.yml'))['version'])"
    - echo "✅ Version validated"
  only:
    - tags

# Publish to Ansible Galaxy (manual trigger only)
publish-galaxy:
  stage: publish
  image: python:3.13-slim
  dependencies:
    - collection-build
  script:
    - apt-get update -qq && apt-get install -y -qq ansible
    - |
      if [ -z "$GALAXY_API_KEY" ]; then
        echo "❌ GALAXY_API_KEY not set - skipping publish"
        exit 1
      fi
    - ansible-galaxy collection publish *.tar.gz --api-key $GALAXY_API_KEY
    - echo "✅ Collection published to Ansible Galaxy"
  when: manual
  only:
    - tags
  variables:
    GALAXY_API_KEY: $GALAXY_API_KEY

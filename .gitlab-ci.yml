stages:
  - validate
  - security
  - test
  - integration
  - build
  - publish

variables:
  ANSIBLE_FORCE_COLOR: "true"
  FF_WAIT_FOR_POD_TO_BE_REACHABLE: 1
  # Docker connection resilience
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: 1

# YAML and Ansible validation
yaml-validation:
  stage: validate
  image: python:3.13-slim
  script:
    - pip install yamllint
    - yamllint .
    - echo "✅ YAML validation passed"

ansible-lint:
  stage: validate
  image: python:3.13-slim
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements-dev.txt
    - ansible-lint
    - echo "✅ Ansible lint passed"

syntax-check:
  stage: validate
  image: python:3.13-slim
  script:
    - apt-get update -qq && apt-get install -y -qq make
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install ansible
    - make syntax-check
    - echo "✅ Syntax check passed"

# Security checks
security-bandit:
  stage: security
  image: python:3.13-slim
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install bandit[toml]
    # Scan only relevant directories, exclude test files and virtual envs
    - bandit -r roles/ -f json --exclude '**/test*,**/molecule*' || true
    - echo "✅ Security scan completed"
  allow_failure: true

pre-commit-checks:
  stage: security
  image: python:3.13-slim
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements-dev.txt
    - pre-commit run --all-files || echo "Pre-commit issues found"
    - echo "✅ Pre-commit checks completed"
  allow_failure: true

# Quick validation tests (lint + syntax only)
test-quick:
  stage: test
  image: python:3.13-slim
  script:
    - apt-get update -qq && apt-get install -y -qq make
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install ansible yamllint
    - pip install -r requirements-dev.txt
    - make lint
    - make syntax-check
    - echo "✅ Quick validation tests passed"

# Template for molecule test jobs
.molecule_test_template:
  image: python:3.13-slim
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
    FF_NETWORK_PER_BUILD: "true"
  before_script:
    - apt-get update -qq && apt-get install -y -qq docker.io make dnsutils
    # Remove any stale .venv from old cache
    - rm -rf .venv
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements-dev.txt
    # Install ansible collections from requirements.yml and verify
    - ansible-galaxy collection install -r requirements.yml --force
    - echo "=== Installed collections ==="
    - ansible-galaxy collection list | grep -E "(community\.general|ansible\.posix|community\.docker)"
    - echo "=== Collection paths ==="
    - find .venv -name "community" -type d 2>/dev/null | head -3
    - find /root/.ansible -name "community" -type d 2>/dev/null | head -3
    # Debug DNS and network connectivity
    - echo "Checking network connectivity..."
    - nslookup docker || echo "DNS lookup failed"
    - ping -c 3 docker || echo "Ping failed"
    # Wait for Docker with enhanced retry logic
    - echo "Waiting for Docker daemon..."
    - for i in {1..60}; do docker info >/dev/null 2>&1 && break || (echo "Attempt $i failed, retrying..."; sleep 2); done
    - docker info

# Role-specific tests
test-discovery:
  extends: .molecule_test_template
  stage: test
  script:
    - molecule test -s discovery
    - echo "✅ Discovery role tests passed"

test-packages:
  extends: .molecule_test_template
  stage: test
  script:
    - molecule test -s packages
    - echo "✅ Package management tests passed"

test-os-configuration:
  extends: .molecule_test_template
  stage: test
  script:
    - molecule test -s os_configuration
    - echo "✅ OS configuration tests passed"

test-users:
  extends: .molecule_test_template
  stage: test
  script:
    - molecule test -s users
    - echo "✅ User management tests passed"

test-security-services:
  extends: .molecule_test_template
  stage: test
  script:
    - molecule test -s security
    - echo "✅ Security services tests passed"

test-system-settings:
  extends: .molecule_test_template
  stage: test
  script:
    - molecule test -s system_settings
    - echo "✅ System settings tests passed"

# REMOVED: test-language-packages - functionality moved to configure_user role
# Language package management is now handled per-user in configure_user role

# REMOVED: test-security - duplicate of test-security-services
# Use test-security-services which tests manage_security_services role

# Integration tests
test-integration:
  extends: .molecule_test_template
  stage: integration
  script:
    - make test-integration
    - echo "✅ Integration tests passed"
  only:
    - main
    - merge_requests

# Collection build
collection-build:
  stage: build
  image: python:3.13-slim
  script:
    - apt-get update -qq && apt-get install -y -qq make
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install ansible
    - make collection-build
    - ls -la *.tar.gz
    - echo "✅ Collection built successfully"
  artifacts:
    paths:
      - "*.tar.gz"
    expire_in: 1 week

# Version validation and tagging
version-check:
  stage: build
  image: python:3.13-slim
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install pyyaml
    - python3 -c "import yaml; print('Version:', yaml.safe_load(open('galaxy.yml'))['version'])"
    - echo "✅ Version validated"
  only:
    - tags

# Publish to Ansible Galaxy (manual trigger only)
publish-galaxy:
  stage: publish
  image: python:3.13-slim
  dependencies:
    - collection-build
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install ansible
    - |
      if [ -z "$GALAXY_API_KEY" ]; then
        echo "❌ GALAXY_API_KEY not set - skipping publish"
        exit 1
      fi
    - ansible-galaxy collection publish *.tar.gz --api-key $GALAXY_API_KEY
    - echo "✅ Collection published to Ansible Galaxy"
  when: manual
  only:
    - tags
  variables:
    GALAXY_API_KEY: $GALAXY_API_KEY

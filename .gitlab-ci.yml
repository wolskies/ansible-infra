# GitLab CI/CD Pipeline for wolskinet.infrastructure Ansible Collection
# Comprehensive testing strategy: linting -> molecule tests -> integration -> live machine testing

stages:
  - validate
  - lint
  - unit-test
  - integration-test
  - security-test
  - live-test
  - build
  - deploy

variables:
  COLLECTION_NAMESPACE: wolskinet
  COLLECTION_NAME: infrastructure
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  MOLECULE_EPHEMERAL_DIRECTORY: "$CI_PROJECT_DIR/.cache/molecule"
  ANSIBLE_FORCE_COLOR: "true"
  ANSIBLE_HOST_KEY_CHECKING: "false"
  PY_COLORS: "1"
  DOCKER_BUILDKIT: 0
  ANSIBLE_COLLECTIONS_PATH: "/root/.ansible/collections:${CI_PROJECT_DIR}/..:${HOME}/.ansible/collections:/usr/share/ansible/collections"

# =============================================================================
# CACHE AND SETUP CONFIGURATION
# =============================================================================

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/pip/
    - .cache/molecule/
    - .venv/

.setup_environment: &setup_environment |
  python3 -m venv .venv
  source .venv/bin/activate
  pip install --upgrade pip
  pip install -r requirements-dev.txt
  docker --version || (echo "Docker not available - some tests may be skipped"; exit 0)

# =============================================================================
# SHARED TEMPLATES FOR TESTING
# =============================================================================

.molecule_test_template: &molecule_test_template
  image: python:3.11-slim
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    ANSIBLE_COLLECTIONS_PATH: "/root/.ansible/collections:${CI_PROJECT_DIR}/..:${HOME}/.ansible/collections:/usr/share/ansible/collections"
  before_script:
    - *setup_environment
    - docker info
    # Install the current collection for testing
    - mkdir -p /root/.ansible/collections/ansible_collections/wolskinet/
    - cp -r . /root/.ansible/collections/ansible_collections/wolskinet/infrastructure
    # Verify setup
    - ansible --version
    - molecule --version
    - ansible-galaxy collection list | grep wolskinet || echo "Collection not found in list"
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

.live_test_template: &live_test_template
  image: python:3.11-slim
  before_script:
    - *setup_environment
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
  when: manual
  only:
    - main
    - develop

# =============================================================================
# VALIDATION STAGE - Fast feedback on basic issues
# =============================================================================

yaml-validation:
  stage: validate
  image: python:3.11-slim
  before_script:
    - pip install yamllint
  script:
    - yamllint .
    - echo "✅ YAML validation passed"
  only:
    - merge_requests
    - main
    - develop

ansible-syntax-check:
  stage: validate
  image: python:3.11-slim
  before_script:
    - *setup_environment
  script:
    - make syntax-check
    - echo "✅ Ansible syntax validation passed"
  only:
    - merge_requests
    - main
    - develop

collection-build-test:
  stage: validate
  image: python:3.11-slim
  before_script:
    - *setup_environment
  script:
    - ansible-galaxy collection build --force
    - ls -la *.tar.gz
    - echo "✅ Collection builds successfully"
  artifacts:
    paths:
      - "*.tar.gz"
    expire_in: 1 hour
  only:
    - merge_requests
    - main
    - develop

# =============================================================================
# LINTING STAGE - Code quality and security checks
# =============================================================================

ansible-lint:
  stage: lint
  image: python:3.11-slim
  before_script:
    - *setup_environment
  script:
    - ansible-lint --version
    - ansible-lint
    - echo "✅ Ansible linting passed"
  only:
    - merge_requests
    - main
    - develop

yaml-lint:
  stage: lint
  image: python:3.11-slim
  before_script:
    - pip install yamllint
  script:
    - yamllint --version
    - yamllint .
    - echo "✅ YAML linting passed"
  only:
    - merge_requests
    - main
    - develop

template-validation:
  stage: lint
  image: python:3.11-slim
  before_script:
    - *setup_environment
  script:
    - make validate-templates
    - echo "✅ Template validation passed"
  only:
    - merge_requests
    - main
    - develop

# =============================================================================
# UNIT TEST STAGE - Individual role testing with molecule
# =============================================================================

# Critical role tests - these must pass for CI/CD success
molecule-users-test:
  stage: unit-test
  <<: *molecule_test_template
  script:
    - cd molecule/users && molecule test
    - echo "✅ Users role tests passed"

molecule-security-test:
  stage: unit-test
  <<: *molecule_test_template
  script:
    - cd molecule/security && molecule test
    - echo "✅ Security services tests passed"

molecule-firewall-test:
  stage: unit-test
  <<: *molecule_test_template
  script:
    - cd molecule/firewall && molecule test
    - echo "✅ Firewall management tests passed"

molecule-packages-test:
  stage: unit-test
  <<: *molecule_test_template
  script:
    - cd molecule/packages && molecule test
    - echo "✅ Package management tests passed"

molecule-system-settings-test:
  stage: unit-test
  <<: *molecule_test_template
  script:
    - cd molecule/system_settings && molecule test
    - echo "✅ System settings tests passed"

molecule-dotfiles-test:
  stage: unit-test
  <<: *molecule_test_template
  script:
    - cd molecule/dotfiles && molecule test
    - echo "✅ Dotfiles deployment tests passed"

molecule-language-packages-test:
  stage: unit-test
  <<: *molecule_test_template
  script:
    - cd molecule/language_packages && molecule test
    - echo "✅ Language packages tests passed"

molecule-snap-packages-test:
  stage: unit-test
  <<: *molecule_test_template
  script:
    - cd molecule/snap_packages && molecule test
    - echo "✅ Snap packages tests passed"
  allow_failure: true  # Snap may not be available in all containers

molecule-flatpak-packages-test:
  stage: unit-test
  <<: *molecule_test_template
  script:
    - cd molecule/flatpak_packages && molecule test
    - echo "✅ Flatpak packages tests passed"
  allow_failure: true  # Flatpak may not work in containers

molecule-configure-system-test:
  stage: unit-test
  <<: *molecule_test_template
  script:
    - cd molecule/configure_system && molecule test
    - echo "✅ System configuration orchestration tests passed"

# =============================================================================
# INTEGRATION TEST STAGE - Multi-role system testing
# =============================================================================

integration-full-system:
  stage: integration-test
  <<: *molecule_test_template
  script:
    - cd molecule/integration && molecule test
    - echo "✅ Full system integration tests passed"

# Multi-OS compatibility testing
integration-multi-os:
  stage: integration-test
  <<: *molecule_test_template
  script:
    # Test Ubuntu 22.04 and Ubuntu 24.04
    - cd molecule/integration && MOLECULE_DISTRO=ubuntu2204 molecule test
    - cd molecule/integration && MOLECULE_DISTRO=ubuntu2404 molecule test
    # Test Debian 12 and 13
    - cd molecule/integration && MOLECULE_DISTRO=debian12 molecule test || echo "Debian 12 test completed with issues"
    - echo "✅ Multi-OS integration tests completed"
  allow_failure: true  # Some OS variants may have known issues
  retry:
    max: 1

# =============================================================================
# SECURITY TEST STAGE - Security-focused validation
# =============================================================================

security-hardening-validation:
  stage: security-test
  <<: *molecule_test_template
  script:
    # Run comprehensive security tests
    - cd molecule/security && molecule test
    - cd molecule/firewall && molecule test
    # Additional security validation
    - echo "Running additional security checks..."
    - grep -r "vault.*plain" . && exit 1 || echo "✅ No plaintext secrets found"
    - grep -r "password.*=" . | grep -v "example\|test\|comment" && exit 1 || echo "✅ No hardcoded passwords found"
    - echo "✅ Security validation completed"

# =============================================================================
# LIVE TEST STAGE - Testing on actual machines (when enabled)
# =============================================================================

live-test-ubuntu:
  stage: live-test
  <<: *live_test_template
  script:
    - echo "Testing on live Ubuntu machines..."
    - ansible-playbook -i $LIVE_INVENTORY_UBUNTU examples/playbooks/deploy-full-infrastructure.yml --check --diff --limit ubuntu_test_group
    - echo "✅ Live Ubuntu testing completed (dry-run)"
  variables:
    LIVE_INVENTORY_UBUNTU: "$LIVE_TEST_INVENTORY_UBUNTU"

live-test-debian:
  stage: live-test
  <<: *live_test_template
  script:
    - echo "Testing on live Debian machines..."
    - ansible-playbook -i $LIVE_INVENTORY_DEBIAN examples/playbooks/deploy-full-infrastructure.yml --check --diff --limit debian_test_group
    - echo "✅ Live Debian testing completed (dry-run)"
  variables:
    LIVE_INVENTORY_DEBIAN: "$LIVE_TEST_INVENTORY_DEBIAN"

# Full live deployment (requires manual approval)
live-deploy-production:
  stage: live-test
  <<: *live_test_template
  script:
    - echo "Deploying to production environments..."
    - ansible-playbook -i $PRODUCTION_INVENTORY examples/playbooks/deploy-full-infrastructure.yml --diff
    - echo "✅ Production deployment completed"
  environment:
    name: production
  only:
    - main
  when: manual

# =============================================================================
# BUILD STAGE - Collection packaging
# =============================================================================

collection-build:
  stage: build
  image: python:3.11-slim
  before_script:
    - *setup_environment
  script:
    - ansible-galaxy collection build --force
    - ls -la *.tar.gz
    - echo "Collection version: $(grep '^version:' galaxy.yml | cut -d' ' -f2)"
  artifacts:
    paths:
      - "*.tar.gz"
    expire_in: 1 week
  only:
    - main
    - tags

# =============================================================================
# DEPLOY STAGE - Publishing and release
# =============================================================================

publish-galaxy:
  stage: deploy
  image: python:3.11-slim
  before_script:
    - *setup_environment
  script:
    - echo "Publishing to Ansible Galaxy..."
    - ansible-galaxy collection publish *.tar.gz --api-key $GALAXY_API_KEY
    - echo "✅ Successfully published to Ansible Galaxy"
  dependencies:
    - collection-build
  only:
    - tags
  when: manual

# Create GitHub/GitLab release
create-release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Creating release for $CI_COMMIT_TAG"
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: 'Release $CI_COMMIT_TAG of wolskinet.infrastructure collection'
    tag_name: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Collection Package'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/raw/wolskinet-infrastructure-$CI_COMMIT_TAG.tar.gz?job=collection-build'
  dependencies:
    - collection-build
  only:
    - tags
  when: manual

# =============================================================================
# PIPELINE HEALTH AND NOTIFICATIONS
# =============================================================================

pipeline-success:
  stage: deploy
  image: alpine:latest
  script:
    - echo "🎉 All tests passed! Pipeline completed successfully."
    - echo "Collection is ready for production deployment."
    - echo "Molecule tests: ✅"
    - echo "Integration tests: ✅"
    - echo "Security validation: ✅"
    - echo "Build verification: ✅"
  when: on_success
  only:
    - main
    - develop

# Failure notification
pipeline-failure:
  stage: deploy
  image: alpine:latest
  script:
    - echo "❌ Pipeline failed! Check the failed jobs above."
    - echo "Common issues:"
    - echo "  - Docker service availability"
    - echo "  - Test environment setup"
    - echo "  - Network connectivity for package downloads"
    - echo "  - Molecule container permissions"
  when: on_failure
  only:
    - main
    - develop
    - merge_requests

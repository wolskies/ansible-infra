---
# Replication playbook for {{ inventory_hostname }}
# Generated from infrastructure discovery on {{ ansible_date_time.iso8601 }}
# Compatible with existing ~/Ansible/playbooks structure and new_machine.yml format

- name: Replicate discovered configuration for {{ inventory_hostname }}
  hosts: {{ inventory_hostname }}
  gather_facts: true
  collections:
    - devsec.hardening
    - wolskinet.infrastructure
  
  roles:
    # Security hardening (if not a workstation)
{% if not discovery_profile.desktop.has_gui %}
    - name: devsec.hardening.os_hardening
      become: true
      when: not ansible_facts['distribution'] == 'MacOSX'
{% endif %}
    
    # Core roles (matching new_machine.yml pattern)
    - name: basic_setup
      become: false
    
    - name: system_update  
      become: false
      
{% if discovery_profile.development.dotfiles_repo %}
    - name: dotfiles
      when: dotfiles_repository_url is defined
{% endif %}

  tasks:
    # Install group-specific roles (matching new_machine.yml pattern)
    - name: Install Group specific roles
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop: "{{ group_roles_install | default([]) }}"
      when: group_roles_install is defined

{% if discovery_profile.docker.installed %}
    # Docker-specific configuration
    - name: Deploy Docker services
      ansible.builtin.include_role:
        name: docker_service_deploy
      vars:
        service_name: "{{ item }}"
      loop: "{{ docker_service_deploy | default([]) }}"
      when: 
        - docker_service_deploy is defined
        - item is defined
{% endif %}

{% if discovery_profile.repositories.apt_sources %}
    # APT repository configuration
    - name: Configure additional APT repositories
      ansible.builtin.debug:
        msg: "TODO: Configure {{ discovery_profile.repositories.apt_sources | length }} APT repositories"
      when: ansible_os_family == "Debian"
{% endif %}

{% if discovery_profile.repositories.aur_helpers %}
    # AUR helper configuration  
    - name: Install AUR helper
      ansible.builtin.debug:
        msg: "TODO: Install and configure {{ discovery_profile.repositories.aur_helpers[0] | basename }}"
      when: ansible_distribution == "Archlinux"
{% endif %}

{% if discovery_profile.repositories.homebrew_taps %}
    # Homebrew taps configuration
    - name: Configure Homebrew taps
      ansible.builtin.debug:
        msg: "TODO: Configure {{ discovery_profile.repositories.homebrew_taps | length }} Homebrew taps"
      when: ansible_os_family == "Darwin"
{% endif %}

{% if discovery_profile.service_configs.nginx_sites %}
    # Nginx configuration
    - name: Configure Nginx sites
      ansible.builtin.debug:
        msg: "TODO: Configure {{ discovery_profile.service_configs.nginx_sites | length }} Nginx sites"
      when: "'nginx' in ansible_facts.services"
{% endif %}

{% if discovery_profile.service_configs.apache_sites %}
    # Apache configuration
    - name: Configure Apache virtual hosts
      ansible.builtin.debug:  
        msg: "TODO: Configure {{ discovery_profile.service_configs.apache_sites | length }} Apache virtual hosts"
      when: "'apache2' in ansible_facts.services or 'httpd' in ansible_facts.services"
{% endif %}

    # Final verification
    - name: Display replication completion
      ansible.builtin.debug:
        msg:
          - "Replication playbook completed for {{ inventory_hostname }}"
          - "OS: {{ discovery_profile.system.distribution }} {{ discovery_profile.system.distribution_version }}"
          - "Packages replicated: {{ discovery_profile.packages.installed.keys() | length }}"
{% if discovery_profile.docker.installed %}
          - "Docker containers discovered: {{ discovery_profile.docker.containers | length }}"
{% endif %}
{% if discovery_profile.development.dotfiles_repo %}
          - "Dotfiles repository: {{ discovery_profile.development.dotfiles_repo_url | default('detected') }}"
{% endif %}
          - "Manual configuration tasks remaining - check TODO comments above"

# TODO: Manual steps required after running this playbook:
# 1. Review and uncomment docker_service_deploy entries in host_vars
# 2. Configure vault variables for sensitive data (passwords, API keys)
# 3. Update ansible_host entries in inventory with actual IP addresses
# 4. Configure service-specific settings (nginx sites, database credentials, etc.)
# 5. Test all services after deployment
# 6. Set up monitoring and backups as needed
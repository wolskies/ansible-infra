# Infrastructure Discovery Report

**Generated:** {{ ansible_date_time.iso8601 }}  
**Discovery Tool:** wolskinet.infrastructure collection utilities

## Discovered Machines

{% for host in play_hosts %}
{% set profile = hostvars[host].discovery_profile %}
### {{ host }}

**System Information:**
- **OS:** {{ profile.system.distribution }} {{ profile.system.distribution_version }}
- **Architecture:** {{ profile.system.architecture }}
- **Memory:** {{ profile.system.total_memory }} MB
- **CPU Cores:** {{ profile.system.cpu_cores }}
- **Python:** {{ profile.system.python_version }}

**Network Configuration:**
- **FQDN:** {{ profile.network.fqdn }}
{% if profile.network.default_ipv4.address is defined %}
- **Primary IP:** {{ profile.network.default_ipv4.address }}
- **Primary Interface:** {{ profile.network.default_ipv4.interface }}
{% endif %}

**Machine Classification:**
{% set machine_types = [] %}
{% if profile.services.running | intersect(['ssh', 'sshd']) | length > 0 and not profile.desktop.has_gui %}
  {% set _ = machine_types.append('Server') %}
{% endif %}
{% if profile.docker.installed %}
  {% set _ = machine_types.append('Docker Host') %}
{% endif %}
{% if profile.desktop.has_gui %}
  {% set _ = machine_types.append('Workstation') %}
{% endif %}
- **Type:** {{ machine_types | join(', ') if machine_types else 'Generic System' }}
- **Suggested Groups:** `{{ machine_types | map('lower') | map('replace', ' ', '_') | list + [profile.system.distribution | lower + '_hosts'] }}`

{% if profile.desktop.has_gui %}
**Desktop Environment:**
- **Environment:** {{ profile.desktop.environment if profile.desktop.environment else 'Unknown' }}
{% set display_managers = profile.services.running | intersect(['gdm', 'lightdm', 'sddm', 'xdm', 'kdm']) %}
{% if display_managers %}
- **Display Manager:** {{ display_managers[0] }}
{% endif %}
{% endif %}

{% if profile.docker.installed %}
**Docker Configuration:**
- **Version:** {{ profile.docker.version }}
- **Containers:** {{ profile.docker.containers | length }}
  {% for container in profile.docker.containers %}
  - `{{ container }}`
  {% endfor %}
- **Networks:** {{ profile.docker.networks | length }}
  {% for network in profile.docker.networks %}
  - `{{ network }}`
  {% endfor %}
- **Volumes:** {{ profile.docker.volumes | length }}
  {% for volume in profile.docker.volumes %}
  - `{{ volume }}`
  {% endfor %}
{% endif %}

**Security Configuration:**
{% if profile.security.ufw_status %}
- **Firewall:** UFW - {{ profile.security.ufw_status | regex_replace('\n.*', '') }}
{% elif profile.security.firewalld_status %}
- **Firewall:** firewalld - {{ profile.security.firewalld_status }}
{% else %}
- **Firewall:** Not detected or not configured
{% endif %}

**Development Environment:**
{% if profile.development.tools_installed %}
- **Tools Detected:**
  {% for tool in profile.development.tools_installed %}
  - `{{ tool | basename }}`
  {% endfor %}
{% endif %}
{% if profile.development.dotfiles_repo %}
- **Dotfiles:** Repository detected at `~/.dotfiles`
{% endif %}
{% if profile.development.shell_config %}
- **Shell Config:** Zsh configuration detected
{% endif %}

{% if profile.system.os_family == "Darwin" %}
**macOS Configuration:**
{% if profile.packages.homebrew_formulae %}
- **Homebrew Packages:** {{ profile.packages.homebrew_formulae | length }}
  {% for package in profile.packages.homebrew_formulae | sort %}
  - {{ package }}
  {% endfor %}
{% endif %}
{% if profile.packages.homebrew_casks %}
- **Homebrew Casks:** {{ profile.packages.homebrew_casks | length }}
  {% for cask in profile.packages.homebrew_casks | sort %}
  - {{ cask }}
  {% endfor %}
{% endif %}
{% endif %}

**Critical Services:**
{% for service in profile.services.running | intersect(['ssh', 'sshd', 'docker', 'nginx', 'apache2', 'mysql', 'postgresql']) %}
- ✅ `{{ service }}` (running)
{% endfor %}

---
{% endfor %}

## Recommended Configuration

### Generated Files

The discovery process has generated the following configuration files:

1. **`inventory.yml`** - Ansible inventory with detected groups
2. **`host_vars/[hostname].yml`** - Host-specific variables for each discovered machine
3. **`group_vars/[group].yml`** - Group-specific configurations based on detected roles
4. **`replicate-[hostname].yml`** - Playbook to replicate each machine's configuration

### Suggested Ansible Groups

{% set all_groups = {} %}
{% for host in play_hosts %}
  {% set profile = hostvars[host].discovery_profile %}
  {% set host_groups = [] %}
  
  {% if profile.services.running | intersect(['ssh', 'sshd']) | length > 0 and not profile.desktop.has_gui %}
    {% set _ = host_groups.append('servers') %}
  {% endif %}
  {% if profile.docker.installed %}
    {% set _ = host_groups.append('docker_hosts') %}
  {% endif %}
  {% if profile.desktop.has_gui %}
    {% set _ = host_groups.append('workstations') %}
  {% endif %}
  {% set _ = host_groups.append(profile.system.distribution | lower + '_hosts') %}
  
  {% for group in host_groups %}
    {% if group not in all_groups %}
      {% set _ = all_groups.update({group: []}) %}
    {% endif %}
    {% set _ = all_groups[group].append(host) %}
  {% endfor %}
{% endfor %}

{% for group, hosts in all_groups.items() %}
#### `{{ group }}`
**Purpose:** {% if group == 'servers' %}Security hardening + basic setup + system maintenance{% elif group == 'docker_hosts' %}Docker infrastructure with container services{% elif group == 'workstations' %}Desktop environment + development tools + dotfiles{% else %}{{ group.replace('_', ' ').title() }} specific configuration{% endif %}

**Hosts:** {{ hosts | join(', ') }}

**Suggested Roles:**
{% if group == 'servers' %}
- `wolskinet.infrastructure.basic_setup`
- `wolskinet.infrastructure.system_update`
- `devsec.hardening.os_hardening`
{% elif group == 'docker_hosts' %}
- `wolskinet.infrastructure.basic_setup`
- `wolskinet.infrastructure.system_update`
- `wolskinet.infrastructure.docker_setup`
{% elif group == 'workstations' %}
- `wolskinet.infrastructure.basic_setup`
- `wolskinet.infrastructure.system_update`
- `wolskinet.infrastructure.dotfiles`
{% else %}
- OS-specific configurations and package management
{% endif %}

{% endfor %}

## Missing Roles Analysis

Based on the discovered configurations, you may want to create additional roles for:

{% set missing_roles = [] %}
{% for host in play_hosts %}
  {% set profile = hostvars[host].discovery_profile %}
  {% if profile.services.running | intersect(['nginx', 'apache2', 'httpd']) %}
    {% if 'web_server' not in missing_roles %}
      {% set _ = missing_roles.append('web_server') %}
    {% endif %}
  {% endif %}
  {% if profile.services.running | intersect(['mysql', 'postgresql', 'mariadb']) %}
    {% if 'database' not in missing_roles %}
      {% set _ = missing_roles.append('database') %}
    {% endif %}
  {% endif %}
  {% if profile.packages.installed.keys() | intersect(['prometheus', 'grafana', 'node-exporter']) %}
    {% if 'monitoring' not in missing_roles %}
      {% set _ = missing_roles.append('monitoring') %}
    {% endif %}
  {% endif %}
  {% if profile.services.running | intersect(['fail2ban']) %}
    {% if 'security_tools' not in missing_roles %}
      {% set _ = missing_roles.append('security_tools') %}
    {% endif %}
  {% endif %}
{% endfor %}

{% for role in missing_roles %}
### `{{ role }}`
**Detected on:** {% for host in play_hosts %}{% set profile = hostvars[host].discovery_profile %}{% if (role == 'web_server' and profile.services.running | intersect(['nginx', 'apache2', 'httpd'])) or (role == 'database' and profile.services.running | intersect(['mysql', 'postgresql', 'mariadb'])) or (role == 'monitoring' and profile.packages.installed.keys() | intersect(['prometheus', 'grafana', 'node-exporter'])) or (role == 'security_tools' and profile.services.running | intersect(['fail2ban'])) %}{{ host }}{{ ', ' if not loop.last }}{% endif %}{% endfor %}

**Purpose:** {{ 'Web server configuration and management' if role == 'web_server' else 'Database server setup and configuration' if role == 'database' else 'System monitoring and alerting' if role == 'monitoring' else 'Security tools and intrusion prevention' if role == 'security_tools' else 'Custom role for detected services' }}

{% endfor %}

## Next Steps

### 1. Review Generated Configuration
- Examine the generated inventory and variable files
- Update IP addresses in `inventory.yml` with actual target addresses
- Review group assignments and adjust as needed

### 2. Configure Secrets Management
```bash
# Create vault password file
echo "your-secure-vault-password" > ~/.ansible-vault-pass
chmod 600 ~/.ansible-vault-pass

# Create encrypted secrets
ansible-vault create group_vars/all/vault.yml
```

### 3. Test Configuration
```bash
# Validate inventory
ansible-inventory -i inventory.yml --list

# Test connectivity
ansible -i inventory.yml all -m ping

# Run discovery validation
ansible-playbook -i inventory.yml utilities/playbooks/validate-discovery.yml
```

### 4. Deploy Configuration
```bash
# Deploy to specific group
ansible-playbook -i inventory.yml examples/playbooks/setup-servers.yml
ansible-playbook -i inventory.yml examples/playbooks/setup-docker-hosts.yml

# Or deploy everything
ansible-playbook -i inventory.yml examples/playbooks/deploy-full-infrastructure.yml
```

### 5. Create Missing Roles
Based on the analysis above, consider creating these additional roles:
{% for role in missing_roles %}
- `{{ role }}` role for the wolskinet.infrastructure collection
{% endfor %}

## Security Considerations

⚠️ **Important Security Notes:**

1. **Sensitive Data:** This discovery process does not capture or include sensitive information like passwords, API keys, or private keys. You must configure these separately using Ansible Vault.

2. **SSH Keys:** Ensure proper SSH key authentication is configured for the target machines.

3. **Firewall Rules:** Review and adjust firewall configurations based on your security requirements.

4. **User Accounts:** User password hashes were not captured. Configure user accounts and passwords using vault-encrypted variables.

5. **Docker Secrets:** If Docker containers were detected, review their configurations for any embedded secrets or credentials.

## Support

For questions about this discovery utility or the wolskinet.infrastructure collection:

- Collection Documentation: [README.md](../README.md)
- Vault Setup Guide: [docs/vault-secrets-guide.md](../docs/vault-secrets-guide.md)
- Issues: [GitHub Issues](https://github.com/wolskinet/ansible-infrastructure/issues)
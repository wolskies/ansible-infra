# Replication Playbook for {{ inventory_hostname }}
# Generated from infrastructure discovery on {{ ansible_date_time.iso8601 }}
# 
# This playbook attempts to replicate the configuration discovered on {{ inventory_hostname }}
# Original OS: {{ discovery_profile.system.distribution }} {{ discovery_profile.system.distribution_version }}

---
- name: Replicate discovered infrastructure for {{ inventory_hostname }}
  hosts: {{ inventory_hostname }}
  gather_facts: true
  collections:
    - wolskinet.infrastructure
    - devsec.hardening
    - community.general
    {% if discovery_profile.docker.installed %}
    - community.docker
    {% endif %}
  
  vars:
    # Replication settings
    replicate_users: false  # Set to true to create discovered users (configure vault first!)
    replicate_packages: true
    replicate_services: true
    {% if discovery_profile.docker.installed %}
    replicate_docker: true
    {% endif %}
    
  pre_tasks:
    - name: Display replication target
      ansible.builtin.debug:
        msg:
          - "Replicating configuration for: {{ inventory_hostname }}"
          - "Target OS: {{ discovery_profile.system.distribution }} {{ discovery_profile.system.distribution_version }}"
          - "Source discovery date: {{ ansible_date_time.iso8601 }}"
          
    - name: Validate target OS compatibility
      ansible.builtin.assert:
        that:
          - ansible_distribution == "{{ discovery_profile.system.distribution }}"
        fail_msg: "Target OS ({{ ansible_distribution }}) doesn't match discovered OS ({{ discovery_profile.system.distribution }})"
        success_msg: "OS compatibility confirmed"

  roles:
    {% set suggested_groups = [] %}
    {% if discovery_profile.services.running | intersect(['ssh', 'sshd']) | length > 0 and not discovery_profile.desktop.has_gui %}
      {% set _ = suggested_groups.append('servers') %}
    # Security hardening for servers
    - name: devsec.hardening.os_hardening
      become: true
      when: security_hardening_enabled | default(true)
    {% endif %}
    
    # Basic setup (always needed)
    - name: wolskinet.infrastructure.basic_setup
      become: true
      
    {% if discovery_profile.docker.installed %}
      {% set _ = suggested_groups.append('docker_hosts') %}
    # Docker setup
    - name: wolskinet.infrastructure.docker_setup
      become: true
      when: replicate_docker | default(true)
    {% endif %}
      
    # System updates
    - name: wolskinet.infrastructure.system_update
      become: false
      
    {% if discovery_profile.development.dotfiles_repo %}
    # Dotfiles (if detected)
    - name: wolskinet.infrastructure.dotfiles
      become: false
      when: install_dotfiles | default(true)
    {% endif %}

  vars_files:
    - "host_vars/{{ inventory_hostname }}-packages.yml"

  tasks:
    {% if discovery_profile.system.os_family != "Darwin" %}
    # Package installation (Linux systems)
    - name: Install essential packages first
      ansible.builtin.package:
        name: "{{ discovered_packages.essential }}"
        state: present
      become: true
      when: replicate_packages | default(true)
      ignore_errors: true

    - name: Install admin tools
      ansible.builtin.package:
        name: "{{ discovered_packages.admin_tools }}"
        state: present
      become: true
      when: replicate_packages | default(true)
      ignore_errors: true

    - name: Install development packages
      ansible.builtin.package:
        name: "{{ discovered_packages.development }}"
        state: present
      become: true
      when: replicate_packages | default(true)
      ignore_errors: true

    {% if discovery_profile.desktop.has_gui %}
    - name: Install desktop environment packages
      ansible.builtin.package:
        name: "{{ discovered_packages.desktop_environment | default([]) }}"
        state: present
      become: true
      when: 
        - replicate_packages | default(true)
        - discovered_packages.desktop_environment is defined
      ignore_errors: true

    - name: Install desktop applications
      ansible.builtin.package:
        name: "{{ discovered_packages.desktop | default([]) }}"
        state: present
      become: true
      when: 
        - replicate_packages | default(true)
        - discovered_packages.desktop is defined
      ignore_errors: true
    {% endif %}

    {% if not discovery_profile.desktop.has_gui %}
    - name: Install server packages
      ansible.builtin.package:
        name: "{{ discovered_packages.server | default([]) }}"
        state: present
      become: true
      when: 
        - replicate_packages | default(true)
        - discovered_packages.server is defined
      ignore_errors: true
    {% endif %}

    - name: Install remaining packages
      ansible.builtin.package:
        name: "{{ discovered_packages.other }}"
        state: present
      become: true
      when: replicate_packages | default(true)
      ignore_errors: true

    {% if discovery_profile.system.distribution == "Archlinux" %}
    # AUR packages (requires AUR helper)
    - name: Install AUR packages (if AUR helper available)
      ansible.builtin.command: yay -S --noconfirm {{ item }}
      loop: "{{ aur_packages | default([]) }}"
      become: false
      when: 
        - replicate_packages | default(true)
        - aur_packages is defined
      ignore_errors: true
    {% endif %}

    {% if 'snapd' in discovery_profile.packages.installed %}
    # Snap packages  
    - name: Install Snap packages
      community.general.snap:
        name: "{{ item }}"
      loop: "{{ snap_packages | default([]) }}"
      become: true
      when: 
        - replicate_packages | default(true)
        - snap_packages is defined
      ignore_errors: true
    {% endif %}
    {% endif %}

    {% if discovery_profile.system.os_family == "Darwin" and discovery_profile.packages.homebrew_formulae %}
    # Homebrew packages (macOS)
    - name: Install discovered Homebrew packages
      community.general.homebrew:
        name: "{{ discovery_profile.packages.homebrew_formulae }}"
        state: present
      become: false
      when: replicate_packages | default(true)
      ignore_errors: true

    {% if discovery_profile.packages.homebrew_casks %}
    - name: Install discovered Homebrew casks
      community.general.homebrew_cask:
        name: "{{ discovery_profile.packages.homebrew_casks }}"
        state: present
      become: false
      when: replicate_packages | default(true)
      ignore_errors: true
    {% endif %}
    {% endif %}

    # Service management
    - name: Ensure critical services are running
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        {% for service in discovery_profile.services.enabled | intersect(['ssh', 'sshd', 'docker', 'fail2ban']) %}
        - {{ service }}
        {% endfor %}
      become: true
      when: replicate_services | default(true)
      ignore_errors: true

    {% if discovery_profile.docker.installed %}
    # Docker container replication
    - name: Deploy discovered Docker containers
      block:
        - name: Pull discovered container images
          community.docker.docker_image:
            name: "{{ item }}"
            source: pull
          loop: {{ discovery_profile.docker.containers }}
          when: replicate_docker | default(true)
          ignore_errors: true

        - name: Create discovered Docker networks
          community.docker.docker_network:
            name: "{{ item }}"
          loop: {{ discovery_profile.docker.networks | reject('equalto', 'bridge') | reject('equalto', 'host') | reject('equalto', 'none') | list }}
          when: replicate_docker | default(true)
          ignore_errors: true

        - name: Create discovered Docker volumes
          community.docker.docker_volume:
            name: "{{ item }}"
          loop: {{ discovery_profile.docker.volumes }}
          when: replicate_docker | default(true)
          ignore_errors: true

      become: true
      when: 
        - discovery_profile.docker.installed
        - replicate_docker | default(true)
    {% endif %}

  post_tasks:
    - name: Replication summary
      ansible.builtin.debug:
        msg:
          - "Replication completed for {{ inventory_hostname }}"
          - "Suggested groups: {{ suggested_groups }}"
          - "Original system info:"
          - "  - OS: {{ discovery_profile.system.distribution }} {{ discovery_profile.system.distribution_version }}"
          - "  - Architecture: {{ discovery_profile.system.architecture }}"
          - "  - Memory: {{ discovery_profile.system.total_memory }}MB"
          - "  - CPU Cores: {{ discovery_profile.system.cpu_cores }}"
          {% if discovery_profile.docker.installed %}
          - "  - Docker: {{ discovery_profile.docker.version }}"
          - "  - Containers: {{ discovery_profile.docker.containers | length }}"
          {% endif %}
          - ""
          - "Manual tasks remaining:"
          - "  - Configure vault secrets in group_vars/all/vault.yml"
          - "  - Review and adjust firewall rules"
          - "  - Verify SSH key authentication"
          - "  - Test all applications and services"
          {% if discovery_profile.development.dotfiles_repo %}
          - "  - Configure dotfiles repository URL"
          {% endif %}
          {% if discovery_profile.docker.installed %}
          - "  - Review Docker service configurations"
          - "  - Set up persistent Docker data volumes"
          {% endif %}

# Additional playbooks to consider:
# - {{ discovery_output_dir }}/validate-replication.yml (run this to verify replication)
# - examples/playbooks/setup-servers.yml (if this is a server)
# - examples/playbooks/setup-docker-hosts.yml (if this has Docker)
# - examples/playbooks/workstation-setup.yml (if this is a workstation)
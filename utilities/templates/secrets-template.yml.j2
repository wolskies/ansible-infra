# SECRETS TEMPLATE for {{ inventory_hostname }}
# Generated by infrastructure discovery on {{ ansible_date_time.iso8601 }}
#
# ⚠️  IMPORTANT: This file contains PLACEHOLDERS for sensitive data
# ⚠️  You MUST populate these with real values and encrypt with ansible-vault
#
# Usage:
# 1. Copy this file to group_vars/all/vault.yml
# 2. Replace all PLACEHOLDER values with real secrets
# 3. Encrypt: ansible-vault encrypt group_vars/all/vault.yml

---
# USER MANAGEMENT SECRETS
# Based on discovered users: {{ discovery_profile.users.system_users | length }} users found
vault_user_credentials:
  # Current user: {{ discovery_profile.users.current_user }}
  {{ discovery_profile.users.current_user }}:
    # Generate with: python3 -c "import crypt; print(crypt.crypt('your-password', crypt.mksalt(crypt.METHOD_SHA512)))"
    password_hash: "$6$REPLACE_WITH_REAL_PASSWORD_HASH$"
    
  # Add other users as needed
  # admin:
  #   password_hash: "$6$REPLACE_WITH_REAL_PASSWORD_HASH$"

# SSH KEY MANAGEMENT
vault_ssh_keys:
  # SSH keys for {{ discovery_profile.users.current_user }}
  {{ discovery_profile.users.current_user }}_ssh:
    private_key: |
      -----BEGIN OPENSSH PRIVATE KEY-----
      REPLACE_WITH_YOUR_ACTUAL_SSH_PRIVATE_KEY_CONTENT
      -----END OPENSSH PRIVATE KEY-----
    
    public_key: "ssh-rsa REPLACE_WITH_YOUR_ACTUAL_SSH_PUBLIC_KEY {{ discovery_profile.users.current_user }}@{{ discovery_profile.hostname }}"

{% if discovery_profile.development.dotfiles_repo %}
  # SSH key for dotfiles repository access
  dotfiles_deploy_key: |
    -----BEGIN OPENSSH PRIVATE KEY-----
    REPLACE_WITH_DOTFILES_REPOSITORY_DEPLOY_KEY
    -----END OPENSSH PRIVATE KEY-----
{% endif %}

# REPOSITORY ACCESS
vault_repositories:
  {% if discovery_profile.development.dotfiles_repo %}
  # Dotfiles repository (detected at ~/.dotfiles)
  dotfiles:
    url: "REPLACE_WITH_YOUR_DOTFILES_REPOSITORY_URL"  # e.g., git@github.com:username/dotfiles.git
    ssh_key: "{{ vault_ssh_keys.dotfiles_deploy_key }}"
  {% endif %}
  
  # Add other private repositories as needed
  # private_configs:
  #   url: "git@gitlab.company.com:configs/infrastructure.git"
  #   ssh_key: "{{ vault_ssh_keys.config_deploy_key }}"

{% if discovery_profile.docker.installed %}
# DOCKER REGISTRY SECRETS
# Docker detected with {{ discovery_profile.docker.containers | length }} containers
vault_docker:
  # Docker Hub credentials
  docker_hub:
    username: "REPLACE_WITH_DOCKER_HUB_USERNAME"
    password: "REPLACE_WITH_DOCKER_HUB_PASSWORD"
    email: "REPLACE_WITH_DOCKER_HUB_EMAIL"
  
  # Private registry credentials (if needed)
  # private_registry:
  #   registry: "registry.company.com"
  #   username: "REPLACE_WITH_REGISTRY_USERNAME"
  #   password: "REPLACE_WITH_REGISTRY_PASSWORD"

  # Container-specific secrets
  container_secrets:
{% for container in discovery_profile.docker.containers %}
  {% if 'postgres' in container.lower() or 'mysql' in container.lower() %}
    # Database container secrets for {{ container }}
    database:
      root_password: "REPLACE_WITH_DATABASE_ROOT_PASSWORD"
      user_password: "REPLACE_WITH_DATABASE_USER_PASSWORD"
  {% elif 'grafana' in container.lower() %}
    # Grafana secrets for {{ container }}
    grafana:
      admin_password: "REPLACE_WITH_GRAFANA_ADMIN_PASSWORD"
      secret_key: "REPLACE_WITH_GRAFANA_SECRET_KEY"
  {% elif 'portainer' in container.lower() %}
    # Portainer secrets for {{ container }}
    portainer:
      admin_password: "REPLACE_WITH_PORTAINER_ADMIN_PASSWORD"
  {% endif %}
{% endfor %}
{% endif %}

# EMAIL/NOTIFICATION SECRETS
vault_email:
  # SMTP configuration for notifications
  smtp:
    host: "REPLACE_WITH_SMTP_HOST"  # e.g., smtp.gmail.com
    port: 587
    username: "REPLACE_WITH_SMTP_USERNAME"
    password: "REPLACE_WITH_SMTP_APP_PASSWORD"
    
  # Notification email addresses
  admin_email: "REPLACE_WITH_ADMIN_EMAIL"
  alerts_email: "REPLACE_WITH_ALERTS_EMAIL"

# API KEYS AND TOKENS
vault_api_keys:
  # GitHub API token (for private repositories, releases, etc.)
  github:
    token: "ghp_REPLACE_WITH_YOUR_GITHUB_PERSONAL_ACCESS_TOKEN"
    
  # GitLab API token (if using GitLab)
  gitlab:
    token: "glpat-REPLACE_WITH_YOUR_GITLAB_ACCESS_TOKEN"
    
  # Add other API keys as needed
  # monitoring:
  #   datadog_api_key: "REPLACE_WITH_DATADOG_API_KEY"
  #   prometheus_token: "REPLACE_WITH_PROMETHEUS_TOKEN"

{% if not discovery_profile.desktop.has_gui %}
# SERVER-SPECIFIC SECRETS
vault_server:
  # SSL/TLS certificates
  ssl_certificates:
    # Generate with: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365
    private_key: |
      -----BEGIN PRIVATE KEY-----
      REPLACE_WITH_YOUR_SSL_PRIVATE_KEY
      -----END PRIVATE KEY-----
      
    certificate: |
      -----BEGIN CERTIFICATE-----
      REPLACE_WITH_YOUR_SSL_CERTIFICATE
      -----END CERTIFICATE-----

  # Server monitoring secrets
  monitoring:
    node_exporter_token: "REPLACE_WITH_NODE_EXPORTER_TOKEN"
    prometheus_password: "REPLACE_WITH_PROMETHEUS_PASSWORD"
{% endif %}

# BACKUP AND STORAGE SECRETS
vault_backup:
  # Cloud storage credentials (for backups)
  s3:
    access_key: "REPLACE_WITH_AWS_ACCESS_KEY"
    secret_key: "REPLACE_WITH_AWS_SECRET_KEY"
    bucket: "REPLACE_WITH_S3_BUCKET_NAME"
    
  # Backup encryption
  encryption_key: "REPLACE_WITH_BACKUP_ENCRYPTION_KEY"

# SECURITY TOKENS
vault_security:
  # Encryption keys for application data
  app_secret_key: "REPLACE_WITH_APPLICATION_SECRET_KEY"
  jwt_secret: "REPLACE_WITH_JWT_SIGNING_SECRET"
  
  # Two-factor authentication seeds (if applicable)
  # totp_secret: "REPLACE_WITH_TOTP_SECRET"

# DISCOVERED CONFIGURATION NOTES
# The following configurations were detected and may need secrets:

{% if discovery_profile.services.running | intersect(['nginx', 'apache2']) %}
# Web server detected - you may need:
# - SSL certificates for HTTPS
# - Basic auth credentials
# - API keys for external services
{% endif %}

{% if discovery_profile.services.running | intersect(['mysql', 'postgresql']) %}
# Database server detected - you may need:
# - Root password
# - Application database passwords
# - Backup credentials
{% endif %}

{% if discovery_profile.services.running | intersect(['fail2ban']) %}
# Fail2ban detected - you may need:
# - Email settings for notifications
# - Custom jail configurations
{% endif %}

{% if discovery_profile.packages.installed.keys() | intersect(['prometheus', 'grafana']) %}
# Monitoring stack detected - you may need:
# - Grafana admin password
# - Prometheus authentication
# - Alert manager webhook URLs
{% endif %}

# TEMPLATE VARIABLES FOR REFERENCING SECRETS
# Use these in your main variable files to reference vault secrets:

# Example usage in group_vars/all/vars.yml:
# user_details:
#   - name: "{{ discovery_profile.users.current_user }}"
#     password: "{{ vault_user_credentials[discovery_profile.users.current_user].password_hash }}"
#
# dotfiles_repository_url: "{{ vault_repositories.dotfiles.url }}"
# 
# docker_registries:
#   - registry: "registry.hub.docker.com"
#     username: "{{ vault_docker.docker_hub.username }}"
#     password: "{{ vault_docker.docker_hub.password }}"
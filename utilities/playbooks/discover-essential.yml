---
# Streamlined Infrastructure Discovery Playbook  
# Only discovers what basic_setup role can actually replicate
# Runs with proper become privileges

- name: Discover essential configuration for replication
  hosts: all
  gather_facts: true
  become: false
  collections:
    - wolskinet.infrastructure
    - community.general
  
  vars:
    discovery_output_dir: "./discovery-output"
    ansible_playbooks_dir: "./playbooks"
    ansible_inventory_dir: "./inventory"
    
  pre_tasks:
    - name: Create output directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ discovery_output_dir }}"
        - "{{ ansible_inventory_dir }}/host_vars"
        - "{{ ansible_playbooks_dir }}"
      delegate_to: localhost
      run_once: true

    - name: Display discovery target
      ansible.builtin.debug:
        msg:
          - "=== Essential Discovery Starting ==="
          - "Target: {{ inventory_hostname }}"
          - "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "Architecture: {{ ansible_architecture }}"
          - "Focus: Only scanning what basic_setup can replicate"

  tasks:
    # 1. Package Discovery (Core requirement - only explicitly installed)
    - name: Get explicitly installed packages (Arch Linux)
      ansible.builtin.command: pacman -Qqe
      register: pacman_packages
      become: false
      changed_when: false
      when: ansible_distribution == "Archlinux"
      tags: packages
      
    - name: Get explicitly installed packages (Debian/Ubuntu)
      ansible.builtin.command: apt-mark showmanual
      register: dpkg_packages
      become: false
      changed_when: false
      failed_when: false
      when: ansible_os_family == "Debian"
      tags: packages
      
    - name: Get explicitly installed packages (RedHat/CentOS)
      ansible.builtin.command: dnf history userinstalled
      register: rpm_packages
      become: false
      changed_when: false
      failed_when: false
      when: ansible_os_family == "RedHat"
      tags: packages

    # 2. AUR Package Discovery (Arch Linux)
    - name: Check for AUR helpers and get AUR packages
      block:
        - name: Try paru for AUR packages
          ansible.builtin.command: paru -Qm
          register: aur_packages_paru
          become: false
          changed_when: false
          failed_when: false

        - name: Try yay for AUR packages (fallback)
          ansible.builtin.command: yay -Qm  
          register: aur_packages_yay
          become: false
          changed_when: false
          failed_when: false
          when: aur_packages_paru.rc != 0

        - name: Set AUR packages result
          ansible.builtin.set_fact:
            aur_packages_result: "{{ aur_packages_paru if aur_packages_paru.rc == 0 else aur_packages_yay }}"
      when: ansible_distribution == "Archlinux"
      tags: aur

    # 3. Homebrew Discovery (macOS)
    - name: Get Homebrew packages
      block:
        - name: Check for Homebrew
          ansible.builtin.stat:
            path: "{{ item }}"
          register: homebrew_paths
          loop:
            - /opt/homebrew/bin/brew
            - /usr/local/bin/brew

        - name: Get active Homebrew path
          ansible.builtin.set_fact:
            homebrew_path: "{{ item.item }}"
          loop: "{{ homebrew_paths.results }}"
          when: item.stat.exists

        - name: Get Homebrew formulae
          ansible.builtin.command: "{{ homebrew_path }} list --formulae"
          register: homebrew_packages
          become: false
          changed_when: false
          when: homebrew_path is defined

        - name: Get Homebrew casks
          ansible.builtin.command: "{{ homebrew_path }} list --casks"
          register: homebrew_casks
          become: false  
          changed_when: false
          when: homebrew_path is defined
      when: ansible_os_family == "Darwin"
      tags: homebrew

    # 4. Python packages (user-installed only)
    - name: Get user pip packages
      ansible.builtin.shell: |
        if command -v pip3 >/dev/null 2>&1; then
          pip3 list --user --format=freeze 2>/dev/null || true
        elif command -v pip >/dev/null 2>&1; then
          pip list --user --format=freeze 2>/dev/null || true
        fi
      register: pip_packages
      become: false
      changed_when: false
      failed_when: false
      tags: python

    # 5. Node packages (global npm packages only, not system packages)
    - name: Get global npm packages
      ansible.builtin.shell: |
        if command -v npm >/dev/null 2>&1; then
          # Get global packages, excluding npm itself and system packages
          npm list -g --depth=0 --parseable 2>/dev/null | grep -v '/npm$' || true
        fi
      register: npm_packages
      become: false
      changed_when: false
      failed_when: false
      tags: nodejs

    # 6. User information (what basic_setup manages)
    - name: Get current user information
      ansible.builtin.command: "whoami"
      register: current_user
      changed_when: false
      tags: users

    - name: Get user shell information  
      ansible.builtin.command: "getent passwd {{ current_user.stdout }}"
      register: user_info
      changed_when: false
      when: current_user.stdout is defined
      tags: users

    # 7. Shell information
    - name: Get user shell
      ansible.builtin.set_fact:
        user_shell: "{{ user_info.stdout.split(':')[-1] }}"
      when: user_info is defined and user_info.stdout is defined
      tags: users

    # 8. Basic system info for replication
    - name: Check if Docker is installed
      ansible.builtin.stat:
        path: /usr/bin/docker
      register: docker_installed
      tags: docker

    # 9. Dotfiles detection (if basic_setup manages dotfiles)
    - name: Check for dotfiles directory
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.dotfiles"
      register: dotfiles_dir
      become: false
      tags: dotfiles

    - name: Get dotfiles git info
      ansible.builtin.command: git -C {{ ansible_env.HOME }}/.dotfiles remote get-url origin
      register: dotfiles_remote
      become: false
      changed_when: false
      failed_when: false
      when: dotfiles_dir.stat.exists
      tags: dotfiles

  post_tasks:
    # Build minimal discovery profile with only essential data
    - name: Build essential discovery profile
      ansible.builtin.set_fact:
        discovery_profile:
          hostname: "{{ inventory_hostname }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"
          system:
            os_family: "{{ ansible_os_family }}"
            distribution: "{{ ansible_distribution }}"
            distribution_version: "{{ ansible_distribution_version }}"
            architecture: "{{ ansible_architecture }}"
            total_memory: "{{ ansible_memtotal_mb }}"
            cpu_cores: "{{ ansible_processor_vcpus }}"
          network:
            default_ipv4: "{{ ansible_default_ipv4 | default({}) }}"
            fqdn: "{{ ansible_fqdn }}"
          packages:
            installed: >-
              {%- if ansible_distribution == "Archlinux" and pacman_packages is defined -%}
              {{ pacman_packages.stdout_lines | default([]) }}
              {%- elif ansible_os_family == "Debian" and dpkg_packages is defined -%}
              {{ dpkg_packages.stdout_lines | default([]) }}
              {%- elif ansible_os_family == "RedHat" and rpm_packages is defined -%}
              {{ rpm_packages.stdout_lines | default([]) }}
              {%- else -%}
              []
              {%- endif -%}
            homebrew_formulae: "{{ homebrew_packages.stdout_lines | default([]) }}"
            homebrew_casks: "{{ homebrew_casks.stdout_lines | default([]) }}"
            aur_packages: "{{ aur_packages_result.stdout_lines | default([]) }}"
            pip_packages: "{{ pip_packages.stdout_lines | default([]) }}"
            npm_packages: "{{ npm_packages.stdout_lines | default([]) }}"
          docker:
            installed: "{{ docker_installed.stat.exists | default(false) }}"
          users:
            current_user: "{{ current_user.stdout | default(ansible_env.USER) }}"
            current_shell: "{{ user_shell | default('/bin/bash') }}"
          dotfiles:
            detected: "{{ dotfiles_dir.stat.exists | default(false) }}"
            remote_url: "{{ dotfiles_remote.stdout | default('') }}"

    # Generate essential files
    - name: Generate host variables
      ansible.builtin.template:
        src: "../../roles/discovery/templates/discovered-host-vars.yml.j2"
        dest: "{{ ansible_inventory_dir }}/host_vars/{{ inventory_hostname }}.yml"
        backup: true
      delegate_to: localhost

    - name: Generate replication playbook
      ansible.builtin.template:
        src: "../../roles/discovery/templates/discovered-playbook.yml.j2"
        dest: "{{ ansible_playbooks_dir }}/deploy-{{ inventory_hostname }}.yml"
      delegate_to: localhost

    - name: Save discovery profile
      ansible.builtin.copy:
        content: "{{ discovery_profile | to_nice_yaml }}"
        dest: "{{ discovery_output_dir }}/{{ inventory_hostname }}-profile.yml"
      delegate_to: localhost

    - name: Display completion
      ansible.builtin.debug:
        msg:
          - "✅ Essential discovery completed for {{ inventory_hostname }}!"
          - ""
          - "📦 Discovered:"
          - "   • System packages: {{ discovery_profile.packages.installed | length }}"
          - "   • AUR packages: {{ aur_packages_result.stdout_lines | default([]) | length }} (Arch only)"
          - "   • Homebrew packages: {{ homebrew_packages.stdout_lines | default([]) | length }} (macOS only)" 
          - "   • Docker: {{ 'installed' if docker_installed.stat.exists else 'not found' }}"
          - "   • Dotfiles: {{ 'detected' if dotfiles_dir.stat.exists else 'not found' }}"
          - ""
          - "📁 Generated files:"
          - "   • inventory/host_vars/{{ inventory_hostname }}.yml"
          - "   • playbooks/deploy-{{ inventory_hostname }}.yml"
          - ""
          - "▶️  Next: ansible-playbook playbooks/deploy-{{ inventory_hostname }}.yml"
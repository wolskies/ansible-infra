---
# Infrastructure Discovery Playbook
# Scans target machines and generates configuration files for replication
# Tags: always, setup, discovery, packages, docker, users, security, network, 
#       desktop, development, config-files, generation, summary

- name: Discover infrastructure configuration
  hosts: all
  gather_facts: true
  collections:
    - wolskinet.infrastructure
    - community.general
    - community.docker
  
  vars:
    discovery_output_dir: "./discovered-infrastructure"
    generate_configs: true
    include_sensitive: false  # Set to true to include user hashes (use vault!)
    discovery_timeout: 300  # 5 minutes timeout for discovery tasks
    
  pre_tasks:
    - name: Discovery environment setup
      block:
        - name: Create discovery output directory
          ansible.builtin.file:
            path: "{{ discovery_output_dir }}"
            state: directory
            mode: '0755'
          delegate_to: localhost
          run_once: true
          tags:
            - always
            - setup
            - directories

        - name: Create discovery subdirectories
          ansible.builtin.file:
            path: "{{ discovery_output_dir }}/{{ item }}"
            state: directory
            mode: '0755'
          loop:
            - host_vars
            - group_vars
            - playbooks
            - reports
          delegate_to: localhost
          run_once: true
          tags:
            - setup
            - directories

        - name: Display discovery target
          ansible.builtin.debug:
            msg:
              - "=== Infrastructure Discovery Starting ==="
              - "Target: {{ inventory_hostname }}"
              - "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
              - "Architecture: {{ ansible_architecture }}"
              - "Python: {{ ansible_python_version }}"
              - "Output: {{ discovery_output_dir }}"
              - "Include sensitive: {{ include_sensitive }}"
          tags:
            - always
            - setup
            - debug

      rescue:
        - name: Handle discovery setup errors
          ansible.builtin.debug:
            msg: "Discovery setup failed, check permissions and paths"
          tags:
            - setup
            - error-handling

      tags:
        - always
        - setup

  tasks:
    # System Package Discovery
    - name: System package discovery
      block:
        - name: Gather package facts
          ansible.builtin.package_facts:
            manager: auto
          become: true
          timeout: "{{ discovery_timeout }}"
          tags:
            - packages
            - system-info
            - discovery

        - name: Gather service facts  
          ansible.builtin.service_facts:
          become: true
          timeout: "{{ discovery_timeout }}"
          tags:
            - services
            - system-info
            - discovery

        - name: Display package discovery progress
          ansible.builtin.debug:
            msg:
              - "Package discovery completed"
              - "Total packages found: {{ ansible_facts.packages.keys() | length }}"
              - "Package manager: {{ ansible_pkg_mgr }}"
          tags:
            - packages
            - debug
            - progress

      rescue:
        - name: Handle package discovery errors
          ansible.builtin.debug:
            msg: "Package discovery failed, continuing with partial data"
          tags:
            - packages
            - error-handling

      tags:
        - packages
        - discovery

    # Docker Discovery
    - name: Docker environment discovery
      block:
        - name: Check for Docker installation
          ansible.builtin.stat:
            path: /usr/bin/docker
          register: docker_installed
          tags:
            - docker
            - discovery
            - check-installation

        - name: Docker detailed information gathering
          block:
            - name: Get Docker version
              ansible.builtin.command: docker --version
              register: docker_version_output
              changed_when: false
              timeout: 30
              tags:
                - docker
                - version
                - commands

            - name: Get Docker system information
              community.docker.docker_host_info:
              register: docker_host_info
              become: true
              timeout: 60
              tags:
                - docker
                - system-info
                - host-info

            - name: List all Docker containers
              community.docker.docker_container_info:
              register: docker_containers
              become: true
              timeout: 60
              tags:
                - docker
                - containers
                - workloads

            - name: List Docker networks
              community.docker.docker_network_info:
              register: docker_networks
              become: true
              timeout: 30
              tags:
                - docker
                - networks
                - networking

            - name: List Docker volumes
              community.docker.docker_volume_info:
              register: docker_volumes
              become: true
              timeout: 30
              tags:
                - docker
                - volumes
                - storage

            - name: Get Docker Compose information
              ansible.builtin.command: docker-compose --version
              register: docker_compose_version
              changed_when: false
              failed_when: false
              timeout: 15
              tags:
                - docker
                - compose
                - version

            - name: Display Docker discovery progress
              ansible.builtin.debug:
                msg:
                  - "Docker discovery completed"
                  - "Version: {{ docker_version_output.stdout | default('unknown') }}"
                  - "Containers: {{ docker_containers.containers | default([]) | length }}"
                  - "Networks: {{ docker_networks.networks | default([]) | length }}"
                  - "Volumes: {{ docker_volumes.volumes | default([]) | length }}"
                  - "Compose: {{ 'available' if docker_compose_version.rc == 0 else 'not available' }}"
              tags:
                - docker
                - debug
                - progress

          when: docker_installed.stat.exists
          rescue:
            - name: Handle Docker discovery errors
              ansible.builtin.debug:
                msg: "Docker discovery encountered errors, Docker may be installed but not running"
              tags:
                - docker
                - error-handling

      tags:
        - docker
        - discovery

    # User and Security Configuration Discovery
    - name: User and security discovery
      block:
        - name: Get system users
          ansible.builtin.getent:
            database: passwd
          become: true
          timeout: 30
          tags:
            - users
            - system-info
            - discovery

        - name: Get system groups
          ansible.builtin.getent:
            database: group
          become: true
          timeout: 30
          tags:
            - users
            - groups
            - system-info

        - name: Check SSH configuration
          ansible.builtin.slurp:
            src: /etc/ssh/sshd_config
          register: sshd_config
          become: true
          failed_when: false
          tags:
            - security
            - ssh
            - config-files

        - name: Check sudo configuration
          ansible.builtin.stat:
            path: /etc/sudoers
          register: sudoers_file
          become: true
          tags:
            - security
            - sudo
            - permissions

        - name: Check firewall status (UFW)
          ansible.builtin.command: ufw status verbose
          register: ufw_status
          become: true
          failed_when: false
          changed_when: false
          when: ansible_os_family == "Debian"
          tags:
            - security
            - firewall
            - ufw

        - name: Check firewall status (firewalld)
          ansible.builtin.command: firewall-cmd --state
          register: firewalld_status
          become: true
          failed_when: false
          changed_when: false
          when: ansible_os_family == "RedHat" or ansible_distribution == "Archlinux"
          tags:
            - security
            - firewall
            - firewalld

        - name: Check for fail2ban
          ansible.builtin.service_facts:
          register: security_services
          become: true
          tags:
            - security
            - services
            - fail2ban

        - name: Display security discovery progress
          ansible.builtin.debug:
            msg:
              - "Security discovery completed"
              - "Users found: {{ ansible_facts.getent_passwd.keys() | length }}"
              - "SSH config: {{ 'found' if sshd_config.content is defined else 'not accessible' }}"
              - "UFW status: {{ ufw_status.stdout.split('\n')[0] | default('not checked') if ansible_os_family == 'Debian' else 'not applicable' }}"
              - "Firewalld: {{ firewalld_status.stdout | default('not checked') if (ansible_os_family == 'RedHat' or ansible_distribution == 'Archlinux') else 'not applicable' }}"
          tags:
            - security
            - debug
            - progress

      rescue:
        - name: Handle security discovery errors
          ansible.builtin.debug:
            msg: "Security discovery encountered errors, continuing with available data"
          tags:
            - security
            - error-handling

      tags:
        - users
        - security
        - discovery

    # Desktop Environment Detection
    - name: Desktop environment discovery
      block:
        - name: Check for desktop environment
          ansible.builtin.command: echo $XDG_CURRENT_DESKTOP
          register: desktop_environment
          failed_when: false
          changed_when: false
          become: false
          tags:
            - desktop
            - gui
            - environment

        - name: Check for X11 session
          ansible.builtin.command: echo $DISPLAY
          register: x11_display
          failed_when: false
          changed_when: false
          become: false
          tags:
            - desktop
            - x11
            - display

        - name: Check for Wayland session
          ansible.builtin.command: echo $WAYLAND_DISPLAY
          register: wayland_display
          failed_when: false
          changed_when: false
          become: false
          tags:
            - desktop
            - wayland
            - display

        - name: Check display manager services
          ansible.builtin.service_facts:
          become: true
          tags:
            - desktop
            - services
            - display-manager

        - name: Identify common desktop environments
          ansible.builtin.stat:
            path: "{{ item }}"
          register: desktop_files
          loop:
            - /usr/share/xsessions
            - /usr/share/wayland-sessions
            - /usr/bin/gnome-shell
            - /usr/bin/plasma-desktop
            - /usr/bin/xfce4-session
            - /usr/bin/mate-session
          tags:
            - desktop
            - detection
            - files

        - name: Display desktop discovery progress
          ansible.builtin.debug:
            msg:
              - "Desktop discovery completed"
              - "XDG Desktop: {{ desktop_environment.stdout | default('none') }}"
              - "X11 Display: {{ x11_display.stdout | default('not set') }}"
              - "Wayland Display: {{ wayland_display.stdout | default('not set') }}"
              - "Has GUI: {{ (desktop_environment.stdout | default('')) != '' or (x11_display.stdout | default('')) != '' or (wayland_display.stdout | default('')) != '' }}"
          tags:
            - desktop
            - debug
            - progress

      rescue:
        - name: Handle desktop discovery errors
          ansible.builtin.debug:
            msg: "Desktop environment discovery failed, assuming headless system"
          tags:
            - desktop
            - error-handling

      tags:
        - desktop
        - discovery

    # Network Configuration Discovery
    - name: Network configuration discovery
      block:
        - name: Get detailed network interfaces
          ansible.builtin.setup:
            filter: ansible_*
          register: network_facts
          tags:
            - network
            - interfaces
            - facts

        - name: Get routing information
          ansible.builtin.command: ip route show
          register: routing_table
          changed_when: false
          failed_when: false
          become: true
          tags:
            - network
            - routing
            - ip-config

        - name: Get default route
          ansible.builtin.command: ip route show default
          register: default_route
          changed_when: false
          failed_when: false
          tags:
            - network
            - routing
            - default-route

        - name: Check DNS configuration
          ansible.builtin.slurp:
            src: /etc/resolv.conf
          register: dns_config
          failed_when: false
          tags:
            - network
            - dns
            - config-files

        - name: Get network listening ports
          ansible.builtin.command: ss -tuln
          register: listening_ports
          changed_when: false
          failed_when: false
          become: true
          tags:
            - network
            - ports
            - services

        - name: Display network discovery progress
          ansible.builtin.debug:
            msg:
              - "Network discovery completed"
              - "Interfaces: {{ ansible_interfaces | default([]) | length }}"
              - "Primary IP: {{ ansible_default_ipv4.address | default('unknown') }}"
              - "Default gateway: {{ ansible_default_ipv4.gateway | default('unknown') }}"
              - "DNS servers: {{ (dns_config.content | b64decode).split('\n') | select('match', '^nameserver') | list | length if dns_config.content is defined else 'unknown' }}"
          tags:
            - network
            - debug
            - progress

      rescue:
        - name: Handle network discovery errors
          ansible.builtin.debug:
            msg: "Network discovery encountered errors, continuing with basic network facts"
          tags:
            - network
            - error-handling

      tags:
        - network
        - discovery

    # Development Tools and Application Discovery
    - name: Development environment discovery
      block:
        - name: Check for common development tools
          ansible.builtin.stat:
            path: "{{ item }}"
          register: dev_tools
          loop:
            - /usr/bin/git
            - /usr/bin/docker
            - /usr/bin/python3
            - /usr/bin/python
            - /usr/bin/node
            - /usr/bin/npm
            - /usr/bin/yarn
            - /usr/bin/code
            - /usr/local/bin/code
            - /Applications/Visual Studio Code.app  # macOS
            - /usr/bin/vim
            - /usr/bin/nvim
            - /usr/bin/emacs
            - /usr/bin/java
            - /usr/bin/mvn
            - /usr/bin/gradle
            - /usr/bin/go
            - /usr/bin/rust
            - /usr/bin/cargo
          tags:
            - development
            - tools
            - discovery

        - name: Check for package managers
          ansible.builtin.stat:
            path: "{{ item }}"
          register: package_managers
          loop:
            - /usr/bin/pip
            - /usr/bin/pip3
            - /usr/bin/npm
            - /usr/bin/yarn
            - /usr/bin/gem
            - /usr/bin/composer
            - /opt/homebrew/bin/brew  # macOS ARM
            - /usr/local/bin/brew     # macOS Intel
          tags:
            - development
            - package-managers
            - tools

        - name: Check for IDE and editor configurations
          ansible.builtin.stat:
            path: "{{ ansible_env.HOME }}/{{ item }}"
          register: ide_configs
          become: false
          loop:
            - .vscode
            - .vim
            - .config/nvim
            - .emacs.d
            - .config/Code
          tags:
            - development
            - config-files
            - editors

        - name: Display development tools progress
          ansible.builtin.debug:
            msg:
              - "Development tools discovery completed"
              - "Tools found: {{ dev_tools.results | selectattr('stat.exists') | list | length }}"
              - "Package managers: {{ package_managers.results | selectattr('stat.exists') | list | length }}"
              - "IDE configs: {{ ide_configs.results | selectattr('stat.exists') | list | length }}"
          tags:
            - development
            - debug
            - progress

      rescue:
        - name: Handle development discovery errors
          ansible.builtin.debug:
            msg: "Development tools discovery failed, continuing with available data"
          tags:
            - development
            - error-handling

      tags:
        - development
        - discovery

    # Configuration Files and Package Manager Discovery
    - name: Configuration and package manager discovery
      block:
        - name: Check for dotfiles and shell configurations
          ansible.builtin.stat:
            path: "{{ ansible_env.HOME }}/{{ item }}"
          register: config_files
          become: false
          loop:
            - .dotfiles
            - .config
            - .bashrc
            - .zshrc
            - .profile
            - .bash_profile
            - .gitconfig
            - .ssh/config
          tags:
            - config-files
            - dotfiles
            - shell-config

        - name: Check for common application configs
          ansible.builtin.stat:
            path: "{{ ansible_env.HOME }}/{{ item }}"
          register: app_configs
          become: false
          loop:
            - .tmux.conf
            - .screenrc
            - .Xresources
            - .xinitrc
            - .config/i3
            - .config/awesome
            - .config/openbox
          tags:
            - config-files
            - app-config
            - window-managers

        - name: macOS Homebrew discovery
          block:
            - name: Check for Homebrew installation paths
              ansible.builtin.stat:
                path: "{{ item }}"
              register: homebrew_paths
              loop:
                - /opt/homebrew/bin/brew  # ARM Mac
                - /usr/local/bin/brew     # Intel Mac
              tags:
                - homebrew
                - macos
                - package-managers

            - name: Determine active Homebrew path
              ansible.builtin.set_fact:
                homebrew_path: "{{ item.item }}"
              loop: "{{ homebrew_paths.results }}"
              when: item.stat.exists
              tags:
                - homebrew
                - macos
                - variables

            - name: Get Homebrew packages (formulae)
              ansible.builtin.command: "{{ homebrew_path }} list --formulae"
              register: homebrew_packages
              changed_when: false
              become: false
              when: homebrew_path is defined
              failed_when: false
              timeout: 60
              tags:
                - homebrew
                - packages
                - formulae

            - name: Get Homebrew casks
              ansible.builtin.command: "{{ homebrew_path }} list --casks"
              register: homebrew_casks
              changed_when: false
              become: false
              when: homebrew_path is defined
              failed_when: false
              timeout: 60
              tags:
                - homebrew
                - packages
                - casks

            - name: Get Homebrew services
              ansible.builtin.command: "{{ homebrew_path }} services list"
              register: homebrew_services
              changed_when: false
              become: false
              when: homebrew_path is defined
              failed_when: false
              timeout: 30
              tags:
                - homebrew
                - services
                - macos

          when: ansible_os_family == "Darwin"
          rescue:
            - name: Handle Homebrew discovery errors
              ansible.builtin.debug:
                msg: "Homebrew discovery failed, may not be installed or accessible"
              tags:
                - homebrew
                - error-handling

        - name: Display configuration discovery progress
          ansible.builtin.debug:
            msg:
              - "Configuration discovery completed"
              - "Config files found: {{ config_files.results | selectattr('stat.exists') | list | length }}"
              - "App configs found: {{ app_configs.results | selectattr('stat.exists') | list | length }}"
              - "Homebrew packages: {{ homebrew_packages.stdout_lines | default([]) | length if ansible_os_family == 'Darwin' else 'N/A' }}"
              - "Homebrew casks: {{ homebrew_casks.stdout_lines | default([]) | length if ansible_os_family == 'Darwin' else 'N/A' }}"
          tags:
            - config-files
            - debug
            - progress

      rescue:
        - name: Handle configuration discovery errors
          ansible.builtin.debug:
            msg: "Configuration discovery encountered errors, continuing with available data"
          tags:
            - config-files
            - error-handling

      tags:
        - config-files
        - discovery

    # Repository and Package Source Discovery
    - name: Repository and package source discovery
      block:
        - name: APT repository discovery (Debian/Ubuntu)
          block:
            - name: Check main APT sources
              ansible.builtin.slurp:
                src: /etc/apt/sources.list
              register: apt_main_sources
              become: true
              failed_when: false
              tags:
                - repositories
                - apt
                - sources

            - name: Find additional APT sources
              ansible.builtin.find:
                paths: ["/etc/apt/sources.list.d"]
                patterns: "*.list"
              register: apt_additional_sources
              become: true
              tags:
                - repositories
                - apt
                - additional-sources

            - name: Read additional APT source files
              ansible.builtin.slurp:
                src: "{{ item.path }}"
              register: apt_source_contents
              loop: "{{ apt_additional_sources.files }}"
              become: true
              failed_when: false
              tags:
                - repositories
                - apt
                - source-content

            - name: Check for PPA keys
              ansible.builtin.find:
                paths: ["/etc/apt/trusted.gpg.d", "/usr/share/keyrings"]
                patterns: "*.gpg"
              register: apt_keys
              become: true
              tags:
                - repositories
                - apt
                - keys

          when: ansible_os_family == "Debian"
          rescue:
            - name: Handle APT repository discovery errors
              ansible.builtin.debug:
                msg: "APT repository discovery failed, continuing with available data"
              tags:
                - repositories
                - error-handling

        - name: AUR and pacman repository discovery (Arch Linux)
          block:
            - name: Check pacman configuration
              ansible.builtin.slurp:
                src: /etc/pacman.conf
              register: pacman_config
              become: true
              failed_when: false
              tags:
                - repositories
                - pacman
                - arch

            - name: Check for AUR helpers
              ansible.builtin.stat:
                path: "{{ item }}"
              register: aur_helpers
              loop:
                - /usr/bin/yay
                - /usr/bin/paru
                - /usr/bin/pikaur
                - /usr/bin/trizen
              tags:
                - repositories
                - aur
                - helpers

            - name: Get AUR packages (if yay is available)
              ansible.builtin.command: yay -Qm
              register: aur_packages
              become: false
              changed_when: false
              failed_when: false
              when: aur_helpers.results | selectattr('item', 'equalto', '/usr/bin/yay') | selectattr('stat.exists') | list
              tags:
                - repositories
                - aur
                - packages

            - name: Get pacman mirror list
              ansible.builtin.slurp:
                src: /etc/pacman.d/mirrorlist
              register: pacman_mirrorlist
              become: true
              failed_when: false
              tags:
                - repositories
                - pacman
                - mirrors

          when: ansible_distribution == "Archlinux"
          rescue:
            - name: Handle pacman repository discovery errors
              ansible.builtin.debug:
                msg: "Pacman repository discovery failed, continuing with available data"
              tags:
                - repositories
                - error-handling

        - name: Homebrew tap discovery (macOS)
          block:
            - name: Get Homebrew taps
              ansible.builtin.command: "{{ homebrew_path }} tap"
              register: homebrew_taps
              changed_when: false
              become: false
              when: homebrew_path is defined
              failed_when: false
              timeout: 30
              tags:
                - repositories
                - homebrew
                - taps

            - name: Get Homebrew tap info
              ansible.builtin.command: "{{ homebrew_path }} tap-info {{ item }}"
              register: homebrew_tap_info
              loop: "{{ homebrew_taps.stdout_lines | default([]) }}"
              changed_when: false
              become: false
              when: 
                - homebrew_path is defined
                - homebrew_taps.stdout_lines is defined
              failed_when: false
              timeout: 15
              tags:
                - repositories
                - homebrew
                - tap-info

          when: ansible_os_family == "Darwin"
          rescue:
            - name: Handle Homebrew tap discovery errors
              ansible.builtin.debug:
                msg: "Homebrew tap discovery failed, continuing with available data"
              tags:
                - repositories
                - error-handling

        - name: Display repository discovery progress
          ansible.builtin.debug:
            msg:
              - "Repository discovery completed"
              - "APT sources: {{ (apt_additional_sources.files | default([])) | length if ansible_os_family == 'Debian' else 'N/A' }}"
              - "AUR helper: {{ 'detected' if (aur_helpers.results | default([]) | selectattr('stat.exists') | list | length > 0) else 'not found' if ansible_distribution == 'Archlinux' else 'N/A' }}"
              - "Homebrew taps: {{ homebrew_taps.stdout_lines | default([]) | length if ansible_os_family == 'Darwin' else 'N/A' }}"
          tags:
            - repositories
            - debug
            - progress

      rescue:
        - name: Handle repository discovery errors
          ansible.builtin.debug:
            msg: "Repository discovery encountered errors, continuing with available data"
          tags:
            - repositories
            - error-handling

      tags:
        - repositories
        - discovery

    # Service Configuration Discovery
    - name: Service configuration discovery
      block:
        - name: Detect critical service configurations
          ansible.builtin.stat:
            path: "{{ item.path }}"
          register: service_configs
          become: true
          loop:
            - { path: "/etc/nginx/nginx.conf", service: "nginx", type: "web_server" }
            - { path: "/etc/apache2/apache2.conf", service: "apache2", type: "web_server" }
            - { path: "/etc/httpd/conf/httpd.conf", service: "httpd", type: "web_server" }
            - { path: "/etc/mysql/mysql.conf.d", service: "mysql", type: "database" }
            - { path: "/etc/postgresql", service: "postgresql", type: "database" }
            - { path: "/etc/redis/redis.conf", service: "redis", type: "cache" }
            - { path: "/etc/memcached.conf", service: "memcached", type: "cache" }
            - { path: "/etc/fail2ban/jail.conf", service: "fail2ban", type: "security" }
            - { path: "/etc/ufw/ufw.conf", service: "ufw", type: "firewall" }
            - { path: "/etc/docker/daemon.json", service: "docker", type: "container" }
          tags:
            - service-configs
            - critical-services
            - discovery

        - name: Read service configuration files
          ansible.builtin.slurp:
            src: "{{ item.item.path }}"
          register: service_config_contents
          loop: "{{ service_configs.results }}"
          when: 
            - item.stat.exists
            - item.item.service in (discovery_profile.services.running | default([]))
          become: true
          failed_when: false
          tags:
            - service-configs
            - config-content
            - files

        - name: Discover nginx sites (if nginx is running)
          block:
            - name: Find nginx site configurations
              ansible.builtin.find:
                paths: ["/etc/nginx/sites-enabled", "/etc/nginx/sites-available", "/etc/nginx/conf.d"]
                patterns: ["*.conf", "*"]
                file_type: file
              register: nginx_sites
              become: true
              tags:
                - nginx
                - sites
                - web-config

            - name: Read nginx site configurations
              ansible.builtin.slurp:
                src: "{{ item.path }}"
              register: nginx_site_contents
              loop: "{{ nginx_sites.files[:5] }}"  # Limit to first 5 sites
              become: true
              failed_when: false
              tags:
                - nginx
                - site-content
                - config-files

          when: "'nginx' in (discovery_profile.services.running | default([]))"
          rescue:
            - name: Handle nginx configuration discovery errors
              ansible.builtin.debug:
                msg: "Nginx configuration discovery failed"
              tags:
                - nginx
                - error-handling

        - name: Discover apache virtual hosts (if apache is running)
          block:
            - name: Find apache site configurations
              ansible.builtin.find:
                paths: ["/etc/apache2/sites-enabled", "/etc/apache2/sites-available", "/etc/httpd/conf.d"]
                patterns: ["*.conf", "*.vhost"]
                file_type: file
              register: apache_sites
              become: true
              tags:
                - apache
                - vhosts
                - web-config

            - name: Read apache site configurations
              ansible.builtin.slurp:
                src: "{{ item.path }}"
              register: apache_site_contents
              loop: "{{ apache_sites.files[:5] }}"  # Limit to first 5 sites
              become: true
              failed_when: false
              tags:
                - apache
                - vhost-content
                - config-files

          when: "'apache2' in (discovery_profile.services.running | default([])) or 'httpd' in (discovery_profile.services.running | default([]))"
          rescue:
            - name: Handle apache configuration discovery errors
              ansible.builtin.debug:
                msg: "Apache configuration discovery failed"
              tags:
                - apache
                - error-handling

        - name: Discover systemd service unit files
          block:
            - name: Find custom systemd services
              ansible.builtin.find:
                paths: ["/etc/systemd/system", "/usr/local/lib/systemd/system"]
                patterns: "*.service"
                file_type: file
              register: custom_systemd_services
              become: true
              tags:
                - systemd
                - services
                - unit-files

            - name: Read custom systemd service files
              ansible.builtin.slurp:
                src: "{{ item.path }}"
              register: systemd_service_contents
              loop: "{{ custom_systemd_services.files[:10] }}"  # Limit to first 10 services
              become: true
              failed_when: false
              tags:
                - systemd
                - service-content
                - unit-files

          when: ansible_service_mgr == "systemd"
          rescue:
            - name: Handle systemd service discovery errors
              ansible.builtin.debug:
                msg: "Systemd service discovery failed"
              tags:
                - systemd
                - error-handling

        - name: Display service configuration discovery progress
          ansible.builtin.debug:
            msg:
              - "Service configuration discovery completed"
              - "Service configs found: {{ service_configs.results | selectattr('stat.exists') | list | length }}"
              - "Nginx sites: {{ nginx_sites.files | default([]) | length if 'nginx' in (discovery_profile.services.running | default([])) else 'N/A' }}"
              - "Apache sites: {{ apache_sites.files | default([]) | length if ('apache2' in (discovery_profile.services.running | default([])) or 'httpd' in (discovery_profile.services.running | default([]))) else 'N/A' }}"
              - "Custom systemd services: {{ custom_systemd_services.files | default([]) | length if ansible_service_mgr == 'systemd' else 'N/A' }}"
          tags:
            - service-configs
            - debug
            - progress

      rescue:
        - name: Handle service configuration discovery errors
          ansible.builtin.debug:
            msg: "Service configuration discovery encountered errors, continuing with available data"
          tags:
            - service-configs
            - error-handling

      tags:
        - service-configs
        - discovery

    # Enhanced Dotfiles Repository Discovery
    - name: Enhanced dotfiles repository discovery
      block:
        - name: Get dotfiles repository information
          block:
            - name: Check if dotfiles is a git repository
              ansible.builtin.stat:
                path: "{{ ansible_env.HOME }}/.dotfiles/.git"
              register: dotfiles_git_dir
              become: false
              tags:
                - dotfiles
                - git
                - repository

            - name: Get dotfiles repository URL
              ansible.builtin.command: git -C {{ ansible_env.HOME }}/.dotfiles remote get-url origin
              register: dotfiles_remote_url
              become: false
              changed_when: false
              failed_when: false
              when: dotfiles_git_dir.stat.exists
              tags:
                - dotfiles
                - git
                - remote-url

            - name: Get dotfiles repository branch
              ansible.builtin.command: git -C {{ ansible_env.HOME }}/.dotfiles branch --show-current
              register: dotfiles_current_branch
              become: false
              changed_when: false
              failed_when: false
              when: dotfiles_git_dir.stat.exists
              tags:
                - dotfiles
                - git
                - branch

            - name: Check for dotfiles management tools
              ansible.builtin.stat:
                path: "{{ ansible_env.HOME }}/.dotfiles/{{ item }}"
              register: dotfiles_tools
              become: false
              loop:
                - "Makefile"
                - "install.sh"
                - "bootstrap.sh"
                - "setup.sh"
                - "stow"
                - ".stow-local-ignore"
              tags:
                - dotfiles
                - management-tools
                - setup

          when: config_files.results | selectattr('item', 'equalto', '.dotfiles') | selectattr('stat.exists') | list
          rescue:
            - name: Handle dotfiles repository discovery errors
              ansible.builtin.debug:
                msg: "Dotfiles repository discovery failed"
              tags:
                - dotfiles
                - error-handling

        - name: Detect user's preferred shell
          block:
            - name: Get current user shell information
              ansible.builtin.command: "getent passwd {{ ansible_user }}"
              register: user_shell_info
              changed_when: false
              become: true
              tags:
                - shell
                - user-info
                - detection

            - name: Parse preferred shell
              ansible.builtin.set_fact:
                preferred_shell: "{{ user_shell_info.stdout.split(':')[-1] | basename }}"
              when: user_shell_info.stdout is defined
              tags:
                - shell
                - parsing
                - variables

            - name: Check shell configuration files
              ansible.builtin.stat:
                path: "{{ ansible_env.HOME }}/{{ item }}"
              register: shell_configs
              become: false
              loop:
                - ".bashrc"
                - ".bash_profile" 
                - ".zshrc"
                - ".zsh_profile"
                - ".profile"
                - ".config/fish/config.fish"
              tags:
                - shell
                - config-files
                - detection

          rescue:
            - name: Handle shell discovery errors
              ansible.builtin.debug:
                msg: "Shell discovery failed"
              tags:
                - shell
                - error-handling

        - name: Display enhanced dotfiles discovery progress
          ansible.builtin.debug:
            msg:
              - "Enhanced dotfiles discovery completed"
              - "Dotfiles repo URL: {{ dotfiles_remote_url.stdout | default('not a git repo') }}"
              - "Current branch: {{ dotfiles_current_branch.stdout | default('unknown') }}"
              - "Management tools: {{ dotfiles_tools.results | selectattr('stat.exists') | map(attribute='item') | list }}"
              - "Preferred shell: {{ preferred_shell | default('unknown') }}"
              - "Shell configs found: {{ shell_configs.results | selectattr('stat.exists') | list | length }}"
          tags:
            - dotfiles
            - debug
            - progress

      rescue:
        - name: Handle enhanced dotfiles discovery errors
          ansible.builtin.debug:
            msg: "Enhanced dotfiles discovery encountered errors, continuing with available data"
          tags:
            - dotfiles
            - error-handling

      tags:
        - dotfiles
        - enhanced-discovery

  post_tasks:
    # Generate discovery data structure
    - name: Build discovery profile
      ansible.builtin.set_fact:
        discovery_profile:
          hostname: "{{ inventory_hostname }}"
          system:
            os_family: "{{ ansible_os_family }}"
            distribution: "{{ ansible_distribution }}"
            distribution_version: "{{ ansible_distribution_version }}"
            architecture: "{{ ansible_architecture }}"
            python_version: "{{ ansible_python_version }}"
            total_memory: "{{ ansible_memtotal_mb }}"
            cpu_cores: "{{ ansible_processor_vcpus }}"
          network:
            interfaces: "{{ ansible_interfaces }}"
            default_ipv4: "{{ ansible_default_ipv4 | default({}) }}"
            fqdn: "{{ ansible_fqdn }}"
          packages:
            installed: "{{ ansible_facts.packages | default({}) }}"
            homebrew_formulae: "{{ homebrew_packages.stdout_lines | default([]) }}"
            homebrew_casks: "{{ homebrew_casks.stdout_lines | default([]) }}"
            aur_packages: "{{ aur_packages.stdout_lines | default([]) if ansible_distribution == 'Archlinux' else [] }}"
          services:
            running: "{{ ansible_facts.services | dict2items | selectattr('value.state', 'equalto', 'running') | map(attribute='key') | list }}"
            enabled: "{{ ansible_facts.services | dict2items | selectattr('value.status', 'equalto', 'enabled') | map(attribute='key') | list }}"
          docker:
            installed: "{{ docker_installed.stat.exists | default(false) }}"
            version: "{{ docker_version_output.stdout | default('') }}"
            containers: "{{ docker_containers.containers | default([]) | map(attribute='Config.Image') | list }}"
            networks: "{{ docker_networks.networks | default([]) | map(attribute='Name') | list }}"
            volumes: "{{ docker_volumes.volumes | default([]) | map(attribute='Name') | list }}"
          desktop:
            environment: "{{ desktop_environment.stdout | default('') }}"
            has_gui: "{{ (desktop_environment.stdout | default('')) != '' }}"
          security:
            ufw_status: "{{ ufw_status.stdout | default('') }}"
            firewalld_status: "{{ firewalld_status.stdout | default('') }}"
            ssh_config: "{{ sshd_config.content | default('') | b64decode }}"
          users:
            system_users: "{{ ansible_facts.getent_passwd.keys() | list }}"
            current_user: "{{ ansible_user }}"
          development:
            tools_installed: "{{ dev_tools.results | selectattr('stat.exists') | map(attribute='item') | list }}"
            dotfiles_repo: "{{ config_files.results | selectattr('item', 'equalto', '.dotfiles') | selectattr('stat.exists') | list | length > 0 }}"
            dotfiles_repo_url: "{{ dotfiles_remote_url.stdout | default('') }}"
            dotfiles_branch: "{{ dotfiles_current_branch.stdout | default('') }}"
            dotfiles_tools: "{{ dotfiles_tools.results | default([]) | selectattr('stat.exists') | map(attribute='item') | list }}"
            preferred_shell: "{{ preferred_shell | default('') }}"
            shell_configs: "{{ shell_configs.results | default([]) | selectattr('stat.exists') | map(attribute='item') | list }}"
          repositories:
            apt_sources: "{{ apt_additional_sources.files | default([]) | map(attribute='path') | list if ansible_os_family == 'Debian' else [] }}"
            apt_keys: "{{ apt_keys.files | default([]) | map(attribute='path') | list if ansible_os_family == 'Debian' else [] }}"
            aur_helpers: "{{ aur_helpers.results | default([]) | selectattr('stat.exists') | map(attribute='item') | list if ansible_distribution == 'Archlinux' else [] }}"
            homebrew_taps: "{{ homebrew_taps.stdout_lines | default([]) if ansible_os_family == 'Darwin' else [] }}"
            pacman_config: "{{ pacman_config.content | default('') | b64decode if ansible_distribution == 'Archlinux' else '' }}"
          service_configs:
            detected_configs: "{{ service_configs.results | default([]) | selectattr('stat.exists') | map(attribute='item') | list }}"
            nginx_sites: "{{ nginx_sites.files | default([]) | map(attribute='path') | list }}"
            apache_sites: "{{ apache_sites.files | default([]) | map(attribute='path') | list }}"
            systemd_services: "{{ custom_systemd_services.files | default([]) | map(attribute='path') | list }}"
            service_files_content: "{{ service_config_contents.results | default([]) | selectattr('content', 'defined') | list }}"

    # Save discovery profile
    - name: Save discovery profile to file
      ansible.builtin.copy:
        content: "{{ discovery_profile | to_nice_yaml }}"
        dest: "{{ discovery_output_dir }}/{{ inventory_hostname }}-profile.yml"
        mode: '0644'
      delegate_to: localhost

    # Generate configurations using template
    - name: Generate Ansible configurations
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ discovery_output_dir }}/{{ item.dest }}"
        mode: '0644'
      loop:
        - src: "../templates/discovered-inventory.yml.j2"
          dest: "inventory.yml"
        - src: "../templates/discovered-host-vars-simple.yml.j2"  
          dest: "host_vars/{{ inventory_hostname }}.yml"
        - src: "../templates/package-replication.yml.j2"
          dest: "host_vars/{{ inventory_hostname }}-packages.yml"
        - src: "../templates/service-config-replication.yml.j2"
          dest: "host_vars/{{ inventory_hostname }}-services.yml"
        - src: "../templates/secrets-template.yml.j2"
          dest: "{{ inventory_hostname }}-secrets-template.yml"
      delegate_to: localhost

    - name: Determine machine groups
      ansible.builtin.set_fact:
        suggested_groups:
          - "{{ 'servers' if (discovery_profile.services.running | intersect(['ssh', 'sshd']) | length > 0 and not discovery_profile.desktop.has_gui) else '' }}"
          - "{{ 'docker_hosts' if discovery_profile.docker.installed else '' }}"
          - "{{ 'workstations' if discovery_profile.desktop.has_gui else '' }}"
          - "{{ ansible_distribution | lower }}_hosts"
        suggested_roles:
          - basic_setup
          - system_update
          - "{{ 'docker_setup' if discovery_profile.docker.installed else '' }}"
          - "{{ 'dotfiles' if discovery_profile.development.dotfiles_repo else '' }}"

    - name: Generate group_vars configuration
      ansible.builtin.template:
        src: "../templates/discovered-group-vars.yml.j2"
        dest: "{{ discovery_output_dir }}/group_vars/{{ item }}.yml"
        mode: '0644'
      loop: "{{ suggested_groups | select | list }}"
      delegate_to: localhost

    - name: Generate replication playbook
      ansible.builtin.template:
        src: "../templates/discovered-playbook-simple.yml.j2"
        dest: "{{ discovery_output_dir }}/replicate-{{ inventory_hostname }}.yml"
        mode: '0644'
      delegate_to: localhost

    - name: Generate discovery report
      ansible.builtin.template:
        src: "../templates/discovery-report.md.j2"
        dest: "{{ discovery_output_dir }}/DISCOVERY-REPORT.md"
        mode: '0644'
      delegate_to: localhost

    - name: Display completion message
      ansible.builtin.debug:
        msg:
          - "Infrastructure discovery completed!"
          - "Generated files in: {{ discovery_output_dir }}/"
          - "Ready for integration with your ~/Ansible/ structure:"
          - ""
          - "Core files:"
          - "- inventory.yml (matches your inventory format)"
          - "- host_vars/{{ inventory_hostname }}.yml (compatible with your host_vars)"
          - "- group_vars/[groups].yml (matches your group_vars pattern)"
          - "- replicate-{{ inventory_hostname }}.yml (compatible with new_machine.yml)"
          - ""
          - "Reference files:"
          - "- {{ inventory_hostname }}-packages.yml (package details)"
          - "- {{ inventory_hostname }}-services.yml (service configurations)" 
          - "- {{ inventory_hostname }}-secrets-template.yml (vault template)"
          - "- DISCOVERY-REPORT.md (analysis and recommendations)"
          - ""
          - "Discovery Summary:"
          - "  - Total packages: {{ discovery_profile.packages.installed.keys() | length }}"
          - "  - Service configs: {{ discovery_profile.service_configs.detected_configs | length }}"
          - "  - Repository sources: {{ (discovery_profile.repositories.apt_sources | length) + (discovery_profile.repositories.homebrew_taps | length) + (discovery_profile.repositories.aur_helpers | length) }}"
          - "  - Dotfiles detected: {{ 'Yes' if discovery_profile.development.dotfiles_repo else 'No' }}"
          - "  - Preferred shell: {{ discovery_profile.development.preferred_shell | default('Not detected') }}"
          - ""
          - "Suggested groups: {{ suggested_groups | select | list }}"
          - "Suggested roles: {{ suggested_roles | select | list }}"
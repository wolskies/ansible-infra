# GitHub Actions CI/CD Pipeline for wolskinet.infrastructure Collection
# This mirrors the GitLab CI pipeline for redundancy

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * 0" # Weekly performance tests

env:
  COLLECTION_NAMESPACE: wolskinet
  COLLECTION_NAME: infrastructure
  ANSIBLE_FORCE_COLOR: "true"
  ANSIBLE_HOST_KEY_CHECKING: "false"
  PY_COLORS: "1"

jobs:
  lint-and-validate:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install ansible ansible-lint molecule[docker] docker pytest-testinfra
          ansible-galaxy collection install community.general community.docker

      - name: Lint collection
        run: |
          ansible-lint --version
          ansible-lint .

      - name: Validate YAML syntax
        run: |
          find . -name "*.yml" -o -name "*.yaml" | xargs -I {} ansible-playbook --syntax-check {}

      - name: Validate galaxy.yml
        run: |
          ansible-galaxy collection build . --force
          ls -la *.tar.gz

      - name: Upload collection artifact
        uses: actions/upload-artifact@v4
        with:
          name: collection-build
          path: "*.tar.gz"
          retention-days: 7

  test-roles:
    name: Test Roles
    runs-on: ubuntu-latest
    needs: lint-and-validate
    strategy:
      matrix:
        scenario: [basic_setup, container_platform, discovery]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install ansible molecule[docker] docker pytest-testinfra
          ansible-galaxy collection install community.general community.docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test role - ${{ matrix.scenario }}
        run: |
          cd molecule/${{ matrix.scenario }}
          molecule test

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-roles
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install ansible molecule[docker] docker pytest-testinfra
          ansible-galaxy collection install community.general community.docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run integration tests
        run: |
          cd molecule/default
          molecule test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          pip install ansible-lint bandit safety

      - name: Run Ansible security lint
        run: |
          ansible-lint . || true

      - name: Run Bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: [lint-and-validate, test-integration]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Ansible
        run: |
          pip install ansible

      - name: Build collection
        run: |
          ansible-galaxy collection build . --force

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: collection-release
          path: "*.tar.gz"
          retention-days: 90

      # Publish to Galaxy on tags
      - name: Publish to Ansible Galaxy
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          ansible-galaxy collection publish *.tar.gz --api-key=${{ secrets.GALAXY_API_KEY }}
        env:
          GALAXY_API_KEY: ${{ secrets.GALAXY_API_KEY }}

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install ansible molecule[docker] docker pytest-testinfra
          ansible-galaxy collection install community.general community.docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run performance tests
        run: |
          time molecule test -s default

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            molecule/default/molecule.log
          retention-days: 30

  notify-status:
    name: Notification
    runs-on: ubuntu-latest
    needs: [build-and-publish, test-integration]
    if: always()
    steps:
      - name: Notify success
        if: needs.build-and-publish.result == 'success' && needs.test-integration.result == 'success'
        run: |
          echo "✅ Pipeline completed successfully!"
          echo "Collection tested and built for wolskinet.infrastructure"

      - name: Notify failure
        if: needs.build-and-publish.result == 'failure' || needs.test-integration.result == 'failure'
        run: |
          echo "❌ Pipeline failed!"
          echo "Check logs for details on test failures"

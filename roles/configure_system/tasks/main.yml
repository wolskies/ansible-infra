---
# configure_system role main tasks

- name: Configure Operating System
  ansible.builtin.include_role:
    name: "wolskies.infrastructure.os_configuration"
  tags:
    - host-configuration
    - core

- name: Manage Firewall & fail2ban
  ansible.builtin.include_role:
    name: "wolskies.infrastructure.manage_security_services"
  tags:
    - security-services
    - core

# User management now handled by os_configuration role
# Users are created as part of OS configuration above

- name: Manage System Packages
  ansible.builtin.include_role:
    name: "wolskies.infrastructure.manage_packages"
  tags:
    - packages
    - package-management
    - core

- name: Manage Snap Packages
  ansible.builtin.include_role:
    name: "wolskies.infrastructure.manage_snap_packages"
  when: ansible_system == "Linux"
  tags:
    - snap-packages
    - optional

- name: Manage Flatpak Packages
  ansible.builtin.include_role:
    name: "wolskies.infrastructure.manage_flatpak"
  when: ansible_system == "Linux"
  tags:
    - flatpak-packages
    - optional

- name: Configure User Preferences
  ansible.builtin.include_role:
    name: "wolskies.infrastructure.configure_user"
  vars:
    target_user: "{{ user_item }}"
  loop: "{{ infrastructure.domain.users | default([]) }}"
  loop_control:
    loop_var: user_item
  when:
    - user_item.name is defined
    - user_item.name != 'root' # Skip system accounts
  tags:
    - user-preferences
    - optional

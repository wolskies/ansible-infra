---
# Container Platform Main Tasks
# Manages Docker services, networks, volumes, and registries
# Uses geerlingguy.docker for Docker installation

- name: Validate supported OS
  ansible.builtin.fail:
    msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} is not supported for Docker setup. macOS Docker Desktop should be installed manually."
  when: ansible_os_family == 'Darwin'
  tags:
    - always
    - validation

- name: Wait for Docker daemon to be ready
  ansible.builtin.wait_for:
    path: /var/run/docker.sock
    state: present
    timeout: 30
  tags:
    - validation


- name: Create docker services directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: root
    group: root
  loop:
    - "{{ docker_services_dir }}"
    - "{{ docker_compose_dir }}"
  become: true
  tags:
    - directories

- name: Log in to Docker registries
  community.docker.docker_login:
    registry_url: "{{ item.registry }}"
    username: "{{ item.username }}"
    password: "{{ item.password }}"
    state: present
  loop: "{{ docker_registries }}"
  when:
    - docker_registries is defined
    - docker_registries | length > 0
  no_log: true
  tags:
    - registries

- name: Create Docker networks
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('bridge') }}"
    enable_ipv6: "{{ item.enable_ipv6 | default(false) }}"
    ipam_config: "{{ item.ipam_config | default(omit) }}"
    state: present
  loop: "{{ docker_networks }}"
  when:
    - docker_networks is defined
    - docker_networks | length > 0
  tags:
    - networks

- name: Create Docker volumes
  community.docker.docker_volume:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('local') }}"
    driver_options: "{{ item.driver_options | default(omit) }}"
    state: present
  loop: "{{ docker_volumes }}"
  when:
    - docker_volumes is defined
    - docker_volumes | length > 0
  tags:
    - volumes

- name: Deploy discovered Docker services with specific roles
  ansible.builtin.include_role:
    name: "wolskinet.infrastructure.{{ item.role }}"
  vars:
    compose_file: "{{ item.compose_file }}"
    service_directory: "{{ item.directory }}"
    service_name: "{{ item.name }}"
  loop: "{{ install_docker_services | default([]) }}"
  when:
    - install_docker_services is defined
    - item.role is defined
    - docker_enable_services | default(true)
  tags:
    - services
    - discovered

- name: Deploy discovered Docker services without specific roles (generic)
  ansible.builtin.include_role:
    name: "wolskinet.infrastructure.{{ item.role }}"
  vars:
    compose_file: "{{ item.compose_file }}"
    service_directory: "{{ item.directory }}"
    service_name: "{{ item.name }}"
  loop: "{{ install_docker_services | default([]) }}"
  when:
    - install_docker_services is defined
    - item.role is defined
    - item.role == "generic_docker_compose"
    - docker_enable_services | default(true)
  tags:
    - services
    - discovered
    - generic

- name: Deploy manually configured Docker services (legacy)
  ansible.builtin.include_tasks: deploy-service.yml
  loop: "{{ docker_services_deploy }}"
  loop_control:
    loop_var: service_name
  when:
    - docker_services_deploy is defined
    - docker_services_deploy | length > 0
    - docker_enable_services | default(true)
  vars:
    service_vars: "{{ vars[service_name + '_config'] | default({}) }}"
  tags:
    - services
    - configured

- name: Set up Docker system cleanup cron job
  ansible.builtin.cron:
    name: "Docker system cleanup"
    minute: "0"
    hour: "2"
    weekday: "0"
    job: "/usr/bin/docker system prune -f"
    user: root
    state: present
  become: true
  when: docker_system_prune | default(false)
  tags:
    - maintenance

- name: Create Docker log rotation configuration
  ansible.builtin.copy:
    content: |
      /var/lib/docker/containers/*/*.log {
          daily
          missingok
          rotate 7
          compress
          delaycompress
          copytruncate
          create 0644 root root
      }
    dest: /etc/logrotate.d/docker
    mode: '0644'
  become: true
  when: docker_log_rotation | default(true)
  tags:
    - maintenance

- name: Verify Docker installation
  ansible.builtin.command: docker version --format '{{.Server.Version}}'
  register: docker_version
  changed_when: false
  tags:
    - verification

- name: Display Docker setup summary
  ansible.builtin.debug:
    msg:
      - "Container platform setup complete"
      - "Services deployed: {{ all_docker_services | default([]) | length }}"
      - "Discovered: {{ install_docker_services | default([]) | selectattr('role', 'defined') | list | length }}"
      - "Configured: {{ docker_services_deploy | default([]) | length }}"
  tags:
    - summary

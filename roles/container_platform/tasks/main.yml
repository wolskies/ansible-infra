---
# Docker Setup Main Tasks
# Tags: always, debug, validation, install, config, users, compose, directories, 
#       registries, networks, volumes, services, maintenance, docker-setup

- name: Validate supported OS
  ansible.builtin.fail:
    msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} is not supported for Docker setup. macOS Docker Desktop should be installed manually."
  when: ansible_os_family == 'Darwin'
  tags:
    - always
    - validation
    - os-check
    - docker-setup



- name: Wait for Docker daemon to be ready
  ansible.builtin.wait_for:
    path: /var/run/docker.sock
    state: present
    timeout: 60
  tags:
    - service
    - verification
    - daemon
    - docker-setup


- name: Create docker services directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: root
    group: root
  loop:
    - "{{ docker_services_dir }}"
    - "{{ docker_compose_dir }}"
    - "{{ docker_data_dir | default('/opt/docker/data') }}"
    - "{{ docker_logs_dir | default('/opt/docker/logs') }}"
  become: true
  tags:
    - directories
    - filesystem
    - services
    - docker-setup

- name: Log in to Docker registries
  community.docker.docker_login:
    registry_url: "{{ item.registry }}"
    username: "{{ item.username }}"
    password: "{{ item.password }}"
    state: present
  loop: "{{ docker_registries }}"
  when: 
    - docker_registries is defined 
    - docker_registries | length > 0
  no_log: true
  tags:
    - registries
    - authentication
    - login
    - security
    - docker-setup

- name: Create Docker networks
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('bridge') }}"
    enable_ipv6: "{{ item.enable_ipv6 | default(false) }}"
    ipam_config: "{{ item.ipam_config | default(omit) }}"
    state: present
  loop: "{{ docker_networks }}"
  when: 
    - docker_networks is defined
    - docker_networks | length > 0
  tags:
    - networks
    - networking
    - infrastructure
    - docker-setup

- name: Verify Docker networks
  community.docker.docker_network_info:
    name: "{{ item.name }}"
  loop: "{{ docker_networks }}"
  register: network_info
  when: 
    - docker_networks is defined
    - docker_networks | length > 0
  tags:
    - networks
    - verification
    - debug
    - docker-setup

- name: Create Docker volumes
  community.docker.docker_volume:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('local') }}"
    driver_options: "{{ item.driver_options | default(omit) }}"
    state: present
  loop: "{{ docker_volumes }}"
  when: 
    - docker_volumes is defined
    - docker_volumes | length > 0
  tags:
    - volumes
    - storage
    - data-persistence
    - docker-setup

- name: Verify Docker volumes
  community.docker.docker_volume_info:
    name: "{{ item.name }}"
  loop: "{{ docker_volumes }}"
  register: volume_info
  when: 
    - docker_volumes is defined
    - docker_volumes | length > 0
  tags:
    - volumes
    - verification
    - debug
    - docker-setup

- name: Load service registry for deployment planning
  ansible.builtin.include_vars: services.yml
  tags:
    - services
    - registry
    - docker-setup

- name: Merge Docker service lists from hierarchical variables
  ansible.builtin.set_fact:
    final_docker_services: >-
      {{
        (global_docker_services | default([])) +
        (group_docker_services | default([])) +
        (host_docker_services | default([])) +
        (discovered_docker_services | default([])) +
        (docker_services_deploy | default([]))
        | unique
      }}
  tags:
    - services
    - variables
    - docker-setup

- name: Display Docker services deployment plan
  ansible.builtin.debug:
    msg:
      - "=== Docker Services Deployment Plan ==="
      - "Global services: {{ global_docker_services | default([]) }}"
      - "Group services: {{ group_docker_services | default([]) }}"
      - "Host services: {{ host_docker_services | default([]) }}"
      - "Discovered services: {{ discovered_docker_services | default([]) }}"
      - "Legacy services: {{ docker_services_deploy | default([]) }}"
      - ""
      - "Final merged services ({{ final_docker_services | length }}): {{ final_docker_services }}"
  tags:
    - services
    - info
    - variables
    - docker-setup

- name: Validate all services exist in registry
  ansible.builtin.fail:
    msg: "Service '{{ item }}' not found in registry. Available: {{ docker_service_registry.keys() | list }}"
  loop: "{{ final_docker_services }}"
  when: 
    - final_docker_services | length > 0
    - item not in docker_service_registry
  tags:
    - services
    - validation
    - docker-setup

- name: Deploy Docker services from merged list
  ansible.builtin.include_tasks: deploy-service.yml
  loop: "{{ final_docker_services }}"
  loop_control:
    loop_var: service_name
  when: 
    - final_docker_services is defined 
    - final_docker_services | length > 0
    - docker_enable_services | default(true)
  vars:
    # Pass service-specific variables if defined
    service_vars: "{{ vars[service_name + '_config'] | default({}) }}"
  tags:
    - services
    - deployment
    - containers
    - docker-setup

- name: Set up Docker system cleanup cron job
  ansible.builtin.cron:
    name: "Docker system cleanup"
    minute: "{{ docker_prune_schedule.split()[0] }}"
    hour: "{{ docker_prune_schedule.split()[1] }}"
    day: "{{ docker_prune_schedule.split()[2] }}"
    month: "{{ docker_prune_schedule.split()[3] }}"
    weekday: "{{ docker_prune_schedule.split()[4] }}"
    job: "/usr/bin/docker system prune -f --volumes"
    user: root
    state: present
  become: true
  when: docker_system_prune | default(false)
  tags:
    - maintenance
    - cron
    - cleanup
    - automation
    - docker-setup

- name: Create Docker log rotation configuration
  ansible.builtin.copy:
    content: |
      /var/lib/docker/containers/*/*.log {
          daily
          missingok
          rotate 7
          compress
          delaycompress
          copytruncate
          create 0644 root root
      }
    dest: /etc/logrotate.d/docker
    mode: '0644'
  become: true
  when: docker_log_rotation | default(true)
  tags:
    - maintenance
    - logs
    - logrotate
    - disk-management
    - docker-setup

- name: Verify Docker installation
  ansible.builtin.command: docker version --format '{{.Server.Version}}'
  register: docker_version
  changed_when: false
  tags:
    - verification
    - debug
    - summary
    - always
    - docker-setup

- name: Display Docker setup summary
  ansible.builtin.debug:
    msg:
      - "Docker setup completed successfully!"
      - "Docker version: {{ docker_version.stdout | default('unknown') }}"
      - "Compose plugin: {{ 'installed via geerlingguy.docker' }}"
      - "Users in docker group: {{ docker_users | default([]) | join(', ') }}"
      - "Networks configured: {{ docker_networks | default([]) | length }}"
      - "Volumes configured: {{ docker_volumes | default([]) | length }}"
      - "Services deployed: {{ final_docker_services | default([]) | length }}"
      - "System cleanup: {{ 'enabled' if docker_system_prune | default(false) else 'disabled' }}"
  tags:
    - always
    - summary
    - debug
    - verification
    - docker-setup
---
# manage_language_packages role defaults - Language ecosystem package management
# Handles Python (uv), Node.js (npm), Rust (cargo), and Go (go install) package installation with dependency validation
# Supports: Ubuntu 22+, Debian 12+, Arch Linux, macOS

language_packages:
  # =============================================================================
  # PYTHON PACKAGE MANAGEMENT (UV)
  # =============================================================================
  python:
    enable: true                            # Enable Python package management via uv
    packages: []                            # List of Python packages to install
    install_method: "user"                  # Installation scope: user, global, project
    project_path: "{{ ansible_env.HOME }}/python-project"  # Path for project-based installs
    # Example usage:
    # packages:
    #   - requests
    #   - flask
    #   - pytest
    #   - black
    #
    # Installation methods explained:
    # - user: Install to user site-packages (~/.local)
    # - global: Install system-wide (requires root privileges)
    # - project: Install to specific project directory (uses project_path)

  # =============================================================================
  # NODE.JS PACKAGE MANAGEMENT (NPM)
  # =============================================================================
  nodejs:
    enable: true                            # Enable Node.js package management via npm
    packages: []                            # List of Node.js packages to install
    install_global: true                    # Install packages globally (-g flag)
    # Example usage:
    # packages:
    #   - typescript
    #   - "@vue/cli"
    #   - eslint
    #   - prettier

  # =============================================================================
  # RUST PACKAGE MANAGEMENT (CARGO)
  # =============================================================================
  rust:
    enable: false                           # Enable Rust package management via cargo (requires Rust toolchain)
    packages: []                            # List of Rust packages to install
    # Example usage:
    # packages:
    #   - ripgrep
    #   - fd-find
    #   - bat
    #   - exa
    #
    # Note: Requires Rust toolchain to be installed
    # Enable only if Rust is available

  # =============================================================================
  # GO PACKAGE MANAGEMENT (GO INSTALL)
  # =============================================================================
  go:
    enable: false                           # Enable Go package management via go install (requires Go toolchain)
    packages: []                            # List of Go packages to install
    # Example usage:
    # packages:
    #   - github.com/junegunn/fzf@latest
    #   - golang.org/x/tools/cmd/goimports@latest
    #   - github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    #
    # Note: Requires Go toolchain to be installed
    # Enable only if Go is available

  # =============================================================================
  # DEPENDENCY VALIDATION CONFIGURATION
  # =============================================================================
  config:
    check_dependencies: true                # Validate required tools before installing packages
    install_missing_tools: true            # Auto-install missing language tools via system package manager

# =============================================================================
# PLATFORM-SPECIFIC FEATURES
# =============================================================================
# Ubuntu/Debian: Full support for all language ecosystems
# Arch Linux: Full support for all language ecosystems
# macOS: Full support for all language ecosystems (via Homebrew integration)

---
- name: Apply OS security hardening (Linux)
  ansible.builtin.include_role:
    name: devsec.hardening.os_hardening
  vars:
    # Map existing infrastructure variables to hardening variables
    os_hardening_enabled: "{{ host_security.hardening_enabled | default(true) }}"

    # Sysctl parameters (devsec.hardening handles comprehensive sysctl + our overrides)
    sysctl_overwrite: "{{ host_sysctl.parameters | default({}) }}"

    # Security settings
    os_ctrlaltdel_disabled: "{{ host_security.disable_ctrl_alt_del | default(false) }}"
    os_security_users_allow: "{{ host_security.users_allow | default([]) }}"
    os_remove_additional_root_users: "{{ host_security.remove_additional_root_users | default(false) }}"
    os_user_pw_ageing: "{{ host_security.enforce_password_aging | default(true) }}"

    # Kernel modules (devsec.hardening handles modules + our additions)
    os_kernel_modules_load: "{{ host_modules.load | default([]) }}"
    os_unused_filesystems: "{{ host_modules.blacklist | default([]) }}"

    # PAM limits (devsec.hardening handles PAM configuration)
    # Note: host_limits are handled by devsec.hardening's PAM configuration
  when: host_security.hardening_enabled | default(true)
  tags:
    - security
    - hardening

- name: Configure system locale
  community.general.locale_gen:
    name: "{{ domain_locale }}"
    state: present
  become: true
  when:
    - domain_locale is defined
    - domain_locale | length > 0

- name: Configure system LANG variable
  ansible.builtin.lineinfile:
    path: /etc/default/locale
    regexp: "^LANG="
    line: "LANG={{ domain_locale }}"
    create: true
  become: true
  when:
    - domain_locale is defined
    - domain_locale | length > 0

- name: Configure system language
  ansible.builtin.lineinfile:
    path: /etc/default/locale
    regexp: "^LANGUAGE="
    line: "LANGUAGE={{ domain_language }}"
    create: true
  become: true
  when:
    - domain_language is defined
    - domain_language | length > 0

- name: Configure NTP time synchronization
  block:
    - name: Check if systemd-timesyncd service exists
      ansible.builtin.systemd:
        name: systemd-timesyncd
      register: timesyncd_service_check
      become: true
      failed_when: false

    - name: Configure systemd-timesyncd
      ansible.builtin.template:
        src: timesyncd.conf.j2
        dest: /etc/systemd/timesyncd.conf
        owner: root
        group: root
        mode: "0644"
        backup: true
      become: true
      notify: restart timesyncd
  when:
    - domain_ntp is defined
    - domain_ntp.enabled | default(false)
  tags:
    - ntp
    - time

- name: Configure systemd journal
  block:
    - name: Ensure systemd journald.conf.d directory exists
      ansible.builtin.file:
        path: /etc/systemd/journald.conf.d
        state: directory
        owner: root
        group: root
        mode: "0755"
      become: true

    - name: Configure systemd journal settings
      ansible.builtin.template:
        src: journald.conf.j2
        dest: /etc/systemd/journald.conf.d/00-ansible-managed.conf
        owner: root
        group: root
        mode: "0644"
      become: true
      notify: restart journald
  when:
    - journal is defined
    - journal.configure | default(false)
    - ansible_service_mgr == "systemd"
  tags:
    - journal
    - logging

- name: Configure rsyslog for remote logging
  block:
    - name: Check if rsyslog is installed
      ansible.builtin.stat:
        path: /etc/rsyslog.conf
      register: rsyslog_installed

    - name: Configure rsyslog remote host
      ansible.builtin.lineinfile:
        path: /etc/rsyslog.conf
        regexp: '^\*\.\* @@'
        line: "*.* @@{{ rsyslog.remote_host }}:{{ rsyslog.remote_port }}"
        create: false
      become: true
      when: rsyslog_installed.stat.exists
      notify: restart rsyslog
  when:
    - rsyslog is defined
    - rsyslog.enabled | default(false)
    - rsyslog.remote_host | default('') | length > 0
  tags:
    - rsyslog
    - logging

- name: System optimizations
  block:
    - name: Enable system services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop: "{{ host_services.enable | default([]) }}"
      become: true
      failed_when: false
      when:
        - host_services is defined
        - host_services.enable | default([]) | length > 0

    - name: Disable unnecessary services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: false
        state: stopped
      loop: "{{ host_services.disable | default([]) }}"
      become: true
      failed_when: false
      when:
        - host_services is defined
        - host_services.disable | default([]) | length > 0

    - name: Mask services
      ansible.builtin.systemd:
        name: "{{ item }}"
        masked: true
        state: stopped
      loop: "{{ host_services.mask | default([]) }}"
      become: true
      failed_when: false
      when:
        - host_services is defined
        - host_services.mask | default([]) | length > 0

    # Note: vm.swappiness is now handled via sysctl_overwrite in devsec.hardening
    # Include optimizations.swappiness in host_sysctl.parameters instead
  tags:
    - optimization
    - services

# Note: The following tasks are now handled by devsec.hardening.os_hardening:
# - Sysctl parameters (via sysctl_overwrite mapping)
# - PAM limits (via comprehensive PAM configuration)
# - Kernel module loading/blacklisting (via os_kernel_modules_load and os_unused_filesystems)

- name: Configure udev rules
  block:
    - name: Ensure udev rules directory exists
      ansible.builtin.file:
        path: /etc/udev/rules.d
        state: directory
        owner: root
        group: root
        mode: "0755"
      become: true

    - name: Deploy udev rules
      ansible.builtin.copy:
        dest: "/etc/udev/rules.d/{{ item.priority | default(99) }}-{{ item.name }}.rules"
        content: "{{ item.content }}"
        owner: root
        group: root
        mode: "0644"
      become: true
      loop: "{{ host_udev.rules }}"
      when: item.state | default('present') == 'present'
      notify: reload udev

    - name: Remove udev rules
      ansible.builtin.file:
        path: "/etc/udev/rules.d/{{ item.priority | default(99) }}-{{ item.name }}.rules"
        state: absent
      become: true
      loop: "{{ host_udev.rules }}"
      when: item.state | default('present') == 'absent'
      notify: reload udev
  when:
    - host_udev.rules is defined
    - host_udev.rules | length > 0
  tags:
    - udev
    - hardware

- name: Include os-family-specific configuration
  ansible.builtin.include_tasks: configure-{{ ansible_os_family }}.yml
  tags:
    - os-configuration
    - distribution-specific

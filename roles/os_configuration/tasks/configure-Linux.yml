---
- name: Apply OS security hardening (Linux)
  ansible.builtin.include_role:
    name: devsec.hardening.os_hardening
  vars:
    os_hardening_enabled: "{{ host_security.hardening_enabled | default(true) }}"
    sysctl_overwrite: "{{ host_sysctl.parameters | default({}) }}"
    os_ctrlaltdel_disabled: "{{ host_security.disable_ctrl_alt_del | default(false) }}"
    os_security_users_allow: "{{ host_security.users_allow | default([]) }}"
    os_remove_additional_root_users: "{{ host_security.remove_additional_root_users | default(false) }}"
    os_user_pw_ageing: "{{ host_security.enforce_password_aging | default(true) }}"
  when: host_security.hardening_enabled | default(true)
  tags:
    - security
    - hardening

- name: Apply SSH security hardening (Linux)
  ansible.builtin.include_role:
    name: devsec.hardening.ssh_hardening
  vars:
    ssh_server_enabled: true
    ssh_server_ports: "{{ host_security.ssh_server_ports | default(['22']) }}"
    ssh_client_port: "{{ host_security.ssh_client_port | default('22') }}"
    ssh_listen_to: "{{ host_security.ssh_listen_to | default(['0.0.0.0']) }}"
    sftp_enabled: "{{ host_security.sftp_enabled | default(true) }}"
    network_ipv6_enable: "{{ ':' in (host_security.ssh_listen_to | default(['0.0.0.0']) | join('')) }}"
  when: host_security.ssh_hardening_enabled | default(false)
  tags:
    - security
    - ssh
    - hardening

- name: Configure system locale
  community.general.locale_gen:
    name: "{{ domain_locale }}"
    state: present
  become: true
  when:
    - domain_locale is defined
    - domain_locale | length > 0
  tags:
    - locale

- name: Check current system locale
  ansible.builtin.command:
    cmd: localectl status
  register: current_locale_check
  changed_when: false
  failed_when: false
  when:
    - domain_locale is defined
    - domain_locale | length > 0
  tags:
    - locale

- name: Set system locale using localectl
  ansible.builtin.command:
    cmd: localectl set-locale LANG="{{ domain_locale }}"
  become: true
  register: localectl_result
  changed_when: true
  when:
    - domain_locale is defined
    - domain_locale | length > 0
    - current_locale_check is defined
    - ('LANG=' + domain_locale) not in current_locale_check.stdout
  tags:
    - locale

- name: Configure NTP time synchronization
  block:
    - name: Ensure systemd-timesyncd package is installed
      ansible.builtin.package:
        name: systemd-timesyncd
        state: present
      become: true

    - name: Ensure systemd-timesyncd service is enabled and started
      ansible.builtin.systemd:
        name: systemd-timesyncd
        enabled: true
        state: started
      become: true
      tags:
        - ntp
        - time
        - no-container

    - name: Configure systemd-timesyncd
      ansible.builtin.template:
        src: timesyncd.conf.j2
        dest: /etc/systemd/timesyncd.conf
        owner: root
        group: root
        mode: "0644"
        backup: true
      become: true
      notify: restart timesyncd
  when:
    - domain_ntp is defined
    - domain_ntp.enabled | default(false)
  tags:
    - ntp
    - time

- name: Configure systemd journal
  block:
    - name: Ensure systemd journald.conf.d directory exists
      ansible.builtin.file:
        path: /etc/systemd/journald.conf.d
        state: directory
        owner: root
        group: root
        mode: "0755"
      become: true

    - name: Configure systemd journal settings
      ansible.builtin.template:
        src: journald.conf.j2
        dest: /etc/systemd/journald.conf.d/00-ansible-managed.conf
        owner: root
        group: root
        mode: "0644"
      become: true
      notify: restart journald
  when:
    - journal is defined
    - journal.configure | default(false)
    - ansible_service_mgr == "systemd"
  tags:
    - journal
    - logging

- name: System optimizations
  block:
    - name: Enable system services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        enabled: true
        state: started
      loop: "{{ host_services.enable | default([]) }}"
      become: true
      failed_when: false
      when:
        - host_services is defined
        - host_services.enable | default([]) | length > 0

    - name: Disable unnecessary services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        enabled: false
        state: stopped
      loop: "{{ host_services.disable | default([]) }}"
      become: true
      failed_when: false
      when:
        - host_services is defined
        - host_services.disable | default([]) | length > 0

    - name: Mask services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        masked: true
        state: stopped
      loop: "{{ host_services.mask | default([]) }}"
      become: true
      failed_when: false
      when:
        - host_services is defined
        - host_services.mask | default([]) | length > 0
  tags:
    - optimization
    - services

- name: Load kernel modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
    persistent: present
  loop: "{{ host_modules.load | default([]) }}"
  become: true
  when:
    - host_modules is defined
    - host_modules.load | default([]) | length > 0
  tags:
    - modules
    - kernel
    - no-container

- name: Blacklist kernel modules
  community.general.modprobe:
    name: "{{ item }}"
    state: absent
    persistent: absent
  loop: "{{ host_modules.blacklist | default([]) }}"
  become: true
  when:
    - host_modules is defined
    - host_modules.blacklist | default([]) | length > 0
  tags:
    - modules
    - kernel
    - no-container

- name: Configure udev rules
  block:
    - name: Ensure udev rules directory exists
      ansible.builtin.file:
        path: /etc/udev/rules.d
        state: directory
        owner: root
        group: root
        mode: "0755"
      become: true

    - name: Deploy udev rules
      ansible.builtin.copy:
        dest: "/etc/udev/rules.d/{{ item.priority | default(99) }}-{{ item.name }}.rules"
        content: "{{ item.content }}"
        owner: root
        group: root
        mode: "0644"
      become: true
      loop: "{{ host_udev.rules }}"
      when: item.state | default('present') == 'present'
      notify: reload udev

    - name: Remove udev rules
      ansible.builtin.file:
        path: "/etc/udev/rules.d/{{ item.priority | default(99) }}-{{ item.name }}.rules"
        state: absent
      become: true
      loop: "{{ host_udev.rules }}"
      when: item.state | default('present') == 'absent'
      notify: reload udev
  when:
    - host_udev.rules is defined
    - host_udev.rules | length > 0
  tags:
    - udev
    - hardware

- name: Include os-family-specific configuration
  ansible.builtin.include_tasks: configure-{{ ansible_os_family }}.yml
  tags:
    - os-configuration
    - distribution-specific

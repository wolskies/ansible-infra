---
- name: Apply OS security hardening (Linux)
  ansible.builtin.include_role:
    name: devsec.hardening.os_hardening
  become: true
  when: hardening.os_hardening_enabled | default(false)
  tags:
    - security

- name: Apply SSH security hardening (Linux)
  ansible.builtin.include_role:
    name: devsec.hardening.ssh_hardening
  become: true
  when: hardening.ssh_hardening_enabled | default(false)
  tags:
    - security

- name: Configure system locale (Debian/Ubuntu)
  community.general.locale_gen:
    name: "{{ domain_locale }}"
    state: present
  become: true
  when:
    - domain_locale is defined
    - domain_locale | length > 0
    - ansible_os_family == 'Debian'
  tags:
    - locale

- name: Configure system locale (Arch Linux)
  ansible.builtin.lineinfile:
    path: /etc/locale.gen
    regexp: "^#?{{ domain_locale | regex_escape }}\\s*$"
    line: "{{ domain_locale }}"
    state: present
  become: true
  notify: Generate locales
  when:
    - domain_locale is defined
    - domain_locale | length > 0
    - ansible_os_family == 'Archlinux'
  tags:
    - locale

- name: Check current system locale
  ansible.builtin.command:
    cmd: localectl status
  register: current_locale_check
  changed_when: false
  failed_when: false
  when:
    - domain_locale is defined
    - domain_locale | length > 0
  tags:
    - locale

- name: Set system locale using localectl
  ansible.builtin.command:
    cmd: localectl set-locale LANG="{{ domain_locale }}"
  become: true
  register: localectl_result
  changed_when: true
  when:
    - domain_locale is defined
    - domain_locale | length > 0
    - current_locale_check is defined
    - ('LANG=' + domain_locale) not in current_locale_check.stdout
  tags:
    - locale

- name: Configure time synchronization via systemd-timesyncd
  block:
    - name: Check if timedatectl is available
      ansible.builtin.command:
        cmd: timedatectl --version
      register: timedatectl_check
      changed_when: false
      failed_when: false

    - name: Ensure systemd-timesyncd package is installed (Debian/Ubuntu)
      ansible.builtin.package:
        name: systemd-timesyncd
        state: present
      become: true
      when:
        - timedatectl_check.rc == 0
        - ansible_os_family == "Debian"

    - name: Ensure systemd-timesyncd service is enabled and started
      ansible.builtin.systemd:
        name: systemd-timesyncd
        enabled: true
        state: started
      become: true
      when: timedatectl_check.rc == 0
      tags:
        - timesync
        - no-container

    - name: Configure systemd-timesyncd
      ansible.builtin.template:
        src: timesyncd.conf.j2
        dest: /etc/systemd/timesyncd.conf
        owner: root
        group: root
        mode: "0644"
        backup: true
      become: true
      notify: restart timesyncd
      when: timedatectl_check.rc == 0
  when:
    - domain_timesync is defined
    - domain_timesync.enabled | default(false)
  tags:
    - timesync

- name: Configure systemd journal
  block:
    - name: Ensure systemd journald.conf.d directory exists
      ansible.builtin.file:
        path: /etc/systemd/journald.conf.d
        state: directory
        owner: root
        group: root
        mode: "0755"
      become: true

    - name: Configure systemd journal settings
      ansible.builtin.template:
        src: journald.conf.j2
        dest: /etc/systemd/journald.conf.d/00-ansible-managed.conf
        owner: root
        group: root
        mode: "0644"
      become: true
      notify: restart journald
  when:
    - journal is defined
    - journal.configure | default(false)
    - ansible_service_mgr == "systemd"
  tags:
    - journal

- name: System optimizations
  block:
    - name: Enable system services
      ansible.builtin.systemd_service:
        name: "{{ service_item }}"
        enabled: true
        state: started
      loop: "{{ host_services.enable | default([]) }}"
      loop_control:
        loop_var: service_item
      become: true
      failed_when: false
      when:
        - host_services is defined
        - host_services.enable | default([]) | length > 0

    - name: Disable unnecessary services
      ansible.builtin.systemd_service:
        name: "{{ service_item }}"
        enabled: false
        state: stopped
      loop: "{{ host_services.disable | default([]) }}"
      loop_control:
        loop_var: service_item
      become: true
      failed_when: false
      when:
        - host_services is defined
        - host_services.disable | default([]) | length > 0

    - name: Mask services
      ansible.builtin.systemd_service:
        name: "{{ service_item }}"
        masked: true
        state: stopped
      loop: "{{ host_services.mask | default([]) }}"
      loop_control:
        loop_var: service_item
      become: true
      failed_when: false
      when:
        - host_services is defined
        - host_services.mask | default([]) | length > 0
  tags:
    - services

- name: Load kernel modules
  community.general.modprobe:
    name: "{{ module_item }}"
    state: present
    persistent: present
  loop: "{{ host_modules.load | default([]) }}"
  loop_control:
    loop_var: module_item
  become: true
  when:
    - host_modules is defined
    - host_modules.load | default([]) | length > 0
  tags:
    - modules
    - no-container

- name: Blacklist kernel modules
  community.general.modprobe:
    name: "{{ module_item }}"
    state: absent
    persistent: absent
  loop: "{{ host_modules.blacklist | default([]) }}"
  loop_control:
    loop_var: module_item
  become: true
  when:
    - host_modules is defined
    - host_modules.blacklist | default([]) | length > 0
  tags:
    - modules
    - no-container

- name: Configure udev rules
  block:
    - name: Ensure udev rules directory exists
      ansible.builtin.file:
        path: /etc/udev/rules.d
        state: directory
        owner: root
        group: root
        mode: "0755"
      become: true

    - name: Deploy udev rules
      ansible.builtin.copy:
        dest: "/etc/udev/rules.d/{{ udev_rule.priority | default(99) }}-{{ udev_rule.name }}.rules"
        content: "{{ udev_rule.content }}"
        owner: root
        group: root
        mode: "0644"
      become: true
      loop: "{{ host_udev_rules }}"
      loop_control:
        loop_var: udev_rule
      when: udev_rule.state | default('present') == 'present'
      notify: reload udev

    - name: Remove udev rules
      ansible.builtin.file:
        path: "/etc/udev/rules.d/{{ udev_rule.priority | default(99) }}-{{ udev_rule.name }}.rules"
        state: absent
      become: true
      loop: "{{ host_udev_rules }}"
      loop_control:
        loop_var: udev_rule
      when: udev_rule.state | default('present') == 'absent'
      notify: reload udev
  when:
    - host_udev_rules is defined
    - host_udev_rules | length > 0
  tags:
    - udev

- name: Include os-family-specific configuration
  ansible.builtin.include_tasks: configure-{{ ansible_os_family }}.yml
  tags: []

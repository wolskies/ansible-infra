---
# Configure user preferences for a single user
# Expects target_user variable to be passed in

- name: Validate required target_user variable
  ansible.builtin.assert:
    that:
      - target_user is defined
      - target_user.name is defined
      - target_user.name | length > 0
    fail_msg: "configure_users role requires target_user variable with name field"

# =================================================================
# Check if user exists
# =================================================================
- name: Check if user exists
  ansible.builtin.getent:
    database: passwd
    key: "{{ target_user.name }}"
    fail_key: false
  register: user_exists_check

- name: Set user existence fact
  ansible.builtin.set_fact:
    user_exists: "{{ user_exists_check.ansible_facts is defined and user_exists_check.ansible_facts.getent_passwd[target_user.name] is defined }}"

- name: Skip configuration for non-existent users
  ansible.builtin.debug:
    msg: "User '{{ target_user.name }}' does not exist. Skipping configuration. Create user with ansible.builtin.user first."
  when: not user_exists

- name: Stop processing if user does not exist
  ansible.builtin.meta: end_host
  when: not user_exists

- name: Configure language toolchains for {{ target_user.name }}
  when: target_user.name != 'root'
  block:
    - name: Install Node.js and packages
      ansible.builtin.include_role:
        name: wolskies.infrastructure.nodejs
      vars:
        node_user: "{{ target_user.name }}"
        node_packages: "{{ target_user.nodejs.packages }}"
      when: target_user.nodejs.packages | default([]) | length > 0
      tags: nodejs

    - name: Install Rust and packages
      ansible.builtin.include_role:
        name: wolskies.infrastructure.rust
      vars:
        rust_user: "{{ target_user.name }}"
        rust_packages: "{{ target_user.rust.packages }}"
      when: target_user.rust.packages | default([]) | length > 0
      tags: rust

    - name: Install Go and packages
      ansible.builtin.include_role:
        name: wolskies.infrastructure.go
      vars:
        go_user: "{{ target_user.name }}"
        go_packages: "{{ target_user.go.packages }}"
      when: target_user.go.packages | default([]) | length > 0
      tags: go

    - name: Install and configure Neovim
      ansible.builtin.include_role:
        name: wolskies.infrastructure.neovim
      vars:
        neovim_user: "{{ target_user.name }}"
      when: target_user.neovim.enabled | default(false)
      tags: neovim

    - name: Configure terminal emulators
      ansible.builtin.include_role:
        name: wolskies.infrastructure.terminal_config
      vars:
        terminal_user: "{{ target_user.name }}"
        terminal_entries: "{{ target_user.terminal_entries }}"
      when: target_user.terminal_entries | default([]) | length > 0
      tags: terminal
  tags:
    - user-config
    - language-packages

- name: Configure Git settings for {{ target_user.name }}
  when:
    - target_user.git is defined
    - target_user.name != 'root'
  block:
    - name: Set Git user name
      community.general.git_config:
        name: user.name
        value: "{{ target_user.git.user_name }}"
        scope: global
      when: target_user.git.user_name is defined

    - name: Set Git user email
      community.general.git_config:
        name: user.email
        value: "{{ target_user.git.user_email }}"
        scope: global
      when: target_user.git.user_email is defined

    - name: Set Git default editor
      community.general.git_config:
        name: core.editor
        value: "{{ target_user.git.editor }}"
        scope: global
      when: target_user.git.editor is defined
  become: true
  become_user: "{{ target_user.name }}"
  tags:
    - git-config
    - user-config

- name: Configure macOS-specific user preferences
  ansible.builtin.include_tasks: configure-Darwin.yml
  when:
    - ansible_system == 'Darwin'
    - target_user.Darwin is defined
    - target_user.name != 'root'
  tags:
    - macos-config
    - user-config

- name: Configure dotfiles
  ansible.builtin.include_tasks: configure-dotfiles.yml
  when:
    - target_user.dotfiles is defined
    - target_user.dotfiles.enable | default(true)
    - target_user.name != 'root'
  tags:
    - dotfiles
    - user-config

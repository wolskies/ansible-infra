---
# Language ecosystem package management
# Handles npm, cargo, go modules with dependency checking

- name: Install missing language tools via system package manager
  block:
    - name: Check for required tools
      ansible.builtin.command: "which {{ item.tool }}"
      register: tool_check
      changed_when: false
      failed_when: false
      loop:
        - tool: "npm"
          packages_ubuntu: ["nodejs", "npm"]
          packages_debian: ["nodejs", "npm"]
          packages_archlinux: ["nodejs", "npm"]
          packages_macosx: []
          condition: "{{ language_packages.nodejs.enable and (language_packages.nodejs.packages | default([]) | length > 0) }}"
      when:
        - language_packages.config.check_dependencies | default(true)
        - language_packages.config.install_missing_tools | default(true)
        - item.condition | bool

    - name: Install missing tools via system package manager
      ansible.builtin.package:
        name: "{{ result.item['packages_' + ansible_distribution | lower] }}"
        state: present
      become: true
      loop: "{{ tool_check.results }}"
      loop_control:
        loop_var: result
      when:
        - language_packages.config.install_missing_tools | default(true)
        - result.rc is defined
        - result.rc != 0
        - result.item.condition | bool
        - result.item['packages_' + ansible_distribution | lower] | default([]) | length > 0

# Node.js packages via npm
- name: Setup Node.js packages
  block:
    - name: Ensure npm is installed
      ansible.builtin.fail:
        msg: "npm is not installed. Please install Node.js and npm first or set language_packages.config.install_missing_tools: true"
      when:
        - not (language_packages.config.install_missing_tools | default(true))
        - ansible_facts['packages']['npm'] is not defined

    - name: Install npm packages globally
      community.general.npm:
        name: "{{ item }}"
        global: true
        state: present
      loop: "{{ language_packages.nodejs.packages }}"
      become: true
  when:
    - language_packages.nodejs.enable | default(false)
    - language_packages.nodejs.packages is defined
    - language_packages.nodejs.packages | length > 0
  tags:
    - nodejs
    - npm
    - language-packages

# Rust packages via cargo
- name: Setup Rust packages
  block:
    - name: Check if cargo is installed
      ansible.builtin.command: which cargo
      register: cargo_check
      changed_when: false
      failed_when: false

    - name: Install Rust via secure script
      ansible.builtin.include_tasks: secure_script_install.yml
      vars:
        tool_name: rust
        download_url: https://sh.rustup.rs
        install_args: "-y"
        target_binary: "{{ ansible_env.HOME }}/.cargo/bin/cargo"
      when:
        - cargo_check.rc != 0
        - language_packages.config.install_missing_tools | default(true)

    - name: Fail if Rust is not installed and auto-install disabled
      ansible.builtin.fail:
        msg: "Rust is not installed. Please install Rust first or set language_packages.config.install_missing_tools: true"
      when:
        - cargo_check.rc != 0
        - not (language_packages.config.install_missing_tools | default(true))

    - name: Install Rust packages
      ansible.builtin.command: "{{ ansible_env.HOME }}/.cargo/bin/cargo install {{ item }}"
      loop: "{{ language_packages.rust.packages }}"
      register: cargo_install
      changed_when: "'Installed' in cargo_install.stdout"
      environment:
        PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.cargo/bin"
  when:
    - language_packages.rust.enable | default(false)
    - language_packages.rust.packages is defined
    - language_packages.rust.packages | length > 0
  tags:
    - rust
    - cargo
    - language-packages

# Go packages
- name: Setup Go packages
  block:
    - name: Check if go is installed
      ansible.builtin.command: which go
      register: go_check
      changed_when: false
      failed_when: false

    - name: Install Go via system package manager if missing
      ansible.builtin.package:
        name: "{{ go_package_name }}"
        state: present
      become: true
      when:
        - go_check.rc != 0
        - language_packages.config.install_missing_tools | default(true)
      vars:
        go_package_name: "{{ 'go' if ansible_distribution in ['Ubuntu', 'Debian', 'Archlinux'] else 'golang' }}"

    - name: Fail if Go is not installed and auto-install disabled
      ansible.builtin.fail:
        msg: "Go is not installed. Please install Go first or set language_packages.config.install_missing_tools: true"
      when:
        - go_check.rc != 0
        - not (language_packages.config.install_missing_tools | default(true))

    - name: Install Go packages
      ansible.builtin.command: "go install {{ item }}"
      loop: "{{ language_packages.go.packages }}"
      environment:
        GO111MODULE: "on"
        GOPATH: "{{ ansible_env.HOME }}/go"
        PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/go/bin"
      register: go_install
      changed_when: go_install.rc == 0
  when:
    - language_packages.go.enable | default(false)
    - language_packages.go.packages is defined
    - language_packages.go.packages | length > 0
  tags:
    - golang
    - go
    - language-packages

# Display summary
- name: Display language packages summary
  ansible.builtin.debug:
    msg:
      - "=== Language Packages Summary ==="
      - "Node.js packages: {{ language_packages.nodejs.packages | default([]) | length }}"
      - "Rust packages: {{ language_packages.rust.packages | default([]) | length }}"
      - "Go packages: {{ language_packages.go.packages | default([]) | length }}"
      - "=== Security Enhancements ==="
      - "✅ Secure script downloads with certificate validation"
      - "✅ Temporary file cleanup after installation"
      - "✅ Script integrity verification support"
  tags:
    - always
    - summary
    - language-packages

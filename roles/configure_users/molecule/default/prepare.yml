---
- name: Prepare containers for configure_users testing
  hosts: all
  become: true
  gather_facts: true
  tasks:
    # ===== Basic Container Setup =====
    - name: Install acl package for proper become support (Debian/Ubuntu)
      ansible.builtin.apt:
        name: acl
        state: present
        update_cache: true
      when: ansible_os_family == 'Debian'

    - name: Install acl package for proper become support (Arch Linux)
      community.general.pacman:
        name: acl
        state: present
        update_cache: true
      when: ansible_os_family == 'Archlinux'

    - name: Install git for REQ-CU-012 and REQ-CU-019 testing (Debian/Ubuntu)
      ansible.builtin.apt:
        name: git
        state: present
      when: ansible_os_family == 'Debian'

    - name: Install git for REQ-CU-012 and REQ-CU-019 testing (Arch Linux)
      community.general.pacman:
        name: git
        state: present
      when: ansible_os_family == 'Archlinux'

    - name: Install stow for REQ-CU-019 dotfiles testing (Debian/Ubuntu)
      ansible.builtin.apt:
        name: stow
        state: present
      when:
        - ansible_os_family == 'Debian'
        - inventory_hostname == 'ubuntu-user-full'

    - name: Install stow for REQ-CU-019 dotfiles testing (Arch Linux)
      community.general.pacman:
        name: stow
        state: present
      when:
        - ansible_os_family == 'Archlinux'

    - name: Fix ansible temp directory permissions for become_user (Arch Linux)
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0777"
        owner: root
        group: root
      loop:
        - /tmp/ansible-remote-tmp
        - /tmp/ansible-tmp
      when: ansible_os_family == 'Archlinux'

    # ===== Pre-create all test users =====
    # NOTE: configure_users role now only configures preferences,
    # so we must create users first with ansible.builtin.user

    - name: Create fulluser for comprehensive testing
      ansible.builtin.user:
        name: fulluser
        shell: /bin/bash
        password: "{{ test_password_hash }}"
        groups: [sudo]
        append: true
        create_home: true
        state: present
      when: inventory_hostname == 'ubuntu-user-full'

    - name: Add SSH keys for fulluser
      ansible.posix.authorized_key:
        user: fulluser
        key: "{{ item.key }}"
        comment: "{{ item.comment | default(omit) }}"
        key_options: "{{ item.options | default(omit) }}"
        state: present
      loop:
        - key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJGKwK4L3KL9H8K8K8K8K8K8K8K8K8K8K8K8K8K8K8K8"
          comment: "fulluser@example.com"
        - key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC5H8K8K8K8K8K8K8K8K8K8K8K8K8K8K8K8K8K8K8K8"
          comment: "fulluser-backup@example.com"
          options: 'from="192.168.1.0/24",no-port-forwarding'
      when: inventory_hostname == 'ubuntu-user-full'

    - name: Configure passwordless sudo for fulluser
      ansible.builtin.copy:
        dest: /etc/sudoers.d/fulluser
        content: "fulluser ALL=(ALL) NOPASSWD: ALL\n"
        mode: "0440"
        owner: root
        group: root
        validate: "visudo -cf %s"
      when: inventory_hostname == 'ubuntu-user-full'

    - name: Create basicuser for minimal testing
      ansible.builtin.user:
        name: basicuser
        shell: /bin/bash
        password: "{{ test_password_hash }}"
        create_home: true
        state: present
      when: inventory_hostname == 'ubuntu-user-basic'

    - name: Add SSH key for basicuser
      ansible.posix.authorized_key:
        user: basicuser
        key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJGKwK4L3KL9H8K8K8K8K8K8K8K8K8K8K8K8K8K8K8K8"
        comment: "basicuser@example.com"
        state: present
      when: inventory_hostname == 'ubuntu-user-basic'

    - name: Create existinguser for preference-only testing
      ansible.builtin.user:
        name: existinguser
        shell: /bin/bash
        password: "!"
        create_home: true
        state: present
      when: inventory_hostname == 'ubuntu-user-basic'

    - name: Create privilegeduser for sudo testing
      ansible.builtin.user:
        name: privilegeduser
        shell: /bin/bash
        password: "{{ test_password_hash }}"
        groups: [sudo]
        append: true
        create_home: true
        state: present
      when: inventory_hostname == 'ubuntu-user-privileged'

    - name: Configure passwordless sudo for privilegeduser
      ansible.builtin.copy:
        dest: /etc/sudoers.d/privilegeduser
        content: "privilegeduser ALL=(ALL) NOPASSWD: ALL\n"
        mode: "0440"
        owner: root
        group: root
        validate: "visudo -cf %s"
      when: inventory_hostname == 'ubuntu-user-privileged'

    - name: Create archuser for Arch Linux testing
      ansible.builtin.user:
        name: archuser
        shell: /bin/bash
        password: "{{ test_password_hash }}"
        groups: [wheel]
        append: true
        create_home: true
        state: present
      when: inventory_hostname == 'arch-user-basic'

    # ===== Mock External Role Dependencies =====
    # Note: These roles will be called by configure_users but we need to mock them
    # The actual functionality is tested in individual role molecule tests

    - name: Create mock nodejs role directory structure
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.ansible/collections/ansible_collections/wolskies/infrastructure/roles/nodejs/tasks"
        state: directory
        mode: "0755"
      when: inventory_hostname == 'ubuntu-user-full'

    - name: Create mock nodejs main task
      ansible.builtin.copy:
        dest: "{{ ansible_env.HOME }}/.ansible/collections/ansible_collections/wolskies/infrastructure/roles/nodejs/tasks/main.yml"
        content: |
          ---
          # Mock nodejs role for testing configure_users orchestration
          - name: Mock nodejs installation (REQ-CU-007)
            ansible.builtin.debug:
              msg: "Mock nodejs role called with user: {{ node_user | default('undefined') }}, packages: {{ node_packages | default([]) }}"
        mode: "0644"
      when: inventory_hostname == 'ubuntu-user-full'

    - name: Create mock rust role directory structure
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.ansible/collections/ansible_collections/wolskies/infrastructure/roles/rust/tasks"
        state: directory
        mode: "0755"
      when: inventory_hostname == 'ubuntu-user-full'

    - name: Create mock rust main task
      ansible.builtin.copy:
        dest: "{{ ansible_env.HOME }}/.ansible/collections/ansible_collections/wolskies/infrastructure/roles/rust/tasks/main.yml"
        content: |
          ---
          # Mock rust role for testing configure_users orchestration
          - name: Mock rust installation (REQ-CU-008)
            ansible.builtin.debug:
              msg: "Mock rust role called with user: {{ rust_user | default('undefined') }}, packages: {{ rust_packages | default([]) }}"
        mode: "0644"
      when: inventory_hostname == 'ubuntu-user-full'

    - name: Create mock go role directory structure
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.ansible/collections/ansible_collections/wolskies/infrastructure/roles/go/tasks"
        state: directory
        mode: "0755"
      when: inventory_hostname == 'ubuntu-user-full'

    - name: Create mock go main task
      ansible.builtin.copy:
        dest: "{{ ansible_env.HOME }}/.ansible/collections/ansible_collections/wolskies/infrastructure/roles/go/tasks/main.yml"
        content: |
          ---
          # Mock go role for testing configure_users orchestration
          - name: Mock go installation (REQ-CU-009)
            ansible.builtin.debug:
              msg: "Mock go role called with user: {{ go_user | default('undefined') }}, packages: {{ go_packages | default([]) }}"
        mode: "0644"
      when: inventory_hostname == 'ubuntu-user-full'

    - name: Create mock neovim role directory structure
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.ansible/collections/ansible_collections/wolskies/infrastructure/roles/neovim/tasks"
        state: directory
        mode: "0755"
      when: inventory_hostname == 'ubuntu-user-full'

    - name: Create mock neovim main task
      ansible.builtin.copy:
        dest: "{{ ansible_env.HOME }}/.ansible/collections/ansible_collections/wolskies/infrastructure/roles/neovim/tasks/main.yml"
        content: |
          ---
          # Mock neovim role for testing configure_users orchestration
          - name: Mock neovim configuration (REQ-CU-010)
            ansible.builtin.debug:
              msg: "Mock neovim role called with user: {{ neovim_user | default('undefined') }}"
        mode: "0644"
      when: inventory_hostname == 'ubuntu-user-full'

    - name: Create mock terminal_config role directory structure
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.ansible/collections/ansible_collections/wolskies/infrastructure/roles/terminal_config/tasks"
        state: directory
        mode: "0755"
      when: inventory_hostname == 'ubuntu-user-full'

    - name: Create mock terminal_config main task
      ansible.builtin.copy:
        dest: "{{ ansible_env.HOME }}/.ansible/collections/ansible_collections/wolskies/infrastructure/roles/terminal_config/tasks/main.yml"
        content: |
          ---
          # Mock terminal_config role for testing configure_users orchestration
          - name: Mock terminal configuration (REQ-CU-011)
            ansible.builtin.debug:
              msg: "Mock terminal_config role called with user: {{ terminal_user | default('undefined') }}, entries: {{ terminal_entries | default([]) }}"
            when: terminal_entries | default([]) | length > 0
        mode: "0644"
      when: inventory_hostname == 'ubuntu-user-full'

    # ===== REQ-CU-019: Create mock dotfiles repository =====
    - name: Create mock dotfiles repository for testing (REQ-CU-019)
      when: inventory_hostname == 'ubuntu-user-full'
      block:
        - name: Create temporary dotfiles repository
          ansible.builtin.file:
            path: /tmp/mock-dotfiles
            state: directory
            mode: "0755"

        - name: Initialize git repository
          ansible.builtin.command:
            cmd: git init
            chdir: /tmp/mock-dotfiles
            creates: /tmp/mock-dotfiles/.git

        - name: Create sample dotfiles structure
          ansible.builtin.file:
            path: "/tmp/mock-dotfiles/{{ item }}"
            state: directory
            mode: "0755"
          loop:
            - bash
            - vim

        - name: Create sample .bashrc in dotfiles
          ansible.builtin.copy:
            dest: /tmp/mock-dotfiles/bash/.bashrc
            content: |
              # Mock dotfiles .bashrc for testing
              export MOCK_DOTFILES=true
              echo "Loaded mock dotfiles .bashrc"
            mode: "0644"

        - name: Create sample .vimrc in dotfiles
          ansible.builtin.copy:
            dest: /tmp/mock-dotfiles/vim/.vimrc
            content: |
              " Mock dotfiles .vimrc for testing
              set number
              " Mock configuration loaded
            mode: "0644"

        - name: Configure git for commits
          ansible.builtin.command:
            cmd: "{{ item }}"
            chdir: /tmp/mock-dotfiles
          loop:
            - git config user.email "test@example.com"
            - git config user.name "Test User"

        - name: Add and commit dotfiles
          ansible.builtin.command:
            cmd: "{{ item }}"
            chdir: /tmp/mock-dotfiles
          loop:
            - git add .
            - git commit -m "Initial mock dotfiles commit"

        - name: Ensure main branch exists and is current
          ansible.builtin.shell:
            cmd: |
              if ! git show-ref --verify --quiet refs/heads/main; then
                git branch -m main
              fi
            chdir: /tmp/mock-dotfiles

        - name: Fix repository ownership for container access
          ansible.builtin.file:
            path: /tmp/mock-dotfiles
            state: directory
            owner: root
            group: root
            mode: "0755"
            recurse: true

        - name: Configure git safe directory
          ansible.builtin.command:
            cmd: git config --global --add safe.directory /tmp/mock-dotfiles

        - name: Display dotfiles repository location
          ansible.builtin.debug:
            msg: "Dotfiles repository created at: file:///tmp/mock-dotfiles"

        - name: Create conflicting bash directory for backup testing (REQ-CU-019)
          ansible.builtin.file:
            path: /home/fulluser/bash
            state: directory
            mode: "0755"
            owner: fulluser
            group: fulluser

        - name: Create conflicting .bashrc file in bash directory (REQ-CU-019)
          ansible.builtin.copy:
            dest: /home/fulluser/bash/.bashrc
            content: |
              # Existing .bashrc that should cause a stow conflict
              echo "Original bashrc"
            mode: "0644"
            owner: fulluser
            group: fulluser

    - name: Display preparation summary
      ansible.builtin.debug:
        msg:
          - "=== Configure User Test Preparation Complete ==="
          - "✅ Base container setup (acl, git, stow)"
          - "✅ Mock external role dependencies created"
          - "✅ {{ inventory_hostname }}: Ready for {{ users[0].name if users is defined and users | length > 0 else 'undefined user' }} testing"
          - "✅ Requirements coverage: {{ 'REQ-CU-001,002,004-012,014-019' if inventory_hostname == 'ubuntu-user-full' else 'Subset per container strategy' }}"

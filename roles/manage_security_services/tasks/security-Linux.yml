---
- name: Ensure firewall package is present
  ansible.builtin.package:
    name: "{{ infrastructure.host.firewall.package }}"
    state: present
  become: true
  when: infrastructure.host.firewall.enabled
  tags:
    - firewall

## I think we confirmed that UFW won't add multiple rules.  If that's the case then we need to 
## simplify this to just add the SSH allow rule
- name: SSH Anti-Lock-Out
  block:
    - name: Check if SSH rule already exists in firewall_rules
      ansible.builtin.set_fact:
        _ssh_rule_exists: >-
          {{
            (infrastructure[ansible_distribution].firewall.rules | default([]) | selectattr('port', 'defined') | selectattr('port', 'equalto', '22') | list | length > 0) or
            (infrastructure[ansible_distribution].firewall.rules | default([]) | selectattr('name', 'defined') | selectattr('name', 'match', '(?i)ssh|openssh') | list | length > 0)
          }}
    - name: Add SSH rule to firewall_rules if not present
      ansible.builtin.set_fact:
        firewall_rules: >-
          {{
            [{"rule": "allow", "port": "22", "proto": "tcp", "comment": "SSH access (prevent lockout)"}] +
            (infrastructure[ansible_distribution].firewall.rules | default([]))
          }}
      when: not (_ssh_rule_exists | bool)
    
    - name: Use existing rules if SSH rule already present
      ansible.builtin.set_fact:
        firewall_rules: "{{ infrastructure[ansible_distribution].firewall.rules | default([]) }}"
      when: _ssh_rule_exists | bool
  when: infrastructure[ansible_distribution].firewall.prevent_ssh_lockout | default(true)
  tags:
    - firewall
    - ssh-lock-out

- name: Ensure firewall rules are applied
  community.general.ufw:
    rule: "{{ item.rule | default('allow') }}"
    port: "{{ item.port | default(omit) }}"
    proto: "{{ item.proto | default(item.protocol | default(omit)) }}"
    name: "{{ item.name | default(omit) }}"
    src: "{{ item.src | default(item.source | default(omit)) }}"
    dest: "{{ item.dest | default(item.destination | default(omit)) }}"
    to_ip: "{{ item.to_ip | default(omit) }}"
    from_ip: "{{ item.from_ip | default(omit) }}"
    interface: "{{ item.interface | default(omit) }}"
    direction: "{{ item.direction | default(omit) }}"
    delete: "{{ item.delete | default(false) }}"
    comment: "{{ item.comment | default(omit) }}"
    route: "{{ item.route | default(omit) }}"
    log: "{{ item.log | default(omit) }}"
  loop: "{{ infrastructure.host.firewall.rules | default([]) }}"
  become: true
  when:
    - infrastructure.host.firewall.enabled | default(false)
    - infrastructure.host.firewall.rules | default([]) | length > 0
  notify: reload ufw
  tags:
    - firewall
    - firewall-rules

- name: Ensure UFW firewall service state
  community.general.ufw:
    state: "{{ 'enabled' if infrastructure.host.firewall.enabled | default(false) else 'disabled' }}"
  become: true
  tags:
    - firewall-services

- name: Ensure fail2ban package is present
  ansible.builtin.package:
    name: fail2ban
    state: present
  become: true
  when: infrastructure.host.fail2ban.enabled | default(false)
  tags:
    - fail2ban

- name: Ensure fail2ban local configuration is present
  ansible.builtin.template:
    src: jail.local.j2
    dest: /etc/fail2ban/jail.local
    owner: root
    group: root
    mode: "0644"
  become: true
  notify: restart fail2ban
  when: infrastructure.host.fail2ban.enabled | default(false)
  tags:
    - fail2ban

- name: Ensure fail2ban service is running and enabled
  ansible.builtin.service:
    name: fail2ban
    state: "{{ 'started' if infrastructure.host.fail2ban.enabled | default(false) else 'stopped' }}"
    enabled: "{{ infrastructure.host.fail2ban.enabled | default(false) }}"
  become: true
  when: infrastructure.host.fail2ban.enabled | default(false)
  tags:
    - fail2ban
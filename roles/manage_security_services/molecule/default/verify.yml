---
- name: Verify manage_security_services role
  hosts: all
  become: true
  gather_facts: true
  tasks:
    # ===== Gather System Information =====
    - name: Gather package facts
      ansible.builtin.package_facts:
        manager: auto

    - name: Gather service facts
      ansible.builtin.service_facts:

    # ===== REQ-SS-001: UFW Package Installation =====
    - name: REQ-SS-001 - Verify UFW package installation (positive cases)
      ansible.builtin.assert:
        that:
          - "'ufw' in ansible_facts.packages"
        fail_msg: "❌ REQ-SS-001: UFW package should be installed when firewall.enabled is true"
        success_msg: "✅ REQ-SS-001: UFW package correctly installed"
      when:
        - inventory_hostname in ['ubuntu-firewall-full', 'ubuntu-firewall-partial']
        - firewall is defined
        - firewall.enabled | default(false)

    - name: REQ-SS-001 - Verify UFW package not installed (negative cases)
      ansible.builtin.assert:
        that:
          - "'ufw' not in ansible_facts.packages or ansible_facts.packages['ufw'] | length == 0"
        fail_msg: "❌ REQ-SS-001: UFW package should not be installed when firewall.enabled is false"
        success_msg: "✅ REQ-SS-001: UFW package correctly absent"
      when:
        - inventory_hostname in ['ubuntu-security-disabled']
        - firewall is defined
        - not (firewall.enabled | default(false))

    # ===== Test Summary for REQ-SS-001 =====
    - name: REQ-SS-001 - Package installation validation summary
      ansible.builtin.debug:
        msg:
          - "✅ REQ-SS-001: UFW package installation validation completed"
          - "- Positive cases: Package installed when firewall.enabled=true"
          - "- Negative cases: Package absent when firewall.enabled=false"

    # ===== REQ-SS-002: SSH Protection During Firewall Operations =====
    - name: Check if current_ssh_port variable exists
      ansible.builtin.set_fact:
        ssh_protection_test: "{{ current_ssh_port is defined }}"
      when:
        - firewall is defined
        - firewall.enabled | default(false)
        - firewall.prevent_ssh_lockout | default(true)

    - name: REQ-SS-002 - Verify SSH port detection when enabled (positive cases)
      ansible.builtin.debug:
        msg: "✅ REQ-SS-002: SSH protection logic correctly evaluated for container environment"
      when:
        - inventory_hostname in ['ubuntu-firewall-full', 'ubuntu-firewall-partial']
        - firewall is defined
        - firewall.enabled | default(false)
        - firewall.prevent_ssh_lockout | default(true)

    - name: REQ-SS-002 - Verify SSH port detection disabled (edge cases)
      ansible.builtin.debug:
        msg: "✅ REQ-SS-002: SSH protection correctly disabled - no port detection attempted"
      when:
        - inventory_hostname == 'ubuntu-edge-cases'
        - firewall is defined
        - firewall.enabled | default(false)
        - not (firewall.prevent_ssh_lockout | default(true))

    - name: REQ-SS-002 - Verify SSH port detection skipped when firewall disabled
      ansible.builtin.debug:
        msg: "✅ REQ-SS-002: SSH protection correctly skipped when firewall disabled"
      when:
        - inventory_hostname in ['ubuntu-security-disabled', 'ubuntu-fail2ban-only']
        - firewall is defined
        - not (firewall.enabled | default(false))

    # ===== Test Summary for REQ-SS-002 =====
    - name: REQ-SS-002 - SSH protection validation summary
      ansible.builtin.debug:
        msg:
          - "✅ REQ-SS-002: SSH protection validation completed"
          - "- Port detection: SSH port detected when prevent_ssh_lockout=true"
          - "- Disabled handling: Protection disabled when prevent_ssh_lockout=false"
          - "- Conditional logic: Protection skipped when firewall disabled"

    # ===== REQ-SS-003: Firewall Rules Configuration =====
    - name: Check UFW status and rules
      ansible.builtin.command: ufw status numbered
      register: ufw_status_check
      changed_when: false
      failed_when: false
      when:
        - firewall is defined
        - firewall.enabled | default(false)

    - name: REQ-SS-003 - Verify UFW rules applied (positive cases)
      ansible.builtin.assert:
        that:
          - "'Status: active' in ufw_status_check.stdout"
          - "'22/tcp' in ufw_status_check.stdout"
          - "'ALLOW' in ufw_status_check.stdout"
        fail_msg: "❌ REQ-SS-003: UFW rules should be applied when firewall.enabled is true"
        success_msg: "✅ REQ-SS-003: UFW rules correctly applied"
      when:
        - inventory_hostname in ['ubuntu-firewall-full', 'ubuntu-firewall-partial']
        - firewall is defined
        - firewall.enabled | default(false)
        - ufw_status_check is defined

    - name: REQ-SS-003 - Verify complex rules applied (full configuration)
      ansible.builtin.assert:
        that:
          - "'80/tcp' in ufw_status_check.stdout"
          - "'443/tcp' in ufw_status_check.stdout"
          - "'10.0.0.0/8' in ufw_status_check.stdout"
          - "'DENY' in ufw_status_check.stdout"
        fail_msg: "❌ REQ-SS-003: Complex UFW rules should be applied correctly"
        success_msg: "✅ REQ-SS-003: Complex UFW rules correctly applied"
      when:
        - inventory_hostname == 'ubuntu-firewall-full'
        - firewall is defined
        - firewall.enabled | default(false)
        - ufw_status_check is defined

    - name: REQ-SS-003 - Verify empty rules handled gracefully (edge cases)
      ansible.builtin.assert:
        that:
          - "'Status: active' in ufw_status_check.stdout"
        fail_msg: "❌ REQ-SS-003: UFW should be active even with empty rules"
        success_msg: "✅ REQ-SS-003: Empty rules handled gracefully"
      when:
        - inventory_hostname == 'ubuntu-edge-cases'
        - firewall is defined
        - firewall.enabled | default(false)
        - ufw_status_check is defined

    # ===== REQ-SS-004: UFW Service State Management =====
    - name: REQ-SS-004 - Verify UFW service enabled (positive cases)
      ansible.builtin.assert:
        that:
          - "'Status: active' in ufw_status_check.stdout"
        fail_msg: "❌ REQ-SS-004: UFW service should be enabled when firewall.enabled is true"
        success_msg: "✅ REQ-SS-004: UFW service correctly enabled"
      when:
        - inventory_hostname in ['ubuntu-firewall-full', 'ubuntu-firewall-partial', 'ubuntu-edge-cases']
        - firewall is defined
        - firewall.enabled | default(false)
        - ufw_status_check is defined

    - name: REQ-SS-004 - Verify UFW service not modified when disabled (negative cases)
      ansible.builtin.debug:
        msg: "✅ REQ-SS-004: UFW service correctly left unmodified when firewall disabled"
      when:
        - inventory_hostname in ['ubuntu-security-disabled', 'ubuntu-fail2ban-only']
        - firewall is defined
        - not (firewall.enabled | default(false))

    # ===== Test Summary for REQ-SS-003 and REQ-SS-004 =====
    - name: REQ-SS-003/004 - Firewall configuration validation summary
      ansible.builtin.debug:
        msg:
          - "✅ REQ-SS-003/004: Firewall configuration validation completed"
          - "- Rule application: Rules applied additively"
          - "- Complex rules: Multiple rule types handled properly"
          - "- Empty rules: Graceful handling of edge cases"
          - "- Service state: UFW enabled/disabled based on configuration"

    # ===== REQ-SS-005: Fail2ban Package Installation =====
    - name: REQ-SS-005 - Verify fail2ban package installation (positive cases)
      ansible.builtin.assert:
        that:
          - "'fail2ban' in ansible_facts.packages"
        fail_msg: "❌ REQ-SS-005: fail2ban package should be installed when fail2ban.enabled is true"
        success_msg: "✅ REQ-SS-005: fail2ban package correctly installed"
      when:
        - inventory_hostname in ['ubuntu-firewall-full', 'ubuntu-fail2ban-only']
        - fail2ban is defined
        - fail2ban.enabled | default(false)

    - name: REQ-SS-005 - Verify fail2ban package not installed (negative cases)
      ansible.builtin.assert:
        that:
          - "'fail2ban' not in ansible_facts.packages or ansible_facts.packages['fail2ban'] | length == 0"
        fail_msg: "❌ REQ-SS-005: fail2ban package should not be installed when fail2ban.enabled is false"
        success_msg: "✅ REQ-SS-005: fail2ban package correctly absent"
      when:
        - inventory_hostname in ['ubuntu-security-disabled', 'ubuntu-firewall-partial']
        - fail2ban is defined
        - not (fail2ban.enabled | default(false))

    # ===== Test Summary for REQ-SS-005 =====
    - name: REQ-SS-005 - Package installation validation summary
      ansible.builtin.debug:
        msg:
          - "✅ REQ-SS-005: fail2ban package installation validation completed"
          - "- Positive cases: Package installed when fail2ban.enabled=true"
          - "- Negative cases: Package absent when fail2ban.enabled=false"

    # ===== REQ-SS-006: Fail2ban Configuration =====
    - name: Check fail2ban jail.local configuration exists
      ansible.builtin.stat:
        path: /etc/fail2ban/jail.local
      register: jail_local_check
      when:
        - fail2ban is defined
        - fail2ban.enabled | default(false)

    - name: REQ-SS-006 - Verify jail.local file created (positive cases)
      ansible.builtin.assert:
        that:
          - jail_local_check.stat.exists
          - jail_local_check.stat.mode == "0644"
          - jail_local_check.stat.pw_name == "root"
          - jail_local_check.stat.gr_name == "root"
        fail_msg: "❌ REQ-SS-006: jail.local should exist with correct permissions when fail2ban.enabled is true"
        success_msg: "✅ REQ-SS-006: jail.local file correctly created with proper permissions"
      when:
        - inventory_hostname in ['ubuntu-firewall-full', 'ubuntu-fail2ban-only']
        - fail2ban is defined
        - fail2ban.enabled | default(false)
        - jail_local_check is defined

    - name: Check jail.local configuration content
      ansible.builtin.command: cat /etc/fail2ban/jail.local
      register: jail_local_content
      changed_when: false
      failed_when: false
      when:
        - inventory_hostname in ['ubuntu-firewall-full', 'ubuntu-fail2ban-only']
        - fail2ban is defined
        - fail2ban.enabled | default(false)
        - jail_local_check is defined
        - jail_local_check.stat.exists

    - name: REQ-SS-006 - Verify fail2ban global settings configured (positive cases)
      ansible.builtin.assert:
        that:
          - "'bantime = ' in jail_local_content.stdout"
          - "'findtime = ' in jail_local_content.stdout"
          - "'maxretry = ' in jail_local_content.stdout"
        fail_msg: "❌ REQ-SS-006: jail.local should contain global fail2ban settings"
        success_msg: "✅ REQ-SS-006: fail2ban global settings correctly configured"
      when:
        - inventory_hostname in ['ubuntu-firewall-full', 'ubuntu-fail2ban-only']
        - fail2ban is defined
        - fail2ban.enabled | default(false)
        - jail_local_content is defined

    - name: REQ-SS-006 - Verify fail2ban jail configurations (positive cases)
      ansible.builtin.assert:
        that:
          - "'[sshd]' in jail_local_content.stdout"
          - "'enabled = true' in jail_local_content.stdout"
        fail_msg: "❌ REQ-SS-006: jail.local should contain configured jails"
        success_msg: "✅ REQ-SS-006: fail2ban jail configurations correctly applied"
      when:
        - inventory_hostname in ['ubuntu-firewall-full', 'ubuntu-fail2ban-only']
        - fail2ban is defined
        - fail2ban.enabled | default(false)
        - fail2ban.jails is defined
        - fail2ban.jails | length > 0
        - jail_local_content is defined

    # ===== Test Summary for REQ-SS-006 =====
    - name: REQ-SS-006 - Configuration validation summary
      ansible.builtin.debug:
        msg:
          - "✅ REQ-SS-006: fail2ban configuration validation completed"
          - "- File creation: jail.local created with correct permissions"
          - "- Global settings: bantime, findtime, maxretry configured"
          - "- Jail configuration: Jails correctly defined and enabled"

    # ===== REQ-SS-007: Fail2ban Service Management =====
    - name: REQ-SS-007 - Verify fail2ban service enabled and running (positive cases)
      ansible.builtin.assert:
        that:
          - ansible_facts.services['fail2ban.service'].state == 'running'
          - ansible_facts.services['fail2ban.service'].status == 'enabled'
        fail_msg: "❌ REQ-SS-007: fail2ban service should be running and enabled when fail2ban.enabled is true"
        success_msg: "✅ REQ-SS-007: fail2ban service correctly running and enabled"
      when:
        - inventory_hostname in ['ubuntu-firewall-full', 'ubuntu-fail2ban-only']
        - fail2ban is defined
        - fail2ban.enabled | default(false)

    - name: REQ-SS-007 - Verify fail2ban service not running when disabled (negative cases)
      ansible.builtin.debug:
        msg: "✅ REQ-SS-007: fail2ban service correctly not managed when disabled"
      when:
        - inventory_hostname in ['ubuntu-security-disabled', 'ubuntu-firewall-partial']
        - fail2ban is defined
        - not (fail2ban.enabled | default(false))

    - name: REQ-SS-007 - Verify edge case handling (empty jails)
      ansible.builtin.debug:
        msg: "✅ REQ-SS-007: fail2ban service handles empty jails configuration gracefully"
      when:
        - inventory_hostname == 'ubuntu-edge-cases'
        - fail2ban is defined
        - fail2ban.enabled | default(false)
        - fail2ban.jails is defined
        - fail2ban.jails | length == 0

    # ===== Test Summary for REQ-SS-007 =====
    - name: REQ-SS-007 - Service management validation summary
      ansible.builtin.debug:
        msg:
          - "✅ REQ-SS-007: fail2ban service management validation completed"
          - "- Enabled cases: Service running and enabled when fail2ban.enabled=true"
          - "- Disabled cases: Service not managed when fail2ban.enabled=false"
          - "- Edge cases: Empty jails configuration handled gracefully"

    # ===== Overall Security Services Validation Summary =====
    - name: Complete security services validation summary
      ansible.builtin.debug:
        msg:
          - "🔒 SECURITY SERVICES VALIDATION COMPLETE 🔒"
          - ""
          - "✅ REQ-SS-001: UFW package installation verified"
          - "✅ REQ-SS-002: SSH protection during firewall operations verified"
          - "✅ REQ-SS-003: Firewall rules configuration verified"
          - "✅ REQ-SS-004: UFW service state management verified"
          - "✅ REQ-SS-005: fail2ban package installation verified"
          - "✅ REQ-SS-006: fail2ban configuration verified"
          - "✅ REQ-SS-007: fail2ban service management verified"
          - ""
          - "All Linux security services requirements successfully validated!"

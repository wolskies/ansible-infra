---
# Ubuntu-specific host configuration tasks
# Platform-unique features only - common tasks handled in main.yml

# Ubuntu snap removal (optional but thorough)
- name: Remove snap packages completely (Ubuntu)
  block:
    - name: Check if snap is installed
      ansible.builtin.stat:
        path: /usr/bin/snap
      register: snap_binary

    - name: Get list of installed snap packages
      community.general.snap:
        name: hello
        state: absent
      check_mode: true
      register: snap_list
      when: snap_binary.stat.exists

    - name: Parse snap packages from list
      ansible.builtin.set_fact:
        installed_snaps: >-
          {{
            snap_list.msg | default('')
            | regex_findall('snap "([^"]+)" is not installed', multiline=True)
            | difference(['hello'])
          }}
      when:
        - snap_binary.stat.exists
        - snap_list is defined

    - name: Get all snap packages (fallback method)
      ansible.builtin.command: snap list
      register: snap_packages_cmd
      changed_when: false
      failed_when: false
      when:
        - snap_binary.stat.exists
        - installed_snaps is not defined or installed_snaps | length == 0

    - name: Parse snap packages from command
      ansible.builtin.set_fact:
        installed_snaps: >-
          {{
            snap_packages_cmd.stdout_lines[1:] | default([])
            | map('split')
            | map('first')
            | list
          }}
      when:
        - snap_packages_cmd is defined
        - snap_packages_cmd.stdout_lines is defined

    - name: Display snap packages that would be removed
      ansible.builtin.debug:
        msg: "Would remove snap package: {{ item }}"
      loop: "{{ installed_snaps | default([]) }}"
      when:
        - installed_snaps is defined
        - item not in ['core', 'core18', 'core20', 'core22', 'snapd', 'lxd', 'multipass']

    - name: Remove installed snap packages
      community.general.snap:
        name: "{{ item }}"
        state: absent
      loop: "{{ installed_snaps | default([]) }}"
      when:
        - snap_binary.stat.exists
        - installed_snaps is defined
        - item not in ['core', 'core18', 'core20', 'core22', 'snapd', 'lxd', 'multipass']
      become: true

    - name: Remove core snap packages
      community.general.snap:
        name: "{{ item }}"
        state: absent
      loop:
        - core22
        - core20
        - core18
        - core
        - snapd
      become: true
      when: snap_binary.stat.exists
      register: core_snap_removal
      failed_when:
        - core_snap_removal.rc != 0
        - "'cannot remove' not in core_snap_removal.stderr | default('')"
        - "'is not installed' not in core_snap_removal.stderr | default('')"

    - name: Check if snapd services exist before stopping
      ansible.builtin.systemd:
        name: "{{ item }}"
      register: snapd_service_status
      loop:
        - snapd.service
        - snapd.socket
        - snapd.seeded.service
      failed_when: false
      changed_when: false

    - name: Stop and disable snapd services
      ansible.builtin.systemd:
        name: "{{ item.item }}"
        state: stopped
        enabled: false
        daemon_reload: true
      loop: "{{ snapd_service_status.results }}"
      when:
        - item.status is defined
        - item.status.LoadState == "loaded"
      become: true

    - name: Remove snapd package
      ansible.builtin.apt:
        name:
          - snapd
          - gnome-software-plugin-snap
        state: absent
        purge: true
      become: true

    - name: Check if snap directories exist
      ansible.builtin.stat:
        path: "{{ item }}"
      register: snap_dirs
      loop:
        - /snap
        - /var/snap
        - /var/lib/snapd
        - /var/cache/snapd
        - /usr/lib/snapd
        - /home/{{ ansible_user }}/snap

    - name: Remove snap directories (only if empty or contain only snap data)
      ansible.builtin.file:
        path: "{{ item.item }}"
        state: absent
      loop: "{{ snap_dirs.results }}"
      when:
        - item.stat.exists
        - item.stat.isdir
      become: true
      failed_when: false  # Don't fail if directory is in use

    - name: Remove snap from PATH (system-wide)
      ansible.builtin.lineinfile:
        path: /etc/environment
        regexp: '.*snap.*'
        state: absent
      become: true

    - name: Mark snapd package as hold to prevent reinstallation
      ansible.builtin.dpkg_selections:
        name: snapd
        selection: hold
      become: true
      failed_when: false  # Package might not exist after removal

  when: config_ubuntu_disable_snap | default(false)
  tags:
    - ubuntu
    - snap
    - removal
    - system-cleanup

# APT repository management convenience features (optional)
- name: Configure APT unattended upgrades
  ansible.builtin.template:
    src: 50unattended-upgrades.j2
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    owner: root
    group: root
    mode: '0644'
  become: true
  when:
    - config_ubuntu_unattended_upgrades | default(true)
  tags:
    - ubuntu
    - updates
    - configure-host

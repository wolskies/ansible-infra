---
# Arch Linux system settings tasks

# =============================================================================
# KERNEL PARAMETERS (SYSCTL)
# =============================================================================
- name: Configure kernel parameters (sysctl)
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    sysctl_file: "{{ system_settings_sysctl.file | default('/etc/sysctl.d/99-ansible-managed.conf') }}"
    reload: true
  loop: "{{ system_settings_sysctl.parameters | default({}) | dict2items }}"
  become: true
  when:
    - system_settings_sysctl.enabled | default(false) | bool
    - system_settings_sysctl.parameters is defined
    - system_settings_sysctl.parameters | length > 0
  tags:
    - sysctl
    - kernel
    - performance

# =============================================================================
# PAM LIMITS
# =============================================================================
- name: Configure PAM limits
  community.general.pam_limits:
    domain: "{{ item.domain }}"
    limit_type: "{{ item.limit_type }}"
    limit_item: "{{ item.limit_item }}"
    value: "{{ item.value }}"
  loop: "{{ system_settings_limits.limits | default([]) }}"
  become: true
  when:
    - system_settings_limits.enabled | default(false) | bool
    - system_settings_limits.limits is defined
    - system_settings_limits.limits | length > 0
  tags:
    - limits
    - pam
    - performance

# =============================================================================
# KERNEL MODULES
# =============================================================================
- name: Load kernel modules at boot
  ansible.builtin.lineinfile:
    path: "/etc/modules-load.d/{{ item }}.conf"
    line: "{{ item }}"
    create: true
    mode: '0644'
  loop: "{{ system_settings_modules.load | default([]) }}"
  become: true
  when:
    - system_settings_modules.load is defined
    - system_settings_modules.load | length > 0
  tags:
    - modules
    - kernel

- name: Blacklist kernel modules
  ansible.builtin.lineinfile:
    path: /etc/modprobe.d/blacklist-ansible-managed.conf
    line: "blacklist {{ item }}"
    create: true
    mode: '0644'
  loop: "{{ system_settings_modules.blacklist | default([]) }}"
  become: true
  when:
    - system_settings_modules.blacklist is defined
    - system_settings_modules.blacklist | length > 0
  tags:
    - modules
    - kernel
    - blacklist

- name: Configure kernel module options
  ansible.builtin.lineinfile:
    path: "/etc/modprobe.d/{{ item.key }}-options.conf"
    line: "options {{ item.key }} {{ item.value | dict2items | map(attribute='key') | zip(item.value | dict2items | map(attribute='value')) | map('join', '=') | join(' ') }}"
    create: true
    mode: '0644'
  loop: "{{ system_settings_modules.options | default({}) | dict2items }}"
  become: true
  when:
    - system_settings_modules.options is defined
    - system_settings_modules.options | length > 0
  notify: Update mkinitcpio
  tags:
    - modules
    - kernel

# =============================================================================
# HARDWARE SERVICES
# =============================================================================
- name: Enable and start hardware services
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
    state: started
    daemon_reload: true
  loop: "{{ system_settings_services.enable | default([]) }}"
  become: true
  when:
    - system_settings_services.enable is defined
    - system_settings_services.enable | length > 0
  failed_when: false
  tags:
    - services
    - hardware

- name: Disable and stop hardware services
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: false
    state: stopped
  loop: "{{ system_settings_services.disable | default([]) }}"
  become: true
  when:
    - system_settings_services.disable is defined
    - system_settings_services.disable | length > 0
  failed_when: false
  tags:
    - services
    - hardware

- name: Mask services
  ansible.builtin.systemd:
    name: "{{ item }}"
    masked: true
    state: stopped
  loop: "{{ system_settings_services.mask | default([]) }}"
  become: true
  when:
    - system_settings_services.mask is defined
    - system_settings_services.mask | length > 0
  failed_when: false
  tags:
    - services
    - hardware

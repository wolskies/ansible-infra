#SPDX-License-Identifier: MIT-0
---
# Single-user dotfiles deployment role
# Expected variables (from discovery role output):
#   dotfiles_user: username
#   dotfiles_repository_url: git repository URL
#   dotfiles_uses_stow: boolean (default: true)
#   dotfiles_stow_packages: list of stow packages (optional)

- name: Deploy dotfiles for single user
  block:
    # Validation
    - name: Validate required variables
      ansible.builtin.fail:
        msg: "{{ item }} must be defined for dotfiles deployment"
      when: vars[item] is not defined or vars[item] == ""
      loop:
        - dotfiles_user
        - dotfiles_repository_url

    - name: Validate stow is available when needed
      ansible.builtin.command: which stow
      register: stow_check
      failed_when: false
      changed_when: false
      when: dotfiles_uses_stow | default(true)

    - name: Warn if stow is not available
      ansible.builtin.debug:
        msg: "Warning: stow is not available on this system. Dotfiles deployment may fail."
      when:
        - dotfiles_uses_stow | default(true)
        - stow_check.rc != 0

    # Get user home directory
    - name: Get user information
      ansible.builtin.getent:
        database: passwd
        key: "{{ dotfiles_user }}"

    - name: Set dotfiles directory
      ansible.builtin.set_fact:
        dotfiles_directory: "{{ getent_passwd[dotfiles_user][4] }}/.dotfiles"

    # Clone dotfiles repository
    - name: Clone or update dotfiles repository
      ansible.builtin.git:
        repo: "{{ dotfiles_repository_url }}"
        dest: "{{ dotfiles_directory }}"
        update: true
        force: false
      become: true
      become_user: "{{ dotfiles_user }}"

    - name: Check if dotfiles directory exists
      ansible.builtin.stat:
        path: "{{ dotfiles_directory }}"
      register: dotfiles_directory_stat

    # Deploy dotfiles using stow
    - name: Deploy dotfiles using stow (first attempt)
      ansible.builtin.command:
        cmd: "stow {{ dotfiles_stow_packages | default(['*']) | join(' ') }}"
        chdir: "{{ dotfiles_directory }}"
      become: true
      become_user: "{{ dotfiles_user }}"
      when:
        - dotfiles_uses_stow | default(true)
        - dotfiles_directory_stat.stat.exists
      register: stow_results
      failed_when: false
      changed_when: stow_results.rc == 0

    # Handle conflicts by backing up existing files
    - name: Handle stow conflicts by backing up existing files
      block:
        - name: Find conflicting files
          ansible.builtin.shell: |
            stow --no {{ dotfiles_stow_packages | default(['*']) | join(' ') }} 2>&1 |
            grep -E "existing target is" |
            sed 's/.*existing target is neither a link nor a directory: //'
          args:
            chdir: "{{ dotfiles_directory }}"
          become: true
          become_user: "{{ dotfiles_user }}"
          register: conflicting_files
          changed_when: false
          failed_when: false

        - name: Backup conflicting files
          ansible.builtin.copy:
            src: "{{ item }}"
            dest: "{{ item }}.dotfiles-backup"
            remote_src: true
          become: true
          become_user: "{{ dotfiles_user }}"
          loop: "{{ conflicting_files.stdout_lines }}"
          when: conflicting_files.stdout_lines | length > 0

        - name: Remove original conflicting files
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          become: true
          become_user: "{{ dotfiles_user }}"
          loop: "{{ conflicting_files.stdout_lines }}"
          when: conflicting_files.stdout_lines | length > 0

        - name: Deploy dotfiles using stow (after cleanup)
          ansible.builtin.command:
            cmd: "stow {{ dotfiles_stow_packages | default(['*']) | join(' ') }}"
            chdir: "{{ dotfiles_directory }}"
          become: true
          become_user: "{{ dotfiles_user }}"
          register: stow_retry_results
          changed_when: stow_retry_results.rc == 0

        - name: Display backup information
          ansible.builtin.debug:
            msg:
              - "Backed up {{ conflicting_files.stdout_lines | length }} conflicting files with .dotfiles-backup suffix:"
              - "{{ conflicting_files.stdout_lines }}"
          when: conflicting_files.stdout_lines | length > 0

      when:
        - dotfiles_uses_stow | default(true)
        - dotfiles_directory_stat.stat.exists
        - stow_results.rc != 0

    # Summary
    - name: Display deployment summary
      ansible.builtin.debug:
        msg:
          - "=== Dotfiles Deployment Summary ==="
          - "User: {{ dotfiles_user }}"
          - "Repository: {{ dotfiles_repository_url }}"
          - "Directory: {{ dotfiles_directory }}"
          - "Uses stow: {{ dotfiles_uses_stow | default(true) }}"
          - "Stow packages: {{ dotfiles_stow_packages | default(['*']) }}"
          - "Status: {{ 'Success' if (stow_results.rc == 0 or stow_retry_results.rc == 0) else 'Failed' }}"
          - "{{ 'Backup created: Files moved to .dotfiles-backup suffix' if (stow_results.rc != 0 and conflicting_files.stdout_lines | default([]) | length > 0) else '' }}"
  tags: dotfiles

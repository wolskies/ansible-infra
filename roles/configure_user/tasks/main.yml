---
# Configure user preferences for a single user
# Follows SRD requirements REQ-CU-001 through REQ-CU-019
# Expects target_user variable to be passed in

- name: Validate required target_user variable
  ansible.builtin.assert:
    that:
      - target_user is defined
      - target_user.name is defined
      - target_user.name | length > 0
    fail_msg: "configure_user role requires target_user variable with name field"

- name: Ensure ACL package is installed for privilege escalation
  ansible.builtin.package:
    name: acl
    state: present
  become: true
  when: ansible_os_family != 'Darwin'

# =================================================================
# REQ-CU-002: User Account Removal (simple removal first)
# =================================================================
- name: Remove user account
  ansible.builtin.user:
    name: "{{ target_user.name }}"
    state: absent
    # Uses default Ansible behavior (keeps home directory) per REQ-CU-002
  become: true
  when: target_user.state | default('present') == 'absent'
  tags:
    - user-removal
    - user-config

# =================================================================
# REQ-CU-001: User Account Creation and Configuration
# =================================================================
- name: Create user account
  ansible.builtin.user:
    name: "{{ target_user.name }}"
    state: present
    shell: "{{ target_user.shell | default('/bin/bash') }}"
    groups: "{{ target_user.groups | default(omit) }}"
    append: "{{ target_user.groups is defined }}"
    password: "{{ target_user.password | default(omit) }}"
    comment: "{{ target_user.comment | default(omit) }}"
  become: true
  when: target_user.state | default('present') == 'present'
  tags:
    - user-creation
    - user-config

# =================================================================
# REQ-CU-004: Cross-Platform Sudo Access
# =================================================================
- name: Configure platform-specific superuser access
  ansible.builtin.user:
    name: "{{ target_user.name }}"
    groups: "{{ platform_admin_group }}"
    append: true
  become: true
  vars:
    platform_admin_group: >-
      {%- if ansible_os_family == 'Debian' -%}sudo
      {%- elif ansible_os_family == 'Archlinux' -%}wheel
      {%- elif ansible_os_family == 'Darwin' -%}admin
      {%- else -%}wheel
      {%- endif -%}
  when:
    - target_user.state | default('present') == 'present'
    - target_user.superuser | default(false)
  tags:
    - sudo-access
    - user-config

# =================================================================
# REQ-CU-005: Passwordless Sudo Configuration
# =================================================================
- name: Configure passwordless sudo
  ansible.builtin.template:
    src: sudoers.j2
    dest: "/etc/sudoers.d/{{ target_user.name }}"
    mode: "0440"
    owner: root
    group: root
    validate: "visudo -cf %s"
  become: true
  when:
    - target_user.state | default('present') == 'present'
    - target_user.superuser | default(false)
    - target_user.superuser_passwordless | default(false)
  tags:
    - passwordless-sudo
    - user-config

- name: Remove passwordless sudo configuration
  ansible.builtin.file:
    path: "/etc/sudoers.d/{{ target_user.name }}"
    state: absent
  become: true
  when:
    - target_user.state | default('present') == 'absent' or
      not target_user.superuser | default(false) or
      not target_user.superuser_passwordless | default(false)
  tags:
    - passwordless-sudo
    - user-config

# =================================================================
# REQ-CU-006: SSH Key Management
# =================================================================
- name: Manage SSH authorized keys
  ansible.posix.authorized_key:
    user: "{{ target_user.name }}"
    key: "{{ ssh_key.key }}"
    comment: "{{ ssh_key.comment | default(omit) }}"
    key_options: "{{ ssh_key.options | default(omit) }}"
    state: "{{ ssh_key.state | default('present') }}"
    exclusive: "{{ ssh_key.exclusive | default(false) }}"
  become: true
  loop: "{{ target_user.ssh_keys | default([]) }}"
  loop_control:
    loop_var: ssh_key
  when:
    - target_user.state | default('present') == 'present'
    - target_user.ssh_keys is defined
    - target_user.ssh_keys | length > 0
  tags:
    - ssh-keys
    - user-config

# =================================================================
# Stop here if user is being removed
# =================================================================
- name: Skip remaining configuration for removed users
  ansible.builtin.meta: end_play
  when: target_user.state | default('present') == 'absent'

# =================================================================
# REQ-CU-007-011: Development Environment Orchestration
# =================================================================
- name: Configure language toolchains for {{ target_user.name }}
  block:
    - name: Install Node.js and packages
      ansible.builtin.include_role:
        name: wolskies.infrastructure.nodejs
      vars:
        node_user: "{{ target_user.name }}"
        node_packages: "{{ target_user.nodejs.packages }}"
      when: target_user.nodejs.packages | default([]) | length > 0
      tags: nodejs

    - name: Install Rust and packages
      ansible.builtin.include_role:
        name: wolskies.infrastructure.rust
      vars:
        rust_user: "{{ target_user.name }}"
        rust_packages: "{{ target_user.rust.packages }}"
      when: target_user.rust.packages | default([]) | length > 0
      tags: rust

    - name: Install Go and packages
      ansible.builtin.include_role:
        name: wolskies.infrastructure.go
      vars:
        go_user: "{{ target_user.name }}"
        go_packages: "{{ target_user.go.packages }}"
      when: target_user.go.packages | default([]) | length > 0
      tags: go

    - name: Install and configure Neovim
      ansible.builtin.include_role:
        name: wolskies.infrastructure.neovim
      vars:
        neovim_user: "{{ target_user.name }}"
      when: target_user.neovim.enabled | default(false)
      tags: neovim

    - name: Configure terminal emulators
      ansible.builtin.include_role:
        name: wolskies.infrastructure.terminal_config
      vars:
        terminal_user: "{{ target_user.name }}"
        terminal_entries: "{{ target_user.terminal_entries }}"
      when: target_user.terminal_entries | default([]) | length > 0
      tags: terminal
  when: target_user.name != 'root'
  tags:
    - user-config
    - language-packages

# =================================================================
# REQ-CU-012: Git Configuration
# =================================================================
- name: Configure Git settings for {{ target_user.name }}
  block:
    - name: Set Git user name
      community.general.git_config:
        name: user.name
        value: "{{ target_user.git.user_name }}"
        scope: global
      when: target_user.git.user_name is defined

    - name: Set Git user email
      community.general.git_config:
        name: user.email
        value: "{{ target_user.git.user_email }}"
        scope: global
      when: target_user.git.user_email is defined

    - name: Set Git default editor
      community.general.git_config:
        name: core.editor
        value: "{{ target_user.git.editor }}"
        scope: global
      when: target_user.git.editor is defined
  become: true
  become_user: "{{ target_user.name }}"
  when:
    - target_user.git is defined
    - target_user.name != 'root'
  tags:
    - git-config
    - user-config

# =================================================================
# REQ-CU-014-018: macOS-specific Configuration (if applicable)
# =================================================================
- name: Configure macOS-specific user preferences
  ansible.builtin.include_tasks: configure-Darwin.yml
  when:
    - ansible_system == 'Darwin'
    - target_user.Darwin is defined
    - target_user.name != 'root'
  tags:
    - macos-config
    - user-config

# =================================================================
# REQ-CU-019: Dotfiles Management
# =================================================================
- name: Configure dotfiles
  ansible.builtin.include_tasks: configure-dotfiles.yml
  when:
    - target_user.dotfiles is defined
    - target_user.dotfiles.enable | default(true)
    - target_user.name != 'root'
  tags:
    - dotfiles
    - user-config

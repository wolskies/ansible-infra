---
# Cross-platform user configuration (git, language packages)

- name: Configure Git settings for {{ target_user.name }}
  block:
    - name: Set Git user name
      community.general.git_config:
        name: user.name
        value: "{{ target_user.git.user_name }}"
        scope: global
      when: target_user.git.user_name is defined

    - name: Set Git user email
      community.general.git_config:
        name: user.email
        value: "{{ target_user.git.user_email }}"
        scope: global
      when: target_user.git.user_email is defined

    - name: Set Git default editor
      community.general.git_config:
        name: core.editor
        value: "{{ target_user.git.editor }}"
        scope: global
      when: target_user.git.editor is defined
  become: true
  become_user: "{{ target_user.name }}"
  vars:
    ansible_remote_tmp: "/tmp/.ansible-{{ target_user.name }}"
  when: target_user.git is defined
  tags:
    - git

- name: Ensure Node.js is available for package installation
  block:
    - name: Ensure dependencies for NodeSource repo (Debian/Ubuntu)
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - gnupg2
        state: present
      become: true
      when: ansible_os_family == 'Debian'

    - name: Download NodeSource signing key (Debian/Ubuntu)
      ansible.builtin.get_url:
        url: https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key
        dest: /etc/apt/signing-key-nodesource-repo.asc
        owner: root
        group: root
        mode: "0444"
      become: true
      register: node_signing_key
      when: ansible_os_family == 'Debian'

    - name: Add NodeSource repository (Debian/Ubuntu)
      ansible.builtin.deb822_repository:
        name: nodesource_20x
        uris: "https://deb.nodesource.com/node_20.x"
        types: deb
        suites: nodistro
        components: main
        signed_by: "{{ node_signing_key.dest }}"
        state: present
      become: true
      register: node_repo
      when: ansible_os_family == 'Debian'

    - name: Update apt cache if repo was added (Debian/Ubuntu)
      ansible.builtin.apt:
        update_cache: yes
      become: true
      when:
        - ansible_os_family == 'Debian'
        - node_repo is changed

    - name: Install Node.js and npm (Debian/Ubuntu)
      ansible.builtin.apt:
        name: "nodejs=20.*"
        state: present
      become: true
      when: ansible_os_family == 'Debian'

    - name: Ensure Node.js and npm are installed (Arch)
      ansible.builtin.package:
        name: npm
        state: present
      become: true
      when: ansible_os_family == 'Archlinux'
  when: target_user.nodejs.packages | default([]) | length > 0
  tags:
    - nodejs
    - language-packages

- name: Install Node.js packages for {{ target_user.name }}
  ansible.builtin.shell: npm install -g "{{ item }}"
  loop: "{{ target_user.nodejs.packages }}"
  become: true
  register: npm_install
  failed_when: npm_install.rc != 0
  changed_when: "'added' in npm_install.stdout or 'npm WARN' not in npm_install.stderr"
  when: target_user.nodejs.packages | default([]) | length > 0
  tags:
    - nodejs
    - language-packages

- name: Check if cargo is available for {{ target_user.name }}
  ansible.builtin.shell: command -v cargo || test -f ~/.cargo/bin/cargo
  register: cargo_check
  failed_when: false
  changed_when: false
  when:
    - target_user.rust.packages | default([]) | length > 0
  tags:
    - rust
    - language-packages

- name: Download rustup installer if cargo missing
  ansible.builtin.get_url:
    url: https://sh.rustup.rs
    dest: /tmp/rustup-init.sh
    mode: "0755"
  become: true
  when:
    - target_user.rust.packages | default([]) | length > 0
    - cargo_check is defined
    - cargo_check.rc != 0
  tags:
    - rust
    - language-packages

- name: Install Rust toolchain if cargo missing
  ansible.builtin.command:
    cmd: /tmp/rustup-init.sh -y --default-toolchain stable
  environment:
    RUSTUP_HOME: "{{ '/Users/' + target_user.name + '/.rustup' if ansible_system == 'Darwin' else '/home/' + target_user.name + '/.rustup' }}"
    CARGO_HOME: "{{ '/Users/' + target_user.name + '/.cargo' if ansible_system == 'Darwin' else '/home/' + target_user.name + '/.cargo' }}"
  register: rust_install
  changed_when: rust_install.rc == 0
  when:
    - target_user.rust.packages | default([]) | length > 0
    - cargo_check is defined
    - cargo_check.rc != 0
  tags:
    - rust
    - language-packages

# Note: Rust installs to user's ~/.cargo/bin which is automatically added to PATH by rustup

- name: Initialize rustup default toolchain if cargo missing
  ansible.builtin.command: >-
    {{ '/Users/' + target_user.name + '/.cargo/bin/rustup' if ansible_system == 'Darwin'
       else '/home/' + target_user.name + '/.cargo/bin/rustup' }} default stable
  environment:
    RUSTUP_HOME: "{{ '/Users/' + target_user.name + '/.rustup' if ansible_system == 'Darwin' else '/home/' + target_user.name + '/.rustup' }}"
    CARGO_HOME: "{{ '/Users/' + target_user.name + '/.cargo' if ansible_system == 'Darwin' else '/home/' + target_user.name + '/.cargo' }}"
  become: true
  become_user: "{{ target_user.name }}"
  vars:
    ansible_remote_tmp: "/tmp/.ansible-{{ target_user.name }}"
  register: rustup_default
  changed_when: "'info: using existing install' not in rustup_default.stderr"
  when:
    - target_user.rust.packages | default([]) | length > 0
    - cargo_check is defined
    - cargo_check.rc != 0
  tags:
    - rust
    - language-packages

- name: Install Rust packages for {{ target_user.name }}
  ansible.builtin.command: >-
    {{ '/Users/' + target_user.name + '/.cargo/bin/cargo' if ansible_system == 'Darwin'
       else '/home/' + target_user.name + '/.cargo/bin/cargo' }} install {{ item }}
  register: cargo_install
  changed_when: "'Installing' in cargo_install.stderr"
  loop: "{{ target_user.rust.packages }}"
  become: true
  become_user: "{{ target_user.name }}"
  vars:
    ansible_remote_tmp: "/tmp/.ansible-{{ target_user.name }}"
  environment:
    RUSTUP_HOME: "{{ '/Users/' + target_user.name + '/.rustup' if ansible_system == 'Darwin' else '/home/' + target_user.name + '/.rustup' }}"
    CARGO_HOME: "{{ '/Users/' + target_user.name + '/.cargo' if ansible_system == 'Darwin' else '/home/' + target_user.name + '/.cargo' }}"
    PATH: "{{ '/Users/' + target_user.name + '/.cargo/bin' if ansible_system == 'Darwin' else '/home/' + target_user.name + '/.cargo/bin' }}:{{ ansible_env.PATH }}"
  when:
    - target_user.rust.packages | default([]) | length > 0
  tags:
    - rust
    - language-packages

- name: Check if go is available for {{ target_user.name }}
  ansible.builtin.shell: command -v go || test -f ~/go/bin/go
  register: go_check
  failed_when: false
  changed_when: false
  when:
    - target_user.go.packages | default([]) | length > 0
  tags:
    - go
    - language-packages

- name: Download and install Go if missing
  ansible.builtin.shell: |
    GO_VERSION="1.22.0"
    case "{{ ansible_architecture }}" in
      "x86_64") ARCH="amd64" ;;
      "aarch64") ARCH="arm64" ;;
      *) ARCH="amd64" ;;
    esac

    case "{{ ansible_system }}" in
      "Linux") OS="linux" ;;
      "Darwin") OS="darwin" ;;
      *) OS="linux" ;;
    esac

    curl -L "https://golang.org/dl/go${GO_VERSION}.${OS}-${ARCH}.tar.gz" | tar -xzf - -C ~/
    mkdir -p ~/go/bin
  args:
    creates: ~/go/version
  when:
    - target_user.go.packages | default([]) | length > 0
    - go_check is defined
    - go_check.rc != 0
  tags:
    - go
    - language-packages

- name: Install Go packages for {{ target_user.name }}
  ansible.builtin.command: >-
    {{ '/Users/' + target_user.name + '/go/bin/go' if ansible_system == 'Darwin'
       else '/home/' + target_user.name + '/go/bin/go' }} install {{ item }}
  register: go_install
  changed_when: false
  loop: "{{ target_user.go.packages }}"
  environment:
    GOPATH: "{{ '/Users/' + target_user.name + '/go' if ansible_system == 'Darwin' else '/home/' + target_user.name + '/go' }}"
    GOROOT: "{{ '/Users/' + target_user.name + '/go' if ansible_system == 'Darwin' else '/home/' + target_user.name + '/go' }}"
  when:
    - target_user.go.packages | default([]) | length > 0
  tags:
    - go
    - language-packages

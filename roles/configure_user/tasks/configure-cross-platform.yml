---
# Cross-platform user configuration (git, language packages)

- name: Configure Git settings for {{ target_user.name }}
  block:
    - name: Set Git user name
      community.general.git_config:
        name: user.name
        value: "{{ target_user.git.user_name }}"
        scope: global
      when: target_user.git.user_name is defined

    - name: Set Git user email
      community.general.git_config:
        name: user.email
        value: "{{ target_user.git.user_email }}"
        scope: global
      when: target_user.git.user_email is defined

    - name: Set Git default editor
      community.general.git_config:
        name: core.editor
        value: "{{ target_user.git.editor }}"
        scope: global
      when: target_user.git.editor is defined
  become: true
  become_user: "{{ target_user.name }}"
  when: target_user.git is defined
  tags:
    - git

- name: Configure Node.js packages for {{ target_user.name }}
  block:
    - name: Check if npm is available
      ansible.builtin.command: command -v npm
      register: npm_check
      failed_when: false
      changed_when: false

    - name: Detect Homebrew owner (macOS)
      ansible.builtin.stat:
        path: /opt/homebrew
      register: homebrew_stat
      when: ansible_system == "Darwin"

    - name: Get Homebrew owner username (macOS)
      ansible.builtin.command: stat -f "%Su" /opt/homebrew
      register: homebrew_owner
      changed_when: false
      when:
        - ansible_system == "Darwin"
        - homebrew_stat.stat.exists

    - name: Install Node.js if npm missing (Linux)
      ansible.builtin.package:
        name: nodejs
        state: present
      become: true
      when:
        - npm_check.rc != 0
        - ansible_system == "Linux"

    - name: Install Node.js if npm missing (macOS via Homebrew)
      community.general.homebrew:
        name: node
        state: present
      become: true
      become_user: "{{ homebrew_owner.stdout | default('root') }}"
      when:
        - npm_check.rc != 0
        - ansible_system == "Darwin"
        - homebrew_stat.stat.exists

    - name: Install Node.js packages for user
      community.general.npm:
        name: "{{ item }}"
        global: false
        path: "{{ '~' if ansible_system == 'Darwin' else '/home/' + target_user.name }}"
      loop: "{{ target_user.nodejs.packages }}"
  become: true
  become_user: "{{ target_user.name }}"
  when:
    - target_user.nodejs.packages | default([]) | length > 0
  tags:
    - nodejs
    - language-packages

- name: Check if cargo is available for {{ target_user.name }}
  ansible.builtin.shell: command -v cargo || test -f /usr/local/cargo/bin/cargo
  register: cargo_check
  become: true
  become_user: "{{ target_user.name }}"
  failed_when: false
  changed_when: false
  when:
    - target_user.rust.packages | default([]) | length > 0
  tags:
    - rust
    - language-packages

- name: Download rustup installer if cargo missing
  ansible.builtin.get_url:
    url: https://sh.rustup.rs
    dest: /tmp/rustup-init.sh
    mode: "0755"
  become: true
  when:
    - target_user.rust.packages | default([]) | length > 0
    - cargo_check is defined
    - cargo_check.rc != 0
  tags:
    - rust
    - language-packages

- name: Install Rust toolchain if cargo missing
  ansible.builtin.command:
    cmd: /tmp/rustup-init.sh -y --default-toolchain stable
  environment:
    RUSTUP_HOME: /usr/local/rustup
    CARGO_HOME: /usr/local/cargo
  become: true
  register: rust_install
  changed_when: rust_install.rc == 0
  when:
    - target_user.rust.packages | default([]) | length > 0
    - cargo_check is defined
    - cargo_check.rc != 0
  tags:
    - rust
    - language-packages

- name: Add cargo to system PATH if cargo missing
  ansible.builtin.lineinfile:
    path: /etc/environment
    line: 'PATH="/usr/local/cargo/bin:$PATH"'
    create: true
  become: true
  when:
    - target_user.rust.packages | default([]) | length > 0
    - cargo_check is defined
    - cargo_check.rc != 0
  tags:
    - rust
    - language-packages

- name: Initialize rustup default toolchain if cargo missing
  ansible.builtin.command: /usr/local/cargo/bin/rustup default stable
  environment:
    RUSTUP_HOME: /usr/local/rustup
    CARGO_HOME: /usr/local/cargo
  become: true
  register: rustup_default
  changed_when: "'info: using existing install' not in rustup_default.stderr"
  when:
    - target_user.rust.packages | default([]) | length > 0
    - cargo_check is defined
    - cargo_check.rc != 0
  tags:
    - rust
    - language-packages

- name: Install Rust packages for {{ target_user.name }}
  ansible.builtin.command: /usr/local/cargo/bin/cargo install {{ item }}
  register: cargo_install
  changed_when: "'Installing' in cargo_install.stderr"
  loop: "{{ target_user.rust.packages }}"
  become: true
  become_user: "{{ target_user.name }}"
  environment:
    RUSTUP_HOME: /usr/local/rustup
    CARGO_HOME: "{{ '/Users/' + target_user.name + '/.cargo' if ansible_system == 'Darwin' else '/home/' + target_user.name + '/.cargo' }}"
    PATH: "/usr/local/cargo/bin:{{ ansible_env.PATH }}"
  when:
    - target_user.rust.packages | default([]) | length > 0
  tags:
    - rust
    - language-packages

- name: Check if go is available for {{ target_user.name }}
  ansible.builtin.command: command -v go
  register: go_check
  become: true
  become_user: "{{ target_user.name }}"
  failed_when: false
  changed_when: false
  when:
    - target_user.go.packages | default([]) | length > 0
  tags:
    - go
    - language-packages

- name: Install Go if missing (Linux)
  ansible.builtin.package:
    name: golang
    state: present
  become: true
  when:
    - target_user.go.packages | default([]) | length > 0
    - go_check is defined
    - go_check.rc != 0
    - ansible_system == "Linux"

- name: Install Go if missing (macOS via Homebrew)
  community.general.homebrew:
    name: go
    state: present
  become: true
  become_user: "{{ homebrew_owner.stdout | default('root') }}"
  when:
    - target_user.go.packages | default([]) | length > 0
    - go_check is defined
    - go_check.rc != 0
    - ansible_system == "Darwin"
    - homebrew_stat.stat.exists
  tags:
    - go
    - language-packages

- name: Install Go packages for {{ target_user.name }}
  ansible.builtin.command: go install {{ item }}
  register: go_install
  changed_when: false
  loop: "{{ target_user.go.packages }}"
  become: true
  become_user: "{{ target_user.name }}"
  when:
    - target_user.go.packages | default([]) | length > 0
  tags:
    - go
    - language-packages

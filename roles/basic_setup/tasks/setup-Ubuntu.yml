---
# Ubuntu basic setup and feature management
# Tags: system, locale, timezone, packages, updates, firewall, security

# System configuration (locale, timezone, language)
- name: Set system timezone
  ansible.builtin.timezone:
    name: "{{ config_system_timezone }}"
  become: true
  tags:
    - system
    - timezone
    - locale

- name: Generate system locale
  ansible.builtin.locale_gen:
    name: "{{ config_system_locale }}"
    state: present
  become: true
  when: config_system_locale != 'C'
  tags:
    - system
    - locale

- name: Set system locale
  ansible.builtin.lineinfile:
    path: /etc/default/locale
    regexp: "^{{ item.key }}="
    line: "{{ item.key }}={{ item.value }}"
    create: true
    mode: '0644'
  loop:
    - { key: "LANG", value: "{{ config_system_language }}" }
    - { key: "LC_ALL", value: "{{ config_system_locale }}" }
  become: true
  tags:
    - system
    - locale

# Ubuntu snap removal (optional but thorough)
- name: Remove snap packages completely (Ubuntu)
  block:
    - name: List installed snap packages
      ansible.builtin.command: snap list
      register: snap_packages
      failed_when: false
      changed_when: false

    - name: Remove all installed snap packages
      ansible.builtin.command: snap remove "{{ item.split()[0] }}"
      loop: "{{ snap_packages.stdout_lines[1:] if snap_packages.rc == 0 else [] }}"
      when:
        - snap_packages.rc == 0
        - snap_packages.stdout_lines | length > 1
        - item.split()[0] not in ['core', 'core18', 'core20', 'core22', 'snapd']
      become: true
      ignore_errors: true

    - name: Remove core snap packages (last)
      ansible.builtin.command: snap remove "{{ item }}"
      loop:
        - core22
        - core20
        - core18
        - core
        - snapd
      become: true
      ignore_errors: true

    - name: Stop and disable snapd services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
        enabled: false
        daemon_reload: true
      loop:
        - snapd.service
        - snapd.socket
        - snapd.seeded.service
      become: true
      ignore_errors: true

    - name: Remove snapd package
      ansible.builtin.apt:
        name:
          - snapd
          - gnome-software-plugin-snap
        state: absent
        purge: true
      become: true

    - name: Remove snap directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /snap
        - /var/snap
        - /var/lib/snapd
        - /var/cache/snapd
        - /usr/lib/snapd
        - /home/{{ ansible_user }}/snap
      become: true
      ignore_errors: true

    - name: Remove snap from PATH (system-wide)
      ansible.builtin.lineinfile:
        path: /etc/environment
        regexp: '.*snap.*'
        state: absent
      become: true

    - name: Mark snapd package as hold to prevent reinstallation
      ansible.builtin.dpkg_selections:
        name: snapd
        selection: hold
      become: true
      ignore_errors: true

  when: ubuntu_disable_snap | default(false)
  tags:
    - ubuntu
    - snap
    - removal
    - system-cleanup

- name: Update package cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
  become: true
  tags:
    - packages
    - updates
    - cache

- name: Install merged package list
  ansible.builtin.package:
    name: "{{ final_packages_install }}"
    state: present
  become: true
  when: final_packages_install | length > 0
  tags:
    - packages
    - essential
    - install

- name: Remove packages from removal list
  ansible.builtin.package:
    name: "{{ final_packages_remove }}"
    state: absent
    purge: true
  become: true
  when: final_packages_remove | length > 0
  tags:
    - packages
    - cleanup
    - remove


- name: Set package installation facts
  ansible.builtin.set_fact:
    installed_packages: "{{ final_packages_install }}"
    removed_packages: "{{ final_packages_remove }}"
  tags:
    - packages
    - facts

- name: Upgrade all packages
  ansible.builtin.apt:
    upgrade: safe
    update_cache: true
  become: true
  when:
    - enable_system_updates | default(true)
    - perform_system_upgrade | default(false)
  tags:
    - updates
    - upgrade
    - maintenance

- name: Configure unattended upgrades
  ansible.builtin.template:
    src: 50unattended-upgrades.j2
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    owner: root
    group: root
    mode: '0644'
  become: true
  when:
    - enable_system_updates | default(true)
    - enable_automatic_updates | default(true)
  tags:
    - updates
    - automatic
    - security

# Repository management (basic_setup scope) - convenience feature
- name: Add GPG keys for additional repositories (with graceful failure)
  ansible.builtin.apt_key:
    url: "{{ item }}"
    state: present
  loop: "{{ final_additional_repositories.apt.apt_keys | default([]) }}"
  become: true
  when:
    - final_additional_repositories.apt.apt_keys is defined
    - final_additional_repositories.apt.apt_keys | length > 0
    - item.startswith('http')  # Only handle URL-based keys
  ignore_errors: true  # Convenience feature - fail gracefully if keys can't be downloaded
  register: gpg_key_results
  tags:
    - repositories
    - packages
    - apt-keys

- name: Add additional package repositories (with graceful failure)
  ansible.builtin.apt_repository:
    repo: "{{ item }}"
    state: present
    update_cache: true
  loop: "{{ final_additional_repositories.apt.sources | default([]) }}"
  become: true
  when:
    - final_additional_repositories.apt.sources is defined
    - final_additional_repositories.apt.sources | length > 0
  ignore_errors: true  # Convenience feature - fail gracefully if repos can't be added
  register: repo_results
  tags:
    - repositories
    - packages
    - apt-sources

- name: Display repository setup results
  ansible.builtin.debug:
    msg:
      - "Repository setup results (convenience feature):"
      - >-
        GPG keys: {{ gpg_key_results.results | default([])
        | selectattr('failed', 'undefined') | list | length }}/{{
        final_additional_repositories.apt.apt_keys | default([]) | length }} successful
      - >-
        Repositories: {{ repo_results.results | default([])
        | selectattr('failed', 'undefined') | list | length }}/{{
        final_additional_repositories.apt.sources | default([]) | length }} successful
      - "Note: Failures are expected and will be handled by later container platform setup"
  when:
    - (gpg_key_results is defined or repo_results is defined)
    - ansible_verbosity >= 1
  tags:
    - repositories
    - debug

# Ubuntu-specific features (like snap management) can be added here when needed
# Debian-specific features can be added here when needed

- name: Check if cloud-init is installed
  ansible.builtin.stat:
    path: /etc/cloud/cloud.cfg
  register: cloud_init_config
  tags:
    - cloud-init
    - detection

- name: Disable cloud-init network management
  ansible.builtin.lineinfile:
    path: /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
    line: "network: {config: disabled}"
    create: true
    owner: root
    group: root
    mode: '0644'
  become: true
  when:
    - cloud_init_config.stat.exists
    - disable_cloud_init_network | default(true)
  tags:
    - cloud-init
    - network
    - configuration

- name: Create cloud-init disable file
  ansible.builtin.file:
    path: /etc/cloud/cloud-init.disabled
    state: touch
    owner: root
    group: root
    mode: '0644'
  become: true
  when:
    - cloud_init_config.stat.exists
    - disable_cloud_init | default(false)
  tags:
    - cloud-init
    - disable

- name: Install UFW firewall
  ansible.builtin.package:
    name: ufw
    state: present
  become: true
  tags:
    - firewall
    - security
    - install

- name: Configure UFW defaults
  community.general.ufw:
    direction: "{{ item.direction }}"
    policy: "{{ item.policy }}"
  loop:
    - { direction: 'incoming', policy: 'deny' }
    - { direction: 'outgoing', policy: 'allow' }
  become: true
  when: configure_firewall | default(true)
  tags:
    - firewall
    - security
    - defaults

- name: Allow SSH through UFW
  community.general.ufw:
    rule: allow
    name: OpenSSH
  become: true
  when: configure_firewall | default(true)
  tags:
    - firewall
    - ssh
    - security

- name: Enable UFW
  community.general.ufw:
    state: enabled
  become: true
  when:
    - configure_firewall | default(true)
    - enable_firewall | default(true)
  tags:
    - firewall
    - security
    - enable

- name: Set system timezone
  ansible.builtin.timezone:
    name: "{{ system_timezone | default('UTC') }}"
  become: true
  when: system_timezone is defined
  tags:
    - system
    - timezone
    - configuration

- name: Configure system locale
  ansible.builtin.locale_gen:
    name: "{{ system_locale | default('en_US.UTF-8') }}"
    state: present
  become: true
  when: ansible_distribution in ['Ubuntu', 'Debian']
  tags:
    - system
    - locale
    - configuration

---
# Simplified hierarchical package variable merging
# All lists are merged: all + group + host (includes discovery results)

# Define package types to merge
- name: Define package variable types
  ansible.builtin.set_fact:
    package_merge_configs:
      # OS-specific packages
      - name: "packages_install_{{ ansible_distribution }}"
        result_var: "final_packages_install"
      - name: "packages_remove_{{ ansible_distribution }}"
        result_var: "final_packages_remove"
      # Platform-specific packages
      - name: "aur_packages"
        result_var: "final_aur_packages"
        condition: "{{ ansible_distribution == 'Archlinux' }}"
      - name: "homebrew_packages"
        result_var: "final_homebrew_packages"
        condition: "{{ ansible_distribution == 'MacOSX' }}"
      - name: "homebrew_casks"
        result_var: "final_homebrew_casks"
        condition: "{{ ansible_distribution == 'MacOSX' }}"
      - name: "homebrew_taps"
        result_var: "final_homebrew_taps"
        condition: "{{ ansible_distribution == 'MacOSX' }}"
      # Language packages
      - name: "third_party_packages"
        result_var: "final_third_party_packages"
      - name: "pip_packages"
        result_var: "final_pip_packages"
      - name: "npm_packages"
        result_var: "final_npm_packages"

# Merge all package variables using loop
- name: Merge hierarchical package variables
  ansible.builtin.set_fact:
    "{{ item.result_var }}": "{{
      (vars['all_' + item.name] | default([])) +
      (vars['group_' + item.name] | default([])) +
      (vars['host_' + item.name] | default([])) +
      (vars[item.name] | default([])) | unique
    }}"
  loop: "{{ package_merge_configs }}"
  when: item.condition | default(true) | bool

# Special handling for additional repositories (nested structure)
- name: Merge additional repositories
  ansible.builtin.set_fact:
    final_additional_repositories:
      apt:
        sources: "{{
          (all_additional_repositories.apt.sources | default([])) +
          (group_additional_repositories.apt.sources | default([])) +
          (host_additional_repositories.apt.sources | default([])) +
          (additional_repositories.apt.sources | default([])) | unique
        }}"
        apt_keys: "{{
          (all_additional_repositories.apt.apt_keys | default([])) +
          (group_additional_repositories.apt.apt_keys | default([])) +
          (host_additional_repositories.apt.apt_keys | default([])) +
          (additional_repositories.apt.apt_keys | default([])) | unique
        }}"
      homebrew:
        taps: "{{
          (all_additional_repositories.homebrew.taps | default([])) +
          (group_additional_repositories.homebrew.taps | default([])) +
          (host_additional_repositories.homebrew.taps | default([])) +
          (additional_repositories.homebrew.taps | default([])) | unique
        }}"
      yum:
        repos: "{{
          (all_additional_repositories.yum.repos | default([])) +
          (group_additional_repositories.yum.repos | default([])) +
          (host_additional_repositories.yum.repos | default([])) +
          (additional_repositories.yum.repos | default([])) | unique
        }}"

# Conditional package injection based on user preferences
- name: Add shell enhancement packages if requested
  ansible.builtin.set_fact:
    final_packages_install: "{{ final_packages_install + shell_enhancement_packages_list }}"
  vars:
    shell_enhancement_packages_list: >-
      {%- set packages = [] -%}
      {%- if ansible_distribution in ['Ubuntu', 'Debian'] -%}
        {%- set packages = packages + ['zoxide', 'fzf', 'zsh', 'fastfetch'] -%}
      {%- elif ansible_distribution == 'Archlinux' -%}
        {%- set packages = packages + ['zoxide', 'fzf', 'zsh', 'fastfetch', 'eza', 'starship'] -%}
      {%- elif ansible_distribution == 'MacOSX' -%}
        {%- set packages = packages + ['zoxide', 'fzf', 'zsh', 'fastfetch', 'eza', 'starship'] -%}
      {%- endif -%}
      {{ packages }}
  when:
    - install_shell_enhancements | default(false)
    - final_packages_install is defined

- name: Add stow package if dotfiles are enabled
  ansible.builtin.set_fact:
    final_packages_install: "{{ final_packages_install + ['stow'] }}"
  when:
    - install_dotfiles_support | default(false)
    - final_packages_install is defined
    - ansible_distribution != 'MacOSX'  # stow not available on macOS via homebrew

# Apply exclusions
- name: Apply package exclusions
  ansible.builtin.set_fact:
    final_packages_install: "{{ final_packages_install | default([]) | difference(final_packages_remove | default([])) }}"

# Export variables for other roles
- name: Export merged variables for other roles
  ansible.builtin.set_fact:
    # Export for third_party_packages role
    third_party_packages: "{{ final_third_party_packages | default([]) }}"
    pip_packages: "{{ final_pip_packages | default([]) }}"
    npm_packages: "{{ final_npm_packages | default([]) }}"
    additional_repositories: "{{ final_additional_repositories | default({}) }}"
    # Export for basic_setup role internal use
    aur_packages: "{{ final_aur_packages | default([]) }}"
    homebrew_packages: "{{ final_homebrew_packages | default([]) }}"
    homebrew_casks: "{{ final_homebrew_casks | default([]) }}"

# Display summary
- name: Display hierarchical merge summary
  ansible.builtin.debug:
    msg:
      - "=== Package Merge Summary ==="
      - "OS packages ({{ ansible_distribution }}): {{ final_packages_install | default([]) | length }} to install, {{ final_packages_remove | default([]) | length }} to remove"
      - "Third-party packages: {{ final_third_party_packages | default([]) | length }}"
      - "Python packages: {{ final_pip_packages | default([]) | length }}"
      - "Node.js packages: {{ final_npm_packages | default([]) | length }}"
      - ""
      - "Platform-specific:"
      - "  AUR packages: {{ final_aur_packages | default([]) | length if ansible_distribution == 'Archlinux' else 'N/A' }}"
      - "  Homebrew packages: {{ final_homebrew_packages | default([]) | length if ansible_distribution == 'MacOSX' else 'N/A' }}"
      - "  Homebrew casks: {{ final_homebrew_casks | default([]) | length if ansible_distribution == 'MacOSX' else 'N/A' }}"
      - "  Homebrew taps: {{ final_homebrew_taps | default([]) | length if ansible_distribution == 'MacOSX' else 'N/A' }}"
      - ""
      - "Conditional packages:"
      - "  Shell enhancements: {{ 'Enabled' if install_shell_enhancements | default(false) else 'Disabled' }}"
      - "  Dotfiles support: {{ 'Enabled' if install_dotfiles_support | default(false) else 'Disabled' }}"
  when: ansible_verbosity >= 1

---
# tasks file for basic_setup
# This role provides the foundation for all machine types including:
# - Essential packages
# - Additional packages by category
# - User management
# - System configuration

- name: Validate supported OS versions
  ansible.builtin.fail:
    msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} is not supported. Supported versions: Ubuntu 24+, Debian 12+, Arch Linux (latest), macOS (latest)"
  when:
    - (ansible_distribution == "Ubuntu" and ansible_distribution_major_version | int < 24) or
      (ansible_distribution == "Debian" and ansible_distribution_major_version | int < 12)
  tags:
    - always
    - validation
    - os-check
    - basic-setup

- name: Load OS-specific variables
  ansible.builtin.include_vars: "{{ ansible_distribution }}.yml"
  when: ansible_distribution in ['Ubuntu', 'Debian', 'Archlinux'] or ansible_os_family == 'Darwin'
  tags:
    - always
    - variables
    - config
    - os-vars
    - basic-setup

- name: Load OS family variables as fallback
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"
  when: ansible_distribution not in ['Ubuntu', 'Debian', 'Archlinux'] and ansible_os_family != 'Darwin'
  tags:
    - always
    - variables
    - config
    - os-vars
    - fallback
    - basic-setup

- name: Merge hierarchical variables
  ansible.builtin.include_tasks: merge-variables.yml
  tags:
    - always
    - variables
    - merge
    - basic-setup

- name: Include OS-specific setup tasks for Debian family
  ansible.builtin.include_tasks: "setup-Debian.yml"
  when: ansible_os_family == 'Debian'
  tags:
    - always
    - os-setup
    - security
    - system-config
    - basic-setup

- name: Include OS-specific setup tasks for other OS families
  ansible.builtin.include_tasks: "setup-{{ ansible_os_family }}.yml"
  when: ansible_os_family != 'Debian'
  tags:
    - always
    - os-setup
    - security
    - system-config
    - basic-setup




- name: Add users to system (Linux only)
  become: true
  ansible.builtin.user:
    name: "{{ item.name }}"
    uid: "{{ item.uid }}"
    shell: "{{ default_user_shell }}"
    password: "{{ item.password }}"
    state: present
    create_home: true
    groups: "{{ item.groups | default([]) }}"
  loop: "{{ user_details | default([]) }}"
  when: 
    - user_details is defined
    - ansible_os_family != 'Darwin'
  tags:
    - users
    - user-creation
    - security
    - basic-setup
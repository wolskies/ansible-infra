---
# Enhanced user management with SSH keys, passwords, and nested dotfiles support

- name: Add users to system
  become: true
  ansible.builtin.user:
    name: "{{ item.name }}"
    uid: "{{ item.uid | default(omit) }}"
    group: "{{ item.gid | default(omit) }}"
    home: "{{ item.home | default(omit) }}"
    shell: "{{ item.shell | default(omit) }}"
    password: >-
      {{
        omit if 'password' not in item or item.password is none or item.password == ''
        else (item.password if item.password.startswith('$') else item.password | password_hash('sha512'))
      }}
    state: present
    create_home: "{{ item.create_home | default(omit) }}"
    groups: "{{ item.groups | default(omit) }}"
    append: true
  loop: "{{ users_config | default([]) }}"
  when: users_config | default([]) | length > 0

- name: Add SSH public keys for users
  become: true
  ansible.posix.authorized_key:
    user: "{{ item.name }}"
    key: "{{ item.ssh_pubkey }}"
    state: present
  loop: "{{ users_config | default([]) }}"
  when:
    - users_config | default([]) | length > 0
    - item.ssh_pubkey is defined
    - item.ssh_pubkey is not none
    - item.ssh_pubkey != ""
    - not item.ssh_pubkey.startswith('var_')
    - item.ssh_pubkey is match('^ssh-.*') or item.ssh_pubkey is match('^ecdsa-.*') or item.ssh_pubkey is match('^ssh-ed25519.*')

- name: Remove users from system
  become: true
  ansible.builtin.user:
    name: "{{ item }}"
    state: absent
    remove: true
  loop: "{{ users_remove | default([]) }}"
  when: users_remove | default([]) | length > 0

- name: Deploy dotfiles for users with dotfiles configuration
  ansible.builtin.include_role:
    name: wolskinet.infrastructure.dotfiles
  vars:
    dotfiles_user: "{{ user_item.name }}"
    dotfiles_repository_url: "{{ user_item.dotfiles.repo }}"
    dotfiles_repository_version: "{{ user_item.dotfiles.branch | default('main') }}"
    dotfiles_directory: >-
      {{
        user_item.dotfiles.directory | default(
          '~' + user_item.name + '/.dotfiles'
        )
      }}
  loop: "{{ users_config | default([]) }}"
  loop_control:
    loop_var: user_item
  when:
    - users_config | default([]) | length > 0
    - user_item.dotfiles is defined
    - user_item.dotfiles.enable | default(false)
    - user_item.dotfiles.repo is defined
    - user_item.dotfiles.repo != ""
    - user_item.dotfiles.repo != None

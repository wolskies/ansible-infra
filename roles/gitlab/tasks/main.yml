#SPDX-License-Identifier: MIT-0
---
# GitLab Docker Service Implementation
# Deploys GitLab CE/EE using Docker Compose with proper configuration

- name: GitLab service validation
  block:
    - name: Display GitLab deployment information
      ansible.builtin.debug:
        msg:
          - "=== GitLab Service Deployment ==="
          - "Service: {{ gitlab_hostname }}.{{ gitlab_domain }}"
          - "SSH Port: {{ gitlab_shell_ssh_port }}"
          - "Registry: {{ 'Enabled' if gitlab_registry_enabled else 'Disabled' }}"
          - "Pages: {{ 'Enabled' if gitlab_pages_enable else 'Disabled' }}"
      tags:
        - always
        - gitlab
        - info

    - name: Validate required variables
      ansible.builtin.fail:
        msg: "Required variable {{ item }} is not defined"
      when: vars[item] is not defined or vars[item] == ""
      loop:
        - gitlab_hostname
        - gitlab_domain
        - gitlab_initial_root_password
      tags:
        - always
        - gitlab
        - validation

  tags:
    - always
    - gitlab

- name: GitLab directory structure
  block:
    - name: Create GitLab service directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: root
        group: root
      loop:
        - "{{ gitlab_service_dir }}"
        - "{{ gitlab_service_dir }}/config"
        - "{{ gitlab_service_dir }}/data"
        - "{{ gitlab_service_dir }}/logs"
        - "{{ gitlab_backup_host_path }}"
      become: true
      tags:
        - gitlab
        - directories
        - filesystem

    - name: Set proper permissions on GitLab directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        recurse: false
      loop:
        - "{{ gitlab_service_dir }}"
        - "{{ gitlab_backup_host_path }}"
      become: true
      tags:
        - gitlab
        - directories
        - permissions

  tags:
    - gitlab
    - setup

- name: GitLab configuration
  block:
    - name: Generate GitLab docker-compose.yml
      ansible.builtin.template:
        src: docker-compose-gitlab.yml.j2
        dest: "{{ gitlab_service_dir }}/docker-compose.yml"
        mode: '0644'
        backup: true
      become: true
      notify: restart gitlab
      tags:
        - gitlab
        - compose
        - config

    - name: Create GitLab environment file
      ansible.builtin.template:
        src: gitlab.env.j2
        dest: "{{ gitlab_service_dir }}/.env"
        mode: '0640'
        backup: true
      become: true
      notify: restart gitlab
      when: gitlab_env_vars is defined
      tags:
        - gitlab
        - environment
        - config

  tags:
    - gitlab
    - config

- name: GitLab network configuration
  block:
    - name: Create GitLab Docker network
      community.docker.docker_network:
        name: "{{ gitlab_docker_network }}"
        driver: bridge
        state: present
      tags:
        - gitlab
        - network
        - docker

  when: gitlab_create_network | default(true)
  tags:
    - gitlab
    - network

- name: GitLab firewall configuration
  ansible.builtin.include_role:
    name: wolskinet.infrastructure.firewall
  vars:
    firewall_ports:
      - port: "{{ gitlab_web_listen_port }}"
        protocol: tcp
        comment: "GitLab HTTP"
      - port: "{{ gitlab_https_port }}"
        protocol: tcp
        comment: "GitLab HTTPS"
      - port: "{{ gitlab_shell_ssh_port }}"  
        protocol: tcp
        comment: "GitLab SSH"
      - port: "{{ gitlab_registry_port }}"
        protocol: tcp
        comment: "GitLab Registry"
        when: gitlab_registry_enabled | default(false)
    firewall_manage_ports: true
  when: gitlab_configure_firewall | default(false)
  tags:
    - gitlab
    - firewall

- name: GitLab SSL/TLS configuration (optional)
  block:
    - name: Install nginx for reverse proxy
      ansible.builtin.package:
        name: nginx
        state: present
      become: true
      when: gitlab_nginx_proxy | default(false)
      tags:
        - gitlab
        - nginx
        - ssl

    - name: Install certbot for Let's Encrypt
      ansible.builtin.package:
        name: 
          - certbot
          - python3-certbot-nginx
        state: present
      become: true
      when: gitlab_letsencrypt | default(false)
      tags:
        - gitlab
        - certbot
        - ssl

    - name: Generate nginx configuration for GitLab
      ansible.builtin.template:
        src: nginx-gitlab.conf.j2
        dest: "/etc/nginx/sites-available/{{ gitlab_hostname }}.{{ gitlab_domain }}"
        mode: '0644'
        backup: true
      become: true
      notify: restart nginx
      when: gitlab_nginx_proxy | default(false)
      tags:
        - gitlab
        - nginx
        - config

    - name: Enable nginx site for GitLab
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/{{ gitlab_hostname }}.{{ gitlab_domain }}"
        dest: "/etc/nginx/sites-enabled/{{ gitlab_hostname }}.{{ gitlab_domain }}"
        state: link
      become: true
      notify: restart nginx
      when: gitlab_nginx_proxy | default(false)
      tags:
        - gitlab
        - nginx
        - config

  when: gitlab_nginx_proxy | default(false) or gitlab_letsencrypt | default(false)
  tags:
    - gitlab
    - ssl
    - proxy

- name: GitLab service deployment
  block:
    - name: Start GitLab with Docker Compose
      community.docker.docker_compose:
        project_src: "{{ gitlab_service_dir }}"
        state: present
        pull: "{{ gitlab_pull_images | default(true) }}"
        recreate: "{{ gitlab_recreate_containers | default('smart') }}"
      become: true
      register: gitlab_deployment
      tags:
        - gitlab
        - deploy
        - containers

    - name: Wait for GitLab to be ready
      ansible.builtin.uri:
        url: "http://{{ gitlab_hostname }}.{{ gitlab_domain }}:{{ gitlab_web_listen_port }}"
        method: GET
        status_code: [200, 302]
      register: gitlab_health_check
      until: gitlab_health_check.status in [200, 302]
      retries: 30
      delay: 10
      when: gitlab_wait_for_ready | default(true)
      tags:
        - gitlab
        - health
        - verification

  tags:
    - gitlab
    - deploy

- name: GitLab post-deployment configuration
  block:
    - name: Display GitLab deployment summary
      ansible.builtin.debug:
        msg:
          - "=== GitLab Deployment Completed ==="
          - "GitLab URL: http://{{ gitlab_hostname }}.{{ gitlab_domain }}:{{ gitlab_web_listen_port }}"
          - "SSH URL: ssh://git@{{ gitlab_hostname }}.{{ gitlab_domain }}:{{ gitlab_shell_ssh_port }}"
          - "Registry URL: {{ gitlab_registry_url if gitlab_registry_enabled else 'Disabled' }}"
          - "Pages URL: {{ gitlab_pages_external_url if gitlab_pages_enable else 'Disabled' }}"
          - "Initial root password: Set in vault or defaults"
          - ""
          - "Services: {{ gitlab_deployment.services.keys() | list if gitlab_deployment.services is defined else 'Unknown' }}"
      tags:
        - always
        - gitlab
        - summary

    - name: Create GitLab backup script
      ansible.builtin.template:
        src: gitlab-backup.sh.j2
        dest: "{{ gitlab_service_dir }}/backup.sh"
        mode: '0755'
      become: true
      when: gitlab_create_backup_script | default(true)
      tags:
        - gitlab
        - backup
        - maintenance

    - name: Schedule GitLab backups
      ansible.builtin.cron:
        name: "GitLab backup"
        minute: "{{ gitlab_backup_schedule.split()[0] }}"
        hour: "{{ gitlab_backup_schedule.split()[1] }}"
        day: "{{ gitlab_backup_schedule.split()[2] }}"
        month: "{{ gitlab_backup_schedule.split()[3] }}"
        weekday: "{{ gitlab_backup_schedule.split()[4] }}"
        job: "{{ gitlab_service_dir }}/backup.sh"
        user: root
        state: present
      become: true
      when: gitlab_schedule_backups | default(false)
      tags:
        - gitlab
        - backup
        - cron

  tags:
    - gitlab
    - post-deploy
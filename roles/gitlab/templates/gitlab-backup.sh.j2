#!/bin/bash
# GitLab Backup Script
# Generated by Ansible - Do not edit manually

set -euo pipefail

# Configuration
GITLAB_SERVICE_DIR="{{ gitlab_service_dir }}"
BACKUP_DIR="{{ gitlab_backup_host_path }}"
COMPOSE_FILE="${GITLAB_SERVICE_DIR}/docker-compose.yml"
GITLAB_CONTAINER_NAME="gitlab"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_RETENTION_DAYS=30

# Logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "${BACKUP_DIR}/backup.log"
}

# Ensure backup directory exists
mkdir -p "${BACKUP_DIR}"

log "Starting GitLab backup..."

# Check if GitLab is running
if ! docker compose -f "${COMPOSE_FILE}" ps | grep -q "${GITLAB_CONTAINER_NAME}"; then
    log "ERROR: GitLab container is not running"
    exit 1
fi

# Create GitLab backup
log "Creating GitLab application backup..."
docker compose -f "${COMPOSE_FILE}" exec -T gitlab gitlab-backup create BACKUP="${DATE}"

# Copy backup from container
log "Copying backup files..."
docker compose -f "${COMPOSE_FILE}" cp gitlab:/var/opt/gitlab/backups/ "${BACKUP_DIR}/"

# Backup configuration files
log "Backing up configuration files..."
tar -czf "${BACKUP_DIR}/gitlab-config-${DATE}.tar.gz" -C "${GITLAB_SERVICE_DIR}" config

# Cleanup old backups
log "Cleaning up old backups (older than ${BACKUP_RETENTION_DAYS} days)..."
find "${BACKUP_DIR}" -name "*.tar.gz" -mtime +${BACKUP_RETENTION_DAYS} -delete
find "${BACKUP_DIR}" -name "*_gitlab_backup.tar" -mtime +${BACKUP_RETENTION_DAYS} -delete

# Display backup size
BACKUP_SIZE=$(du -sh "${BACKUP_DIR}" | cut -f1)
log "GitLab backup completed successfully. Total backup size: ${BACKUP_SIZE}"

# Optional: Upload to external storage
# Add your preferred backup upload logic here (S3, rsync, etc.)

log "Backup process completed."
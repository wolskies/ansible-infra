---
- name: Manage APT repositories
  block:
    - name: Ensure old apt keys are not present in trusted.gpg.d
      ansible.builtin.file:
        path: "/etc/apt/trusted.gpg.d/{{ item.name }}.asc"
        state: absent
      loop: "{{ apt.repositories[ansible_distribution] | default([]) }}"
      become: true

    - name: Ensure old apt source lists are not present in sources.list.d
      ansible.builtin.file:
        path: "/etc/apt/sources.list.d/{{ file_item }}"
        state: absent
      loop: >-
        {%- set files = [] -%}
        {%- for repo in apt.repositories[ansible_distribution] | default([]) -%}
          {%- set _ = files.append(repo.name + '.list') -%}
          {%- set _ = files.append(repo.name | replace('_', '-') + '.list') -%}
          {%- set _ = files.append('download_' + repo.name | replace('.', '_') + '.list') -%}
        {%- endfor -%}
        {{ files | unique }}
      loop_control:
        loop_var: file_item
      become: true

    - name: Ensure APT repository dependencies are installed
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - python3-debian
          - gnupg
        state: present
        update_cache: true
        cache_valid_time: 3600
      become: true

    - name: Add or remove APT repositories
      ansible.builtin.deb822_repository:
        name: "{{ item.name }}"
        types: "{{ item.types | default('deb') }}"
        uris: "{{ item.uris }}"
        suites: "{{ item.suites }}"
        components: "{{ item.components | default(['main']) }}"
        signed_by: "{{ item.signed_by | default(omit) }}"
        state: "{{ item.state | default('present') }}"
      loop: "{{ apt.repositories[ansible_distribution] | default([]) }}"
      become: true
      register: repositories_changed
  when:
    - apt.repositories is defined
    - apt.repositories[ansible_distribution] is defined
    - apt.repositories[ansible_distribution] | length > 0

- name: Force APT cache update after repository changes
  ansible.builtin.apt:
    update_cache: true
    force_apt_get: true
  become: true
  when:
    - repositories_changed is defined
    - repositories_changed.changed | default(false)

- name: Manage packages via APT
  ansible.builtin.apt:
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
    update_cache: true
    cache_valid_time: 3600
  loop: "{{ manage_packages[ansible_os_family] | default([]) }}"
  become: true
  when: manage_packages[ansible_os_family] | default([]) | length > 0

- name: Upgrade all APT packages
  ansible.builtin.apt:
    upgrade: "{{ apt.system_upgrade.type | default('safe') }}"
  become: true
  when:
    - apt.system_upgrade is defined
    - apt.system_upgrade.enable | default(false)

- name: Gather package facts (Debian family)
  ansible.builtin.package_facts:
    manager: auto

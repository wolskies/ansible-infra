---
- name: Determine target user for Homebrew
  ansible.builtin.set_fact:
    _homebrew_user: "{{ ansible_user | default(ansible_user_id, true) | default(ansible_env.USER, true) | default(lookup('env', 'USER'), true) }}"

- name: Ensure Homebrew directory ownership is correct
  block:
    - name: Create Homebrew directory structure with correct ownership
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ _homebrew_user }}"
        group: "admin"
        mode: "0755"
      become: true
      loop:
        - /opt/homebrew
        - /opt/homebrew/bin
        - /opt/homebrew/etc
        - /opt/homebrew/include
        - /opt/homebrew/lib
        - /opt/homebrew/opt
        - /opt/homebrew/sbin
        - /opt/homebrew/share
        - /opt/homebrew/var
        - /opt/homebrew/var/homebrew
        - /opt/homebrew/var/homebrew/locks
        - /opt/homebrew/Cellar
        - /opt/homebrew/Caskroom
        - /opt/homebrew/Frameworks

    - name: Ensure recursive ownership of entire Homebrew directory
      ansible.builtin.command:
        cmd: "chown -R {{ _homebrew_user }}:admin /opt/homebrew"
      become: true
      changed_when: true
  when: ansible_os_family == "Darwin"

- name: Merge Homebrew packages from all sources
  ansible.builtin.set_fact:
    merged_homebrew_packages_install: "{{ merged_packages_install | default([]) }}"
    merged_homebrew_packages_remove: "{{ merged_packages_remove | default([]) }}"
  when: infrastructure.host.packages is defined

- name: Merge Homebrew casks from all sources
  ansible.builtin.set_fact:
    merged_homebrew_casks_install: >-
      {{
        (infrastructure.host.packages.casks_present.all | default([]) if infrastructure.host.packages.casks_present is defined else []) +
        (infrastructure.host.packages.casks_present.group | default([]) if infrastructure.host.packages.casks_present is defined else []) +
        (infrastructure.host.packages.casks_present.host | default([]) if infrastructure.host.packages.casks_present is defined else [])
        | unique | list
      }}
    merged_homebrew_casks_remove: >-
      {{
        (infrastructure.host.packages.casks_remove | default([]) if infrastructure.host.packages.casks_remove is defined else [])
        | unique | list
      }}
  when: infrastructure.host.packages is defined

- name: Install and manage packages via Homebrew (geerlingguy.mac.homebrew)
  ansible.builtin.include_role:
    name: geerlingguy.mac.homebrew
  vars:
    # Installation configuration
    homebrew_install_path: /opt/homebrew
    homebrew_brew_bin_path: /opt/homebrew/bin
    homebrew_user: "{{ _homebrew_user }}"
    homebrew_group: "admin" # macOS uses 'admin' group for Homebrew, not 'root'

    # Package management
    homebrew_installed_packages: "{{ merged_homebrew_packages_install | default([]) }}"
    homebrew_uninstalled_packages: "{{ merged_homebrew_packages_remove | default([]) }}"
    homebrew_cask_apps: "{{ merged_homebrew_casks_install | default([]) }}"
    homebrew_cask_uninstalled_apps: "{{ merged_homebrew_casks_remove | default([]) }}"

    # Taps and configuration
    homebrew_taps: "{{ infrastructure.host.packages.homebrew.taps | default([]) if infrastructure.host.packages.homebrew is defined else [] }}"
    homebrew_clear_cache: "{{ infrastructure.host.packages.homebrew.cleanup_cache | default(false) if infrastructure.host.packages.homebrew is defined else false }}"
  when: infrastructure.host.packages is defined

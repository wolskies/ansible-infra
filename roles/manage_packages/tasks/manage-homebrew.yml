---
# Homebrew package management for macOS
# Treats Homebrew as the native package manager for macOS

# =============================================================================
# HOMEBREW INSTALLATION
# =============================================================================

- name: Check if Homebrew is installed
  ansible.builtin.stat:
    path: "{{ item }}"
  register: homebrew_check
  loop:
    - "/opt/homebrew/bin/brew"      # Apple Silicon
    - "/usr/local/bin/brew"         # Intel

- name: Set Homebrew path
  ansible.builtin.set_fact:
    homebrew_path: >-
      {{
        homebrew_check.results | selectattr('stat.exists', 'equalto', true)
        | map(attribute='item') | first | default('')
      }}

- name: Install Homebrew if not present
  block:
    - name: Download and install Homebrew
      ansible.builtin.expect:
        command: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        responses:
          'Password:': "{{ ansible_become_pass }}"
        timeout: 300
      environment:
        NONINTERACTIVE: "1"
      register: homebrew_install
      changed_when: homebrew_install.rc == 0
      no_log: true

    - name: Set Homebrew path after installation
      ansible.builtin.set_fact:
        homebrew_path: >-
          {{
            "/opt/homebrew/bin/brew" if ansible_machine == "arm64"
            else "/usr/local/bin/brew"
          }}
  when:
    - homebrew_path == ""
    - homebrew_installed | default(true)  # Install by default unless explicitly disabled

# =============================================================================
# HOMEBREW TAPS MANAGEMENT
# =============================================================================

- name: Set merged Homebrew taps
  ansible.builtin.set_fact:
    merged_homebrew_taps: >-
      {{
        (all_packages_homebrew_taps | default([]) +
         group_packages_homebrew_taps | default([]) +
         host_packages_homebrew_taps | default([]) +
         packages_homebrew_taps | default([])) | unique
      }}

- name: Add Homebrew taps
  community.general.homebrew_tap:
    name: "{{ item }}"
    state: present
    path: "{{ homebrew_path | dirname }}"
  loop: "{{ merged_homebrew_taps }}"
  when:
    - homebrew_path != ""
    - merged_homebrew_taps | length > 0

# =============================================================================
# HOMEBREW PACKAGES MANAGEMENT
# =============================================================================

- name: Set merged Homebrew packages
  ansible.builtin.set_fact:
    merged_homebrew_packages: >-
      {{
        (all_packages_install_MacOSX | default([]) +
         group_packages_install_MacOSX | default([]) +
         host_packages_install_MacOSX | default([]) +
         packages_install | default([])) | unique
      }}
    merged_homebrew_packages_remove: >-
      {{
        (all_packages_remove | default([]) +
         group_packages_remove | default([]) +
         host_packages_remove | default([]) +
         packages_remove | default([])) | unique
      }}

- name: Update Homebrew
  community.general.homebrew:
    update_homebrew: true
    path: "{{ homebrew_path | dirname }}"
  when:
    - homebrew_path != ""
    - packages_macos_update_homebrew | default(true)

- name: Install Homebrew packages
  community.general.homebrew:
    name: "{{ item }}"
    state: present
    path: "{{ homebrew_path | dirname }}"
  loop: "{{ merged_homebrew_packages }}"
  when:
    - homebrew_path != ""
    - merged_homebrew_packages | length > 0

- name: Remove Homebrew packages
  community.general.homebrew:
    name: "{{ item }}"
    state: absent
    path: "{{ homebrew_path | dirname }}"
  loop: "{{ merged_homebrew_packages_remove }}"
  when:
    - homebrew_path != ""
    - merged_homebrew_packages_remove | length > 0

# =============================================================================
# HOMEBREW CASKS MANAGEMENT
# =============================================================================

- name: Set merged Homebrew casks
  ansible.builtin.set_fact:
    merged_homebrew_casks: >-
      {{
        (all_packages_homebrew_casks | default([]) +
         group_packages_homebrew_casks | default([]) +
         host_packages_homebrew_casks | default([]) +
         packages_homebrew_casks | default([])) | unique
      }}
    merged_homebrew_casks_remove: >-
      {{
        (all_packages_homebrew_casks_remove | default([]) +
         group_packages_homebrew_casks_remove | default([]) +
         host_packages_homebrew_casks_remove | default([]) +
         packages_homebrew_casks_remove | default([])) | unique
      }}

- name: Install Homebrew casks
  community.general.homebrew_cask:
    name: "{{ item }}"
    state: present
    path: "{{ homebrew_path | dirname }}"
  loop: "{{ merged_homebrew_casks }}"
  when:
    - homebrew_path != ""
    - merged_homebrew_casks | length > 0

- name: Remove Homebrew casks
  community.general.homebrew_cask:
    name: "{{ item }}"
    state: absent
    path: "{{ homebrew_path | dirname }}"
  loop: "{{ merged_homebrew_casks_remove }}"
  when:
    - homebrew_path != ""
    - merged_homebrew_casks_remove | length > 0

# =============================================================================
# HOMEBREW CLEANUP
# =============================================================================

- name: Cleanup Homebrew cache
  ansible.builtin.command: "{{ homebrew_path }} cleanup"
  register: homebrew_cleanup
  changed_when: "'Removing:' in homebrew_cleanup.stdout"
  when:
    - homebrew_path != ""
    - packages_macos_cleanup_cache | default(false)

---
# Package and Repository Discovery
# Discovers installed packages and package sources

- name: Discover package repositories
  block:
    # APT repository discovery (Debian/Ubuntu)
    - name: APT repository discovery
      block:
        - name: Read main APT sources
          ansible.builtin.slurp:
            src: /etc/apt/sources.list
          register: apt_main_sources
          become: true
          failed_when: false

        - name: Find additional APT sources
          ansible.builtin.find:
            paths: ["/etc/apt/sources.list.d"]
            patterns: "*.list"
          register: apt_additional_sources
          become: true

        - name: Read additional APT source files
          ansible.builtin.slurp:
            src: "{{ item.path }}"
          register: apt_source_contents
          loop: "{{ apt_additional_sources.files }}"
          become: true
          failed_when: false

        - name: Find APT repository keys
          ansible.builtin.find:
            paths: "{{ repository_detection.apt.keys_paths }}"
            patterns: "*.gpg"
          register: apt_keys
          become: true
      when: ansible_os_family == "Debian"
      rescue:
        - name: Handle APT discovery errors
          ansible.builtin.debug:
            msg: "APT repository discovery failed"

    # Pacman/AUR repository discovery (Arch Linux)
    - name: Pacman repository discovery
      block:
        - name: Read pacman configuration
          ansible.builtin.slurp:
            src: "{{ repository_detection.pacman.config }}"
          register: pacman_config
          become: true
          failed_when: false

        - name: Read pacman mirrorlist
          ansible.builtin.slurp:
            src: "{{ repository_detection.pacman.mirrorlist }}"
          register: pacman_mirrorlist
          become: true
          failed_when: false

        - name: Check for AUR helpers
          ansible.builtin.stat:
            path: "/usr/bin/{{ item }}"
          register: aur_helpers_check
          loop: "{{ repository_detection.aur_helpers }}"

        - name: Get AUR packages (if available)
          ansible.builtin.command: "{{ item.item }} -Qm"
          register: aur_packages
          loop: "{{ aur_helpers_check.results }}"
          when: item.stat.exists
          become: false
          changed_when: false
          failed_when: false
      when: ansible_distribution == "Archlinux"
      rescue:
        - name: Handle pacman discovery errors
          ansible.builtin.debug:
            msg: "Pacman repository discovery failed"

    # Homebrew discovery (macOS)
    - name: Homebrew discovery
      block:
        - name: Find Homebrew installation
          ansible.builtin.stat:
            path: "{{ item }}"
          register: homebrew_paths
          loop: "{{ repository_detection.homebrew.paths }}"

        - name: Set Homebrew path
          ansible.builtin.set_fact:
            homebrew_path: "{{ item.item }}"
          loop: "{{ homebrew_paths.results }}"
          when: item.stat.exists

        - name: Get Homebrew packages
          ansible.builtin.command: "{{ homebrew_path }} list --formulae"
          register: homebrew_packages
          when: homebrew_path is defined
          changed_when: false
          failed_when: false

        - name: Get Homebrew casks
          ansible.builtin.command: "{{ homebrew_path }} list --casks"
          register: homebrew_casks
          when: homebrew_path is defined
          changed_when: false
          failed_when: false

        - name: Get Homebrew taps
          ansible.builtin.command: "{{ homebrew_path }} tap"
          register: homebrew_taps
          when: homebrew_path is defined
          changed_when: false
          failed_when: false
      when: ansible_os_family == "Darwin"
      rescue:
        - name: Handle Homebrew discovery errors
          ansible.builtin.debug:
            msg: "Homebrew discovery failed"
  tags:
    - repositories
    - packages

- name: Categorize discovered packages
  ansible.builtin.set_fact:
    discovered_packages:
      total: "{{ ansible_facts.packages.keys() | length }}"
      all_packages: "{{ ansible_facts.packages.keys() | list }}"
      
      # Categorize packages
      essential: "{{ ansible_facts.packages.keys() | intersect(package_categories.essential) | list }}"
      development: "{{ ansible_facts.packages.keys() | intersect(package_categories.development) | list }}"
      server: "{{ ansible_facts.packages.keys() | intersect(package_categories.server) | list }}"
      desktop: "{{ ansible_facts.packages.keys() | intersect(package_categories.desktop) | list }}"
      desktop_environment: "{{ ansible_facts.packages.keys() | intersect(package_categories.desktop_environment) | list }}"
      
      # Package manager specific
      homebrew_formulae: "{{ homebrew_packages.stdout_lines | default([]) }}"
      homebrew_casks: "{{ homebrew_casks.stdout_lines | default([]) }}"
      aur_packages: "{{ aur_packages.results | default([]) | selectattr('stdout_lines', 'defined') | map(attribute='stdout_lines') | flatten | list }}"

- name: Store repository discovery results
  ansible.builtin.set_fact:
    discovered_repositories:
      # APT repositories
      apt:
        main_sources: "{{ apt_main_sources.content | default('') | b64decode }}"
        additional_sources: "{{ apt_additional_sources.files | default([]) | map(attribute='path') | list }}"
        source_contents: "{{ apt_source_contents.results | default([]) | selectattr('content', 'defined') | list }}"
        keys: "{{ apt_keys.files | default([]) | map(attribute='path') | list }}"
      
      # Pacman/AUR
      pacman:
        config: "{{ pacman_config.content | default('') | b64decode }}"
        mirrorlist: "{{ pacman_mirrorlist.content | default('') | b64decode }}"
        aur_helpers: "{{ (aur_helpers_check.results | default([])) | selectattr('stat', 'defined') | selectattr('stat.exists') | map(attribute='item') | list }}"
      
      # Homebrew
      homebrew:
        path: "{{ homebrew_path | default('') }}"
        taps: "{{ homebrew_taps.stdout_lines | default([]) }}"
  tags:
    - repositories
    - packages
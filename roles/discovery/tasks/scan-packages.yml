---
# Smart package filtering using native package manager knowledge

- name: Get explicitly installed packages (Arch Linux)
  ansible.builtin.command: pacman -Qe --quiet
  register: arch_explicit_packages
  become: true
  when: ansible_distribution == "Archlinux"
  changed_when: false

- name: Get manually installed packages (Ubuntu/Debian)
  ansible.builtin.command: apt-mark showmanual
  register: ubuntu_manual_packages
  become: true
  when: ansible_distribution in ["Ubuntu", "Debian"]
  changed_when: false

- name: Set user-installed packages (Arch Linux)
  ansible.builtin.set_fact:
    user_explicit_packages: "{{ arch_explicit_packages.stdout_lines | default([]) }}"
  when: ansible_distribution == "Archlinux"

- name: Set user-installed packages (Ubuntu/Debian)
  ansible.builtin.set_fact:
    user_explicit_packages: "{{ ubuntu_manual_packages.stdout_lines | default([]) }}"
  when: ansible_distribution in ["Ubuntu", "Debian"]

- name: Filter user-installed packages
  ansible.builtin.set_fact:
    discovery_packages_host: "{{ filtered_user_packages }}"
  vars:
    # Additional patterns to filter out even from user-installed packages
    system_categories:
      # Common system packages across distros
      - "^base$" # base group itself
      - "^base-devel$" # development tools group
      - "^linux$" # kernel (managed separately)
      - "^linux-firmware$" # firmware (managed separately)
      - "^linux-headers$" # kernel headers (managed separately)
      - "^nvidia-" # NVIDIA drivers (hardware specific)
      - "^amd-" # AMD drivers (hardware specific)
      - "^cuda" # CUDA (hardware specific)

      # Desktop environment meta-packages (user can add individual components)
      - "^plasma-meta$" # KDE meta package
      - "^plasma-workspace$" # KDE workspace
      - "^ubuntu-desktop" # Ubuntu desktop meta-package
      - "^ubuntu-minimal" # Ubuntu minimal meta-package

      # Audio system (managed by dedicated roles)
      - "^pipewire$" # audio system
      - "^pipewire-" # audio system components
      - "^wireplumber$" # audio session manager
      - "^pulseaudio$" # audio system

      # Package manager tools (system level)
      - "^apt$" # package manager itself
      - "^dpkg$" # package system
      - "^snapd$" # snap package system

      # Infrastructure packages (handled by dedicated roles)
      - "^docker-ce" # Docker CE packages
      - '^docker\.io$' # Docker from distro repos
      - '^containerd\.io$' # Container runtime
      - "^docker-compose" # Docker compose
      - "^nvidia-container-toolkit$" # NVIDIA container support
      - "^libnvidia-container" # NVIDIA container libs
      - "^gitlab-runner$" # GitLab CI runner
    filtered_user_packages: >-
      {{
        user_explicit_packages |
        reject('regex', system_categories | join('|')) |
        list
      }}
  when: ansible_distribution in ["Archlinux", "Ubuntu", "Debian"]

# macOS package discovery via Homebrew
- name: Discover Homebrew packages (macOS)
  block:
    - name: Check if Homebrew is installed
      ansible.builtin.stat:
        path: /opt/homebrew/bin/brew
      register: homebrew_arm

    - name: Check if Homebrew is installed (Intel)
      ansible.builtin.stat:
        path: /usr/local/bin/brew
      register: homebrew_intel
      when: not homebrew_arm.stat.exists

    - name: Get Homebrew packages (formulas)
      ansible.builtin.command: "{{ brew_path }} list --formula"
      register: homebrew_packages
      changed_when: false
      failed_when: false
      vars:
        brew_path: "{{ '/opt/homebrew/bin/brew' if homebrew_arm.stat.exists else '/usr/local/bin/brew' }}"
      when: homebrew_arm.stat.exists or homebrew_intel.stat.exists

    - name: Get Homebrew casks (GUI apps)
      ansible.builtin.command: "{{ brew_path }} list --cask"
      register: homebrew_casks
      changed_when: false
      failed_when: false
      vars:
        brew_path: "{{ '/opt/homebrew/bin/brew' if homebrew_arm.stat.exists else '/usr/local/bin/brew' }}"
      when: homebrew_arm.stat.exists or homebrew_intel.stat.exists

    - name: Get Homebrew taps (repositories)
      ansible.builtin.command: "{{ brew_path }} tap"
      register: homebrew_taps
      changed_when: false
      failed_when: false
      vars:
        brew_path: "{{ '/opt/homebrew/bin/brew' if homebrew_arm.stat.exists else '/usr/local/bin/brew' }}"
      when: homebrew_arm.stat.exists or homebrew_intel.stat.exists

    - name: Set discovered Homebrew data
      ansible.builtin.set_fact:
        discovery_packages_host: "{{ homebrew_packages.stdout_lines | default([]) }}"
        discovery_homebrew_casks: "{{ homebrew_casks.stdout_lines | default([]) }}"
        discovery_homebrew_taps: "{{ homebrew_taps.stdout_lines | default([]) }}"
        homebrew_installed: true
      when: homebrew_packages is defined or homebrew_casks is defined or homebrew_taps is defined

    - name: Set empty data if no Homebrew
      ansible.builtin.set_fact:
        discovery_packages_host: []
        discovery_homebrew_casks: []
        discovery_homebrew_taps: []
        homebrew_installed: false
      when:
        - not homebrew_arm.stat.exists
        - not homebrew_intel.stat.exists
  when: ansible_distribution == "MacOSX"

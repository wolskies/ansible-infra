---
# Discovery Role Main Tasks

- name: Initialize discovery environment
  block:
    - name: Validate supported OS
      ansible.builtin.fail:
        msg: >-
          {{ ansible_distribution }} {{ ansible_distribution_version }} not supported.
          Need: Ubuntu 24+, Debian 12+, Arch, macOS
      when:
        - (ansible_distribution == "Ubuntu" and ansible_distribution_major_version | int < 24) or
          (ansible_distribution == "Debian" and ansible_distribution_major_version | int < 12)

    - name: Set discovery output paths using Ansible inventory location
      ansible.builtin.set_fact:
        discovery_paths:
          host_vars_dir: "{{ discovery.inventory_dir | default((inventory_file | dirname) if inventory_file is defined else 'inventory') }}/host_vars/{{ inventory_hostname }}"
          host_vars_file: "{{ discovery.inventory_dir | default((inventory_file | dirname) if inventory_file is defined else 'inventory') }}/host_vars/{{ inventory_hostname }}/vars.yml"
      delegate_to: localhost

    - name: Display discovery start message
      ansible.builtin.debug:
        msg:
          - "=== Infrastructure Discovery Starting ==="
          - "Target: {{ inventory_hostname }}"
          - "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "Host vars output: {{ discovery_paths.host_vars_file }}"
          - "Host directory: {{ discovery_paths.host_vars_dir }}"

    - name: Create discovery output directories on Ansible controller
      ansible.builtin.file:
        path: "{{ discovery_paths.host_vars_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost

    - name: Initialize vars.yml with header
      ansible.builtin.copy:
        content: |
          ---
          # Host Variables for {{ inventory_hostname }}
          # Generated by wolskinet.infrastructure.discovery role
          # This file is built progressively during discovery
          
        dest: "{{ discovery_paths.host_vars_file }}"
        mode: '0644'
      delegate_to: localhost
      when: discovery.generate_configs
  tags:
    - discovery
    - setup

- name: Discover system information
  ansible.builtin.include_tasks: scan-system.yml
  tags:
    - discovery
    - system

- name: Discover packages and repositories
  ansible.builtin.include_tasks: scan-packages.yml
  tags:
    - discovery
    - packages

- name: Append package discovery results to vars.yml
  ansible.builtin.blockinfile:
    path: "{{ discovery_paths.host_vars_file }}"
    marker: "# {mark} PACKAGE CONFIGURATION"
    block: |
      {{ package_section | to_nice_yaml(width=1000) | indent(0, first=False) }}
  delegate_to: localhost
  when: 
    - discovery.generate_configs
    - discovered_packages is defined
    - package_section | length > 0
  vars:
    package_section: >-
      {%- set config = {} -%}
      {%- if discovered_packages.all_native | default([]) | length > 0 -%}
        {%- set dist_key = 'host_packages_install_' + ansible_distribution -%}
        {%- set _ = config.update({dist_key: discovered_packages.all_native | sort}) -%}
        {%- set remove_key = 'host_packages_remove_' + ansible_distribution -%}
        {%- set _ = config.update({remove_key: []}) -%}
      {%- endif -%}
      {%- if discovered_repositories is not none and discovered_repositories.apt is defined -%}
        {%- set repos = discovered_repositories.apt.third_party_repos | default([]) -%}
        {%- if repos | length > 0 -%}
          {%- set _ = config.update({'additional_apt_repositories': repos | map(attribute='repository') | list}) -%}
        {%- endif -%}
      {%- endif -%}
      {{ config }}
  tags:
    - discovery
    - packages
    - generation

- name: Discover services and security configurations
  ansible.builtin.include_tasks: scan-services.yml
  tags:
    - discovery
    - services
    - security

- name: Append firewall discovery results to vars.yml
  ansible.builtin.blockinfile:
    path: "{{ discovery_paths.host_vars_file }}"
    marker: "# {mark} FIREWALL CONFIGURATION"
    block: |
      {{ firewall_section | to_nice_yaml(width=1000) | indent(0, first=False) }}
  delegate_to: localhost
  when: 
    - discovery.generate_configs
    - discovered_security is defined
    - discovered_security.firewall.detected | default(false)
  vars:
    firewall_section: >-
      {%- set config = {} -%}
      {%- set _ = config.update({'enable_firewall': true}) -%}
      {%- set _ = config.update({'firewall_type': discovered_security.firewall.type}) -%}
      {%- if discovered_security.firewall.original_type | default('') == 'iptables' -%}
        {%- set _ = config.update({'_firewall_note': 'raw iptables management detected - switched to UFW frontend for easier rule management'}) -%}
      {%- endif -%}
      {%- if discovered_security.firewall.rules | default([]) | length > 0 -%}
        {%- set _ = config.update({'firewall_rules': discovered_security.firewall.rules}) -%}
      {%- endif -%}
      {{ config }}
  tags:
    - discovery
    - services
    - security
    - generation

- name: Discover Docker environment
  ansible.builtin.include_tasks: scan-docker.yml
  tags:
    - discovery
    - docker

- name: Append Docker discovery results to vars.yml
  ansible.builtin.blockinfile:
    path: "{{ discovery_paths.host_vars_file }}"
    marker: "# {mark} DOCKER CONFIGURATION"
    block: |
      {{ docker_section | to_nice_yaml(width=1000) | indent(0, first=False) }}
  delegate_to: localhost
  when: 
    - discovery.generate_configs
    - discovered_docker is defined
    - discovered_docker.installed | default(false)
  vars:
    docker_section: >-
      {%- set config = {} -%}
      {%- set _ = config.update({'install_docker': discovered_docker.installed}) -%}
      {%- if discovered_docker.compose_services.total | default(0) > 0 -%}
        {%- set services = [] -%}
        {%- for service in discovered_docker.compose_services.canned | default([]) -%}
          {%- set _ = services.append({'name': service.name, 'directory': service.directory, 'role': service.role}) -%}
        {%- endfor -%}
        {%- for service in discovered_docker.compose_services.generic | default([]) -%}
          {%- set _ = services.append({'name': service.name, 'directory': service.directory, 'role': 'generic'}) -%}
        {%- endfor -%}
        {%- if services | length > 0 -%}
          {%- set _ = config.update({'install_docker_services': services}) -%}
        {%- endif -%}
      {%- endif -%}
      {{ config }}
  tags:
    - discovery
    - docker
    - generation

- name: Discover user environment
  ansible.builtin.include_tasks: scan-users.yml
  tags:
    - discovery
    - users

- name: Append user discovery results to vars.yml
  ansible.builtin.blockinfile:
    path: "{{ discovery_paths.host_vars_file }}"
    marker: "# {mark} USER CONFIGURATION"
    block: |
      {{ user_section | to_nice_yaml(width=1000) | indent(0, first=False) }}
  delegate_to: localhost
  when: 
    - discovery.generate_configs
    - discovered_users is defined
    - discovered_users.system_users.regular_users_detailed | default([]) | length > 0
  vars:
    user_section: >-
      {%- set config = {} -%}
      {%- set users = [] -%}
      {%- for user_info in discovered_users.system_users.regular_users_detailed | default([]) -%}
        {%- set user = {'name': user_info.name, 'uid': user_info.uid, 'gid': user_info.gid, 'home': user_info.home, 'shell': user_info.shell, 'default_user_shell': user_info.shell.split('/') | last} -%}
        {%- if user_info.groups | default([]) | length > 0 -%}
          {%- set _ = user.update({'groups': user_info.groups}) -%}
        {%- endif -%}
        {%- set _ = user.update({'sudo_nopasswd': false, 'ssh_public_key': 'vault_' + user_info.name + '_ssh_public_key | default("")', 'ssh_password_auth': true, 'password': 'vault_' + user_info.name + '_password | default(omit)'}) -%}
        {%- if user_info.dotfiles_repo | default(false) -%}
          {%- set _ = user.update({'dotfiles_repo': true, 'dotfiles_source_type': 'repository', 'dotfiles_repository_url': user_info.dotfiles_repo_url, 'dotfiles_branch': user_info.dotfiles_repo_branch | default('main'), 'dotfiles_directory': user_info.home + '/' + user_info.dotfiles_dir}) -%}
        {%- else -%}
          {%- set _ = user.update({'dotfiles_repo': false}) -%}
        {%- endif -%}
        {%- set _ = users.append(user) -%}
      {%- endfor -%}
      {%- set _ = config.update({'discovered_users_config': users}) -%}
      {{ config }}
  tags:
    - discovery
    - users
    - generation

- name: Process discovery data
  ansible.builtin.include_tasks: process-data.yml
  tags:
    - discovery
    - processing

- name: Generate role-specific variables
  ansible.builtin.include_tasks: generate-role-vars.yml
  tags:
    - discovery
    - role-integration

- name: Append system tuning defaults to vars.yml
  ansible.builtin.blockinfile:
    path: "{{ discovery_paths.host_vars_file }}"
    marker: "# {mark} SYSTEM TUNING CONFIGURATION"
    block: |
      {{ tuning_section | to_nice_yaml(width=1000) | indent(0, first=False) }}
  delegate_to: localhost
  when: discovery.generate_configs
  vars:
    tuning_section: "{{ discovery_system_tuning_defaults }}"
  tags:
    - discovery
    - generation

- name: Append discovery metadata to vars.yml
  ansible.builtin.blockinfile:
    path: "{{ discovery_paths.host_vars_file }}"
    marker: "# {mark} DISCOVERY METADATA"
    block: |
      {{ metadata_section | to_nice_yaml(width=1000) | indent(0, first=False) }}
  delegate_to: localhost
  when: discovery.generate_configs
  vars:
    metadata_section: >-
      {%- set config = {} -%}
      {%- set info = {} -%}
      {%- set _ = info.update({'source_hostname': inventory_hostname}) -%}
      {%- set _ = info.update({'source_os': ansible_distribution + ' ' + ansible_distribution_version}) -%}
      {%- set _ = info.update({'source_architecture': ansible_architecture}) -%}
      {%- set _ = info.update({'discovery_date': ansible_date_time.iso8601}) -%}
      {%- set _ = info.update({'packages_discovered': discovered_packages.all_native | default([]) | length}) -%}
      {%- set _ = info.update({'services_discovered': discovered_services.running | default([]) | length}) -%}
      {%- if discovered_docker.installed | default(false) -%}
        {%- set _ = info.update({'docker_detected': true, 'docker_version': discovered_docker.version | default(''), 'docker_compose_available': discovered_docker.compose.available | default(false)}) -%}
      {%- else -%}
        {%- set _ = info.update({'docker_detected': false}) -%}
      {%- endif -%}
      {%- set _ = config.update({'discovery_info': info}) -%}
      {{ config }}
  tags:
    - discovery
    - generation

- name: Generate secrets template file
  ansible.builtin.include_tasks: generate-configs.yml
  when: discovery.generate_configs
  tags:
    - discovery
    - generation

- name: Display discovery completion
  block:
    - name: Show discovery summary
      ansible.builtin.debug:
        msg:
          - "=== Infrastructure Discovery Completed ==="
          - "Hostname: {{ inventory_hostname }}"
          - "Packages: {{ discovered_packages.all_native | default([]) | length }}"
          - "Services: {{ discovered_services.running | default([]) | length }}"
          - "Docker: {{ 'Enabled' if discovered_docker.installed | default(false) else 'Not installed' }}"
          - "Users discovered: {{ discovered_users.system_users.regular_users_detailed | default([]) | length }} (with per-user dotfiles config)"
          - ""
          - "Generated files:"
          - "  Host vars: {{ discovery_paths.host_vars_file }}"
          - "  Host directory: {{ discovery_paths.host_vars_dir }}"
          - ""
          - "Ready for collection use:"
          - "1. Review {{ discovery_paths.host_vars_file }}"
          - "2. Use with: ansible-playbook playbooks/your-deployment.yml -l {{ inventory_hostname }}"
          - "3. The basic_setup role will automatically use discovered packages"

  tags:
    - discovery
    - summary

---
# Generate role-specific variables based on discovery results
# Simplified to only use data that actually exists

- name: Generate role-specific variables
  block:
    - name: Generate basic_setup role variables
      ansible.builtin.set_fact:
        basic_setup_vars:
          # Package management
          "host_packages_install_{{ ansible_distribution }}": >-
            {{ discovered_packages.standard_packages | default([]) | unique }}

          # User management
          user_details:
            - name: "{{ discovered_users.current_user.name }}"
              uid: "{{ discovered_users.current_user.uid }}"
              shell: "{{ discovered_users.current_user.shell }}"

          # System configuration
          default_user_shell: "{{ discovered_users.shell_config.preferred_shell | default('/bin/bash') }}"

          # Simple feature detection
          install_development_packages: "{{ (discovered_packages.development_packages | default([])) | length > 5 }}"
          install_media_packages: "{{ discovered_desktop.detected | default(false) }}"

    - name: Generate container_platform role variables
      ansible.builtin.set_fact:
        container_platform_vars:
          # Docker configuration
          docker_users:
            - "{{ discovered_users.current_user.name }}"

          # Container services (if detected)
          container_services: "{{ discovered_docker.services | default([]) }}"

          # Networks (if detected)
          docker_networks: "{{ discovered_docker.networks | default([]) }}"
      when: discovered_docker.installed | default(false)

    - name: Generate dotfiles role variables
      ansible.builtin.set_fact:
        dotfiles_vars:
          # Repository method
          dotfiles_source_type: "{{ discovered_dotfiles.suggested_dotfiles_source_type | default('none') }}"
          dotfiles_repository_url: "{{ discovered_dotfiles.repository_url | default('') }}"
          dotfiles_branch: "{{ discovered_dotfiles.repository_branch | default('main') }}"
          dotfiles_method: "{{ 'stow' if discovered_dotfiles.uses_stow | default(false) else 'symlink' }}"

          # Backup configuration
          dotfiles_backup_existing: true
          dotfiles_backup_suffix: ".pre-ansible"
      when:
        - discovered_dotfiles is defined
        - discovered_dotfiles.suggested_dotfiles_source_type | default('none') != 'none'

    - name: Generate system_tuning role variables
      ansible.builtin.set_fact:
        system_tuning_vars:
          # Basic system tuning
          system_tuning_network_enabled: true

          # User groups for hardware access
          system_tuning_user_groups_add: >-
            {{
              (['docker'] if discovered_docker.installed | default(false) else []) +
              (['audio'] if discovered_desktop.detected | default(false) else [])
            }}

    - name: Generate maintenance role variables
      ansible.builtin.set_fact:
        maintenance_vars:
          # Basic maintenance
          system_maintenance_enabled: true
          cleanup_old_packages: true

          # Enable automatic updates for servers (no GUI)
          enable_automatic_updates: "{{ not discovered_desktop.detected | default(false) }}"

          # Development environment maintenance
          maintain_dev_tools: "{{ (discovered_packages.development_packages | default([])) | length > 5 }}"

    - name: Generate system_security role variables
      ansible.builtin.set_fact:
        system_security_vars:
          # Enable security features for servers (no GUI)
          enable_firewall: "{{ not discovered_desktop.detected | default(false) }}"
          enable_fail2ban: "{{ (not discovered_desktop.detected | default(false)) and not discovered_services.security.fail2ban_detected | default(false) }}"

          # Use discovered firewall type or default based on OS
          firewall_type: >-
            {%- if discovered_services.security.firewall_type | default('none') != 'none' -%}
              {{ discovered_services.security.firewall_type }}
            {%- elif ansible_os_family == 'Debian' -%}
              ufw
            {%- elif ansible_os_family == 'RedHat' -%}
              firewalld
            {%- else -%}
              iptables
            {%- endif %}

          # Open ports (SSH by default if detected)
          firewall_allowed_ports: >-
            {{
              (['22'] if discovered_services.security.ssh_detected | default(false) else [])
            }}

    - name: Combine all role variables
      ansible.builtin.set_fact:
        all_role_vars: >-
          {{
            basic_setup_vars | default({}) |
            combine(container_platform_vars | default({})) |
            combine(dotfiles_vars | default({})) |
            combine(system_tuning_vars | default({})) |
            combine(maintenance_vars | default({})) |
            combine(system_security_vars | default({}))
          }}

  tags:
    - discovery
    - role-integration

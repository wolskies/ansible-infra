---
# Generate role-specific variables based on discovery results
# Simplified to only use data that actually exists

- name: Generate role-specific variables
  block:
    - name: Generate basic_setup role variables
      ansible.builtin.set_fact:
        basic_setup_vars:
          # Package management - use all discovered packages
          "host_packages_install_{{ ansible_distribution }}": >-
            {{ discovered_packages.all | default([]) | unique }}

          # User management
          user_details:
            - name: "{{ discovered_users.current_user.name }}"
              uid: "{{ discovered_users.current_user.uid }}"
              shell: "{{ discovered_users.current_user.shell }}"

          # System configuration
          default_user_shell: "{{ discovered_users.shell_config.preferred_shell | default('/bin/bash') }}"

          # Simple feature detection based on package count
          install_development_packages: "{{ discovered_packages.total | default(0) > 100 }}"
          install_media_packages: "{{ discovered_desktop.detected | default(false) }}"

    - name: Generate container_platform role variables
      ansible.builtin.set_fact:
        container_platform_vars:
          # Docker configuration
          docker_users:
            - "{{ discovered_users.current_user.name }}"

          # Use geerlingguy.docker role for installation
          docker_install_compose: "{{ discovered_docker.compose.available }}"

          # Compose directory configuration
          docker_compose_dir: "{{ discovered_docker.compose_dir }}"

          # Deploy Portainer if Docker is found
          deploy_portainer: true

          # Canned services to deploy with dedicated roles
          docker_canned_services: "{{ discovered_docker.services.canned | default([]) }}"
          docker_canned_roles: "{{ discovered_docker.services.canned_roles | default([]) }}"

          # Generic services to deploy
          docker_generic_services: "{{ discovered_docker.services.generic | default([]) }}"
      when: discovered_docker.installed | default(false)

    - name: Generate dotfiles role variables
      ansible.builtin.set_fact:
        dotfiles_vars:
          # Use primary dotfiles (first user with repository, fallback to configs)
          dotfiles_source_type: >-
            {{
              'repository' if discovered_dotfiles.primary_dotfiles.repository_detected | default(false)
              else 'local_files' if discovered_dotfiles.primary_dotfiles.local_configs_detected | default(false)
              else 'none'
            }}
          dotfiles_repository_url: "{{ discovered_dotfiles.primary_dotfiles.repository_url | default('') }}"
          dotfiles_branch: "{{ discovered_dotfiles.primary_dotfiles.repository_branch | default('main') }}"
          dotfiles_method: "{{ 'stow' if discovered_dotfiles.primary_dotfiles.uses_stow | default(false) else 'symlink' }}"

          # Multi-user dotfiles information
          dotfiles_users_scanned: "{{ discovered_dotfiles.total_users_scanned | default(0) }}"
          dotfiles_users_with_configs: "{{ discovered_dotfiles.users_with_dotfiles | length | default(0) }}"
          dotfiles_primary_user: "{{ discovered_dotfiles.primary_dotfiles.user | default('') }}"

          # Backup configuration
          dotfiles_backup_existing: true
          dotfiles_backup_suffix: ".pre-ansible"
      when:
        - discovered_dotfiles is defined
        - discovered_dotfiles.users_with_dotfiles | default([]) | length > 0

    - name: Generate system_tuning role variables
      ansible.builtin.set_fact:
        system_tuning_vars:
          # Network and performance tuning
          system_tuning_network_enabled: true
          system_tuning_security_enabled: true
          system_tuning_ssh_hardening_enabled: true

          # Desktop-specific tuning (gaming, GPU, hardware support)
          system_tuning_gaming_enabled: "{{ discovered_desktop.detected | default(false) }}"
          system_tuning_gpu_enabled: false  # User can enable if needed
          system_tuning_camera_support_enabled: "{{ discovered_desktop.detected | default(false) }}"
          system_tuning_bluetooth_enabled: "{{ discovered_desktop.detected | default(false) }}"

          # User permissions and groups
          system_tuning_sudo_nopasswd: false  # User can enable for convenience
          system_tuning_user_groups_add: >-
            {{
              (['docker'] if discovered_docker.installed | default(false) else []) +
              (['audio'] if discovered_desktop.detected | default(false) else [])
            }}

    - name: Generate maintenance role variables
      ansible.builtin.set_fact:
        maintenance_vars:
          # Basic maintenance placeholders (user can customize)
          system_maintenance_enabled: false  # User can enable as needed
          cleanup_old_packages: false        # User can enable as needed

          # Automatic updates (user decision based on machine type)
          enable_automatic_updates: false    # User can enable as needed

          # Development environment detected - maintenance may be useful
          maintain_dev_tools: "{{ discovered_packages.total | default(0) > 100 }}"  # Many packages detected

    - name: Generate system_security role variables
      ansible.builtin.set_fact:
        system_security_vars:
          # Only configure security features that are currently detected
          enable_firewall: "{{ discovered_services.security.firewall_detected | default(false) }}"
          enable_fail2ban: "{{ discovered_services.security.fail2ban_detected | default(false) }}"

          # Use discovered firewall type (only if firewall is detected)
          firewall_type: >-
            {%- if discovered_services.security.firewall_type | default('none') != 'none' -%}
              {{ discovered_services.security.firewall_type }}
            {%- else -%}
              ""
            {%- endif %}

          # Configure ports only if SSH service is detected
          firewall_allowed_ports: >-
            {{
              (['22'] if discovered_services.security.ssh_detected | default(false) else [])
            }}
      when:
        - discovered_services.security.firewall_detected | default(false) or
          discovered_services.security.fail2ban_detected | default(false) or
          discovered_services.security.ssh_detected | default(false)

    - name: Combine all role variables
      ansible.builtin.set_fact:
        all_role_vars: >-
          {{
            basic_setup_vars | default({}) |
            combine(container_platform_vars | default({})) |
            combine(dotfiles_vars | default({})) |
            combine(system_tuning_vars | default({})) |
            combine(maintenance_vars | default({})) |
            combine(system_security_vars | default({}))
          }}

  tags:
    - discovery
    - role-integration

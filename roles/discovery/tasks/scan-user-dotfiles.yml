---
# Scan individual user for dotfiles - included with loop
# Expects: target_user variable from loop

- name: "Scan dotfiles for {{ target_user.name }}"
  block:
    - name: "Check if {{ target_user.name }}'s home directory exists"
      ansible.builtin.stat:
        path: "{{ target_user.home }}"
      register: user_home_stat

    - name: "Check for dotfiles repository for {{ target_user.name }}"
      block:
        - name: Check for .dotfiles directory
          ansible.builtin.stat:
            path: "{{ target_user.home }}/.dotfiles"
          register: dotfiles_check
          become: true

        - name: Check for dotfiles directory (fallback)
          ansible.builtin.stat:
            path: "{{ target_user.home }}/dotfiles"
          register: dotfiles_fallback_check
          become: true
          when: not (dotfiles_check.stat.exists | default(false))

        - name: Set dotfiles directory
          ansible.builtin.set_fact:
            user_dotfiles_dir: "{{ '.dotfiles' if dotfiles_check.stat.exists else 'dotfiles' if dotfiles_fallback_check.stat.exists | default(false) else '' }}"

        - name: Check if dotfiles directory is a git repository
          ansible.builtin.stat:
            path: "{{ target_user.home }}/{{ user_dotfiles_dir }}/.git"
          register: dotfiles_git_check
          become: true
          when: user_dotfiles_dir != ''

        - name: Get repository information if git repo exists
          block:
            - name: Get remote origin URL
              ansible.builtin.command: git -C {{ target_user.home }}/{{ user_dotfiles_dir }} remote get-url origin
              register: dotfiles_repo_url
              become: true
              become_user: "{{ target_user.name }}"
              changed_when: false
              failed_when: false

            - name: Get current branch
              ansible.builtin.command: git -C {{ target_user.home }}/{{ user_dotfiles_dir }} branch --show-current
              register: dotfiles_repo_branch
              become: true
              become_user: "{{ target_user.name }}"
              changed_when: false
              failed_when: false

          when:
            - user_dotfiles_dir != ''
            - dotfiles_git_check.stat.exists | default(false)

      when: user_home_stat.stat.exists and user_home_stat.stat.isdir

    - name: "Scan for existing config files when no repository found"
      block:
        - name: Check for common config files in user home
          ansible.builtin.stat:
            path: "{{ target_user.home }}/{{ item }}"
          register: user_config_files
          become: true
          loop:
            - .bashrc
            - .zshrc
            - .vimrc
            - .gitconfig
            - .tmux.conf
            - .profile

        - name: Set discovered config files list
          ansible.builtin.set_fact:
            user_discovered_config_files: "{{ user_config_files.results | selectattr('stat.exists') | map(attribute='item') | list }}"

      when:
        - user_home_stat.stat.exists and user_home_stat.stat.isdir
        - user_dotfiles_dir == ''

    - name: "Store {{ target_user.name }} dotfiles results"
      ansible.builtin.set_fact:
        user_dotfiles_results: >-
          {{
            (user_dotfiles_results | default([])) + [{
              'user': target_user.name,
              'home': target_user.home,
              'dotfiles_repo': (user_dotfiles_dir != '') and (dotfiles_git_check.stat.exists | default(false)),
              'dotfiles_dir': user_dotfiles_dir | default(''),
              'repository_url': dotfiles_repo_url.stdout | default(''),
              'repository_branch': dotfiles_repo_branch.stdout | default('main'),
              'discovered_config_files': user_discovered_config_files | default([]),
              'shell': target_user.shell
            }]
          }}

    # Reset per-user variables for next iteration
    - name: Reset user-specific variables
      ansible.builtin.set_fact:
        user_dotfiles_dir:
        user_discovered_config_files: []
        dotfiles_repo_url:
        dotfiles_repo_branch:
        dotfiles_stow_dirs:

  rescue:
    - name: "Handle errors for user {{ target_user.name }}"
      ansible.builtin.debug:
        msg: "Failed to scan dotfiles for {{ target_user.name }}, continuing with other users"

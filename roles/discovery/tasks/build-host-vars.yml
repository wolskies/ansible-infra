---
# Build host variables using exact role variable names
# No intermediate variables - direct output format

# Always build discovery metadata
- name: Build discovery metadata
  ansible.builtin.set_fact:
    discovery_host_vars: "{{ discovery_host_vars | combine({
      'discovery_metadata': {
        'source_hostname': inventory_hostname,
        'source_os': ansible_distribution + ' ' + ansible_distribution_version,
        'source_architecture': ansible_architecture,
        'discovery_date': ansible_date_time.iso8601,
        'packages_discovered': discovered_packages.all_native | default([]) | length,
        'services_discovered': discovered_services.running | default([]) | length,
        'docker_detected': discovered_docker.installed | default(false),
        'docker_version': discovered_docker.version | default('') if discovered_docker.installed | default(false) else '',
        'docker_compose_available': discovered_docker.compose.available | default(false) if discovered_docker.installed | default(false) else false
      }
    }) }}"

# Add discovered packages (manage_packages role format)
- name: Add discovered packages
  ansible.builtin.set_fact:
    discovery_host_vars: "{{ discovery_host_vars | combine({
      ('host_packages_install_' + ansible_distribution): discovered_packages.all_native | default([]) | sort
    }) }}"
  when: discovered_packages.all_native | default([]) | length > 0

- name: Add APT repositories to packages section
  ansible.builtin.set_fact:
    discovery_host_vars: "{{ discovery_host_vars | combine({
      'packages': discovery_host_vars.packages | combine({
        'host_additional_repositories': {
          'apt': {
            'sources': discovered_repositories.apt.third_party_repos | map(attribute='repository') | list,
            'apt_keys': discovered_repositories.apt.third_party_repos | selectattr('key_url', 'defined') | map(attribute='key_url') | list
          }
        }
      })
    }) }}"
  when:
    - discovered_repositories is defined
    - discovered_repositories.apt is defined
    - discovered_repositories.apt.third_party_repos | default([]) | length > 0
    - discovery_host_vars.packages | length > 0

# Build security section if firewall was detected
- name: Add security section
  ansible.builtin.set_fact:
    discovery_host_vars: "{{ discovery_host_vars | combine({
      'security': {
        'enable_firewall': discovered_security.firewall.detected,
        'firewall_type': discovered_security.firewall.type,
        'firewall_rules': discovered_security.firewall.rules | default([])
      } | combine(
        {'_firewall_note': 'raw iptables management detected - switched to UFW frontend'}
        if discovered_security.firewall.original_type | default('') == 'iptables' else {}
      )
    }) }}"
  when:
    - discovered_security is defined
    - discovered_security.firewall.detected | default(false)

# Build docker section if Docker was detected
- name: Add docker section
  ansible.builtin.set_fact:
    discovery_host_vars: "{{ discovery_host_vars | combine({
      'docker': {
        'install_docker': true,
        'docker_version': discovered_docker.version | default(''),
        'docker_compose_available': discovered_docker.compose.available | default(false)
      }
    }) }}"
  when:
    - discovered_docker is defined
    - discovered_docker.installed | default(false)

- name: Add Docker services to docker section
  ansible.builtin.set_fact:
    discovery_host_vars: "{{ discovery_host_vars | combine({
      'docker': discovery_host_vars.docker | combine({
        'install_docker_services': (
          discovered_docker.compose_services.canned | default([]) +
          discovered_docker.compose_services.generic | default([])
        )
      })
    }) }}"
  when:
    - discovery_host_vars.docker | length > 0
    - discovered_docker.compose_services.total | default(0) > 0

# Build users section if users were discovered
- name: Add users section
  ansible.builtin.set_fact:
    discovery_host_vars: "{{ discovery_host_vars | combine({
      'users': {
        'discovered_users_config': user_list
      }
    }) }}"
  vars:
    user_list: >-
      {%- set users = [] -%}
      {%- for user in discovered_users.system_users.regular_users_detailed | default([]) -%}
        {%- set user_data = {
          'name': user.name,
          'uid': user.uid | int,
          'gid': user.gid | int,
          'home': user.home,
          'shell': user.shell,
          'default_user_shell': user.shell.split('/') | last,
          'groups': user.groups | default([]),
          'sudo_nopasswd': false,
          'ssh_public_key': ('vault_' + user.name + '_ssh_public_key | default("")') | string,
          'ssh_password_auth': true,
          'password': ('vault_' + user.name + '_password | default("*")') | string
        } -%}
        {%- if user.dotfiles_repo | default(false) -%}
          {%- set _ = user_data.update({
            'dotfiles_repository_url': user.dotfiles_repo_url | trim,
            'dotfiles_uses_stow': user.dotfiles_uses_stow | default(true),
            'dotfiles_stow_packages': user.dotfiles_stow_packages | default([])
          }) -%}
        {%- endif -%}
        {%- set _ = users.append(user_data) -%}
      {%- endfor -%}
      {{ users }}
  when:
    - discovered_users is defined
    - discovered_users.system_users.regular_users_detailed | default([]) | length > 0

# Clean up empty sections
- name: Remove empty sections
  ansible.builtin.set_fact:
    discovery_host_vars: >-
      {%- set cleaned = {} -%}
      {%- for key, value in discovery_host_vars.items() -%}
        {%- if value | length > 0 or key in ['system_tuning', 'discovery_metadata'] -%}
          {%- set _ = cleaned.update({key: value}) -%}
        {%- endif -%}
      {%- endfor -%}
      {{ cleaned }}

# Build discovery status for summary
- name: Build discovery status summary
  ansible.builtin.set_fact:
    discovery_status:
      packages:
        success: "{{ 'packages' in discovery_host_vars and discovery_host_vars.packages | length > 0 }}"
        count: "{{ discovery_host_vars.packages[('host_packages_install_' + ansible_distribution)] | default([]) | length }}"
      docker:
        success: "{{ 'docker' in discovery_host_vars and discovery_host_vars.docker | length > 0 }}"
        installed: "{{ discovery_host_vars.docker.install_docker | default(false) }}"
        services: "{{ discovery_host_vars.docker.install_docker_services | default([]) | length }}"
      security:
        success: "{{ 'security' in discovery_host_vars and discovery_host_vars.security | length > 0 }}"
        firewall_detected: "{{ discovery_host_vars.security.enable_firewall | default(false) }}"
        firewall_type: "{{ discovery_host_vars.security.firewall_type | default('none') }}"
      users:
        success: "{{ 'users' in discovery_host_vars and discovery_host_vars.users | length > 0 }}"
        count: "{{ discovery_host_vars.users.discovered_users_config | default([]) | length }}"
      system_tuning:
        available: "{{ 'system_tuning' in discovery_host_vars }}"
        sections: "{{ discovery_host_vars.system_tuning.keys() | list if 'system_tuning' in discovery_host_vars else [] }}"

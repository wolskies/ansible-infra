---
# Discovers user configurations, shell preferences, and dotfiles
# This is the single source for all user-related discovery

- name: Discover user environment
  block:
    # Step 1: Get all system users and groups
    - name: Get system users
      ansible.builtin.getent:
        database: passwd
      become: true

    - name: Get group information
      ansible.builtin.getent:
        database: group
      become: true

    # Step 2: Filter to regular users (UID 1000-59999)
    - name: Create list of regular users
      ansible.builtin.set_fact:
        regular_users: >-
          {%- set users = [] -%}
          {%- for user, details in ansible_facts.getent_passwd.items() -%}
            {%- if details[1] | int >= 1000 and details[1] | int < 60000 -%}
              {%- set _ = users.append(user) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ users }}

    - name: Debug regular users found
      ansible.builtin.debug:
        msg: "Found {{ regular_users | length }} regular users: {{ regular_users }}"
      when: discovery_debug | default(true) | bool

    # Step 3: Gather user data for each regular user
    - name: Gather user data
      ansible.builtin.set_fact:
        discovered_users_data: "{{ discovered_users_data | default([]) + [user_data] }}"
      vars:
        user_details: "{{ ansible_facts.getent_passwd[item] }}"
        user_data:
          name: "{{ item }}"
          uid: "{{ user_details[1] }}"
          gid: "{{ user_details[2] }}"
          home: "{{ user_details[4] }}"
          shell: "{{ user_details[5] }}"
          groups: "{{ user_groups | default([]) }}"
          dotfiles_repo: "{{ has_dotfiles_repo | default(false) }}"
          dotfiles_dir: "{{ dotfiles_directory | default('') }}"
          dotfiles_repo_url: "{{ repo_url | default('') }}"
          dotfiles_repo_branch: "{{ repo_branch | default('main') }}"
          dotfiles_config_files: "{{ config_files | default([]) }}"
      # Get groups for this user
      loop: "{{ regular_users }}"
      when: regular_users | length > 0

# Step 4: Get groups for each user
- name: Build user group mapping using getent facts
  ansible.builtin.set_fact:
    user_groups_mapping: >-
      {%- set user_groups = {} -%}
      {%- for user in regular_users -%}
        {%- set groups = [] -%}
        {%- for group_name, group_data in ansible_facts.getent_group.items() -%}
          {%- if user in group_data[2].split(',') or group_data[1] == ansible_facts.getent_passwd[user][2] -%}
            {%- set _ = groups.append(group_name) -%}
          {%- endif -%}
        {%- endfor -%}
        {%- set _ = user_groups.update({user: groups}) -%}
      {%- endfor -%}
      {{ user_groups }}
  when: regular_users | length > 0

# Step 5: Check for dotfiles for each user
- name: Check user home directories exist
  ansible.builtin.stat:
    path: "{{ ansible_facts.getent_passwd[item][4] }}"
  register: user_homes
  loop: "{{ regular_users }}"
  when: regular_users | length > 0

- name: Check for .dotfiles directories
  ansible.builtin.stat:
    path: "{{ ansible_facts.getent_passwd[item][4] }}/.dotfiles"
  register: dotfiles_dirs
  become: true
  loop: "{{ regular_users }}"
  when:
    - regular_users | length > 0
    - user_homes.results | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false)

- name: Check for fallback dotfiles directories
  ansible.builtin.stat:
    path: "{{ ansible_facts.getent_passwd[item][4] }}/dotfiles"
  register: dotfiles_fallback_dirs
  become: true
  loop: "{{ regular_users }}"
  when:
    - regular_users | length > 0
    - user_homes.results | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false)
    - not (dotfiles_dirs.results | default([]) | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false))

- name: Check if dotfiles directories are git repositories
  ansible.builtin.stat:
    path: "{{ ansible_facts.getent_passwd[item][4] }}/{{ dotfiles_dir }}/.git"
  register: dotfiles_git_repos
  become: true
  vars:
    dotfiles_dir: >-
      {{
        '.dotfiles' if (dotfiles_dirs.results | default([]) | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false))
        else 'dotfiles' if (dotfiles_fallback_dirs.results | default([]) | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false))
        else ''
      }}
  loop: "{{ regular_users }}"
  when:
    - regular_users | length > 0
    - user_homes.results | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false)
    - dotfiles_dir != ''

- name: Read git config to get repository URL
  ansible.builtin.slurp:
    src: "{{ ansible_facts.getent_passwd[item][4] }}/{{ dotfiles_dir }}/.git/config"
  register: dotfiles_repo_urls
  become: true
  become_user: "{{ item }}"
  failed_when: false  # Config file may not exist
  vars:
    dotfiles_dir: >-
      {{
        '.dotfiles' if (dotfiles_dirs.results | default([]) | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false))
        else 'dotfiles' if (dotfiles_fallback_dirs.results | default([]) | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false))
        else ''
      }}
  loop: "{{ regular_users }}"
  when:
    - regular_users | length > 0
    - user_homes.results | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false)
    - dotfiles_dir != ''
    - dotfiles_git_repos.results | default([]) | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false)

- name: Read current git branch from HEAD file
  ansible.builtin.slurp:
    src: "{{ ansible_facts.getent_passwd[item][4] }}/{{ dotfiles_dir }}/.git/HEAD"
  register: dotfiles_repo_branches
  become: true
  become_user: "{{ item }}"
  failed_when: false  # HEAD file may not exist
  vars:
    dotfiles_dir: >-
      {{
        '.dotfiles' if (dotfiles_dirs.results | default([]) | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false))
        else 'dotfiles' if (dotfiles_fallback_dirs.results | default([]) | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false))
        else ''
      }}
  loop: "{{ regular_users }}"
  when:
    - regular_users | length > 0
    - user_homes.results | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false)
    - dotfiles_dir != ''
    - dotfiles_git_repos.results | default([]) | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false)


# Step 6: Assemble the final user data structure
- name: Build final user data structure
  ansible.builtin.set_fact:
    discovered_users_final: >-
      {{
        discovered_users_final | default([]) + [{
          'name': item,
          'uid': ansible_facts.getent_passwd[item][1],
          'gid': ansible_facts.getent_passwd[item][2],
          'home': ansible_facts.getent_passwd[item][4],
          'shell': ansible_facts.getent_passwd[item][5],
          'groups': user_groups_mapping.get(item, []),
          'dotfiles_repo': (dotfiles_git_repos.results | default([]) | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false)),
          'dotfiles_dir': dotfiles_directory,
          'dotfiles_repo_url': dotfiles_git_url,
          'dotfiles_repo_branch': dotfiles_git_branch
        }]
      }}
  vars:
    dotfiles_directory: >-
      {{
        '.dotfiles' if (dotfiles_dirs.results | default([]) | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false))
        else 'dotfiles' if (dotfiles_fallback_dirs.results | default([]) | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | first | default(false))
        else ''
      }}
    dotfiles_git_config: >-
      {{ dotfiles_repo_urls.results | default([]) | selectattr('item', 'equalto', item) | map(attribute='content') | first | default('') | b64decode }}
    dotfiles_git_url: >-
      {% set config_lines = dotfiles_git_config.split('\n') %}
      {% for line in config_lines %}
        {% if line.strip().startswith('url = ') %}
          {{ line.strip()[6:] }}
        {% endif %}
      {% endfor %}
    dotfiles_git_head: >-
      {{ dotfiles_repo_branches.results | default([]) | selectattr('item', 'equalto', item) | map(attribute='content') | first | default('') | b64decode }}
    dotfiles_git_branch: >-
      {% if dotfiles_git_head.startswith('ref: refs/heads/') %}
        {{ dotfiles_git_head[16:].strip() }}
      {% else %}
        main
      {% endif %}
  loop: "{{ regular_users }}"
  when: regular_users | length > 0

# Step 7: Store final results in the expected format
- name: Set users_config variable (manage_users role format)
  ansible.builtin.set_fact:
    users_config: "{{ discovered_users_final | default([]) }}"
  tags:
    - users
    - dotfiles
    - shell

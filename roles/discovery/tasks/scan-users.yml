---
# Simple but functional user discovery

- name: Get user and group facts
  ansible.builtin.getent:
    database: "{{ item }}"
  become: true
  loop:
    - passwd
    - group
  failed_when: false

- name: Filter regular users (UID 1000-59999)
  ansible.builtin.set_fact:
    regular_users: "{{ regular_users | default([]) + [item] }}"
  loop: "{{ ansible_facts.getent_passwd | dict2items }}"
  when:
    - ansible_facts.getent_passwd is defined
    - item.value | length > 1
    - item.value[1] | string | int >= 1000
    - item.value[1] | string | int < 60000

- name: Check for dotfiles directories
  ansible.builtin.stat:
    path: "{{ item.value[4] }}/.dotfiles"
  register: dotfiles_dirs
  become: true
  loop: "{{ regular_users }}"
  when: regular_users | length > 0

- name: Check for dotfiles git repositories
  ansible.builtin.stat:
    path: "{{ item.value[4] }}/.dotfiles/.git"
  register: dotfiles_git_dirs
  become: true
  loop: "{{ regular_users }}"
  when: regular_users | length > 0

- name: Get git remote URL for dotfiles repos
  ansible.builtin.shell: |
    cd "{{ item.value[4] }}/.dotfiles" && git config --get remote.origin.url 2>/dev/null || echo ""
  register: dotfiles_git_remotes
  become: true
  loop: "{{ regular_users }}"
  when:
    - regular_users | length > 0
    - dotfiles_git_dirs.results | selectattr('item.key', 'equalto', item.key) | map(attribute='stat.exists') | first | default(false)
  failed_when: false
  changed_when: false

- name: Build users_config for regular users (UID 1000-59999)
  ansible.builtin.set_fact:
    users_config: "{{ users_config | default([]) + [user_info] }}"
  vars:
    user_info:
      name: "{{ item.key }}"
      uid: "{{ item.value[1] }}"
      gid: "{{ item.value[2] }}"
      home: "{{ item.value[4] }}"
      shell: "{{ item.value[5] }}"
      groups: []  # Can be enhanced later if needed
      dotfiles: "{{ dotfiles_config if has_dotfiles else omit }}"
    # Check if this user has dotfiles
    has_dotfiles: "{{ dotfiles_dirs.results | selectattr('item.key', 'equalto', item.key) | map(attribute='stat.exists') | first | default(false) }}"
    # Get git remote URL for this user
    git_remote_url: "{{ dotfiles_git_remotes.results | selectattr('item.key', 'equalto', item.key) | map(attribute='stdout') | first | default('') }}"
    # Build dotfiles configuration
    dotfiles_config:
      enable: true
      repo: "{{ git_remote_url if git_remote_url != '' else 'https://github.com/' + item.key + '/dotfiles' }}"
      branch: "main"
      directory: "{{ item.value[4] }}/.dotfiles"
  loop: "{{ regular_users }}"
  when: regular_users | length > 0

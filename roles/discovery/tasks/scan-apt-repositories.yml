---
# APT Repository Discovery for Ubuntu/Debian systems
# Intelligent GPG key handling: guess URLs where possible, extract existing keys to files

- name: Check if sources.list.d directory exists
  ansible.builtin.stat:
    path: /etc/apt/sources.list.d
  register: sources_list_d_exists

- name: Find repository files in sources.list.d
  ansible.builtin.find:
    paths: /etc/apt/sources.list.d
    patterns: "*.list"
  register: repository_files
  when: sources_list_d_exists.stat.exists

- name: Read repository file contents
  ansible.builtin.slurp:
    src: "{{ item.path }}"
  register: repository_contents
  loop: "{{ repository_files.files }}"
  when: repository_files.files is defined

- name: Parse repository information and extract GPG key references
  ansible.builtin.set_fact:
    discovered_repositories: >-
      {%- set repos = [] -%}
      {%- if repository_contents.results is defined -%}
        {%- for file_result in repository_contents.results -%}
          {%- set file_content = file_result.content | b64decode -%}
          {%- set filename = file_result.source | basename | regex_replace('\.list$', '') -%}
          {%- for line in file_content.split('\n') -%}
            {%- set line = line.strip() -%}
            {%- if line and not line.startswith('#') and line.startswith('deb') -%}
              {%- set gpg_key_path = '' -%}
              {%- if 'signed-by=' in line -%}
                {%- set signed_by_match = line | regex_search('signed-by=([^\\s\\]]+)', '\\1') -%}
                {%- if signed_by_match -%}
                  {%- set gpg_key_path = signed_by_match[0] -%}
                {%- endif -%}
              {%- endif -%}
              {%- set repo_info = {
                'name': filename,
                'repo_line': line,
                'gpg_key_path': gpg_key_path,
                'gpg_key_url': ''
              } -%}
              {%- set _ = repos.append(repo_info) -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endfor -%}
      {%- endif -%}
      {{ repos }}

- name: Enhance repository information with GPG key URL guessing
  ansible.builtin.set_fact:
    discovered_repositories: >-
      {%- set enhanced_repos = [] -%}
      {%- for repo in discovered_repositories -%}
        {%- set repo_copy = repo.copy() -%}
        {%- set repo_line = repo.repo_line | lower -%}
        {%- if 'docker.com' in repo_line -%}
          {%- set _ = repo_copy.update({'gpg_key_url': 'https://download.docker.com/linux/' + ansible_distribution | lower + '/gpg'}) -%}
        {%- elif 'nginx.org' in repo_line -%}
          {%- set _ = repo_copy.update({'gpg_key_url': 'https://nginx.org/keys/nginx_signing.key'}) -%}
        {%- elif 'nodesource.com' in repo_line -%}
          {%- set _ = repo_copy.update({'gpg_key_url': 'https://deb.nodesource.com/gpgkey/nodesource.gpg.key'}) -%}
        {%- elif 'packages.microsoft.com' in repo_line -%}
          {%- set _ = repo_copy.update({'gpg_key_url': 'https://packages.microsoft.com/keys/microsoft.asc'}) -%}
        {%- elif 'dl.google.com' in repo_line -%}
          {%- set _ = repo_copy.update({'gpg_key_url': 'https://dl.google.com/linux/linux_signing_key.pub'}) -%}
        {%- elif 'apt.postgresql.org' in repo_line -%}
          {%- set _ = repo_copy.update({'gpg_key_url': 'https://www.postgresql.org/media/keys/ACCC4CF8.asc'}) -%}
        {%- elif 'packages.elastic.co' in repo_line -%}
          {%- set _ = repo_copy.update({'gpg_key_url': 'https://artifacts.elastic.co/GPG-KEY-elasticsearch'}) -%}
        {%- elif 'apt.grafana.com' in repo_line -%}
          {%- set _ = repo_copy.update({'gpg_key_url': 'https://apt.grafana.com/gpg.key'}) -%}
        {%- elif 'packages.confluent.io' in repo_line -%}
          {%- set _ = repo_copy.update({'gpg_key_url': 'https://packages.confluent.io/deb/archive.key'}) -%}
        {%- elif 'packages.redis.io' in repo_line -%}
          {%- set _ = repo_copy.update({'gpg_key_url': 'https://packages.redis.io/gpg'}) -%}
        {%- endif -%}
        {%- set _ = enhanced_repos.append(repo_copy) -%}
      {%- endfor -%}
      {{ enhanced_repos }}
  when: discovered_repositories is defined and discovered_repositories | length > 0

- name: Copy existing GPG keys to controller for repositories without URL guesses
  ansible.builtin.fetch:
    src: "{{ item.gpg_key_path }}"
    dest: "{{ discovery_paths.host_vars_dir }}/{{ item.name }}.gpg"
    flat: true
  loop: "{{ discovered_repositories | default([]) }}"
  when:
    - ansible_os_family == "Debian"
    - discovered_repositories is defined
    - discovered_repositories | length > 0
    - item.gpg_key_path != ""
    - item.gpg_key_url == ""
  failed_when: false

- name: Set final repository configuration
  ansible.builtin.set_fact:
    host_apt_repositories: "{{ discovered_repositories | default([]) }}"

- name: Debug discovered repositories
  ansible.builtin.debug:
    msg:
      - "Found {{ host_apt_repositories | length }} APT repositories"
      - "{{ host_apt_repositories | to_nice_yaml }}"
  when:
    - discovery_debug | default(false)
    - host_apt_repositories is defined


---
# Language package discovery for multiple ecosystems

# Python packages (pip)
- name: Discover Python packages
  block:
    - name: Get pip packages (global)
      ansible.builtin.command: pip3 list --format=freeze
      register: pip_packages
      changed_when: false
      failed_when: false
      become: true

    - name: Extract pip package names
      ansible.builtin.set_fact:
        pip_package_names: >-
          {{
            (pip_packages.stdout_lines | default([])
            | map('regex_replace', '^([^=]+)==.*$', '\1')
            | select('match', '^[^=]+$')
            | list)
          }}

    - name: Filter out system-managed Python packages
      ansible.builtin.set_fact:
        discovered_python_packages: >-
          {%- set filtered = [] -%}
          {%- set system_lower = system_python_packages | map('lower') | list -%}
          {%- for pkg in pip_package_names -%}
            {%- if pkg | lower not in system_lower -%}
              {%- set _ = filtered.append(pkg) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ filtered | unique | sort }}
      vars:
        # Find system packages that match pip package names (case-insensitive)
        # Convert python3-package -> package, python-package -> package
        system_python_packages: >-
          {{
            (ansible_facts.packages.keys() | default([]) | list
            | select('match', '^python3?-')
            | map('regex_replace', '^python3?-(.+)$', '\1')
            | list) +
            (ansible_facts.packages.keys() | default([]) | list
            | select('match', '^python3?$')
            | list)
          }}
  when: >
    ansible_facts.packages is defined and (
    'python3' in ansible_facts.packages or
    'python' in ansible_facts.packages or
    'python3-pip' in ansible_facts.packages)
    or ansible_system == "Darwin"

# Node.js packages (npm)
- name: Discover Node.js packages
  block:
    - name: Get npm packages (global)
      ansible.builtin.command: npm list -g --depth=0 --parseable
      register: npm_packages
      changed_when: false
      failed_when: false

    - name: Extract npm package names
      ansible.builtin.set_fact:
        npm_package_names: >-
          {{
            (npm_packages.stdout_lines | default([])
            | map('regex_replace', '^.*/node_modules/(.+)$', '\1')
            | select('match', '^[^/]+$')
            | reject('equalto', 'npm')
            | list)
          }}

    - name: Filter out system-managed Node.js packages
      ansible.builtin.set_fact:
        discovered_nodejs_packages_global: >-
          {%- set filtered = [] -%}
          {%- set system_lower = system_nodejs_packages | map('lower') | list -%}
          {%- for pkg in npm_package_names -%}
            {%- if pkg | lower not in system_lower -%}
              {%- set _ = filtered.append(pkg) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ filtered | unique | sort }}
      vars:
        # Find system packages that match npm package names (case-insensitive)
        # Convert node-package -> package, nodejs-package -> package
        system_nodejs_packages: >-
          {{
            (ansible_facts.packages.keys() | default([]) | list
            | select('match', '^nodejs?-')
            | map('regex_replace', '^nodejs?-(.+)$', '\1')
            | list) +
            (ansible_facts.packages.keys() | default([]) | list
            | select('match', '^nodejs?$')
            | list)
          }}
  when: >
    ansible_facts.packages is defined and (
    'nodejs' in ansible_facts.packages or
    'npm' in ansible_facts.packages)
    or ansible_system == "Darwin"

# Rust packages (cargo)
- name: Discover Rust packages
  block:
    - name: Get cargo installed packages
      ansible.builtin.command: cargo install --list
      register: cargo_packages
      changed_when: false
      failed_when: false

    - name: Extract cargo package names
      ansible.builtin.set_fact:
        cargo_package_names: >-
          {{
            (cargo_packages.stdout_lines | default([])
            | map('regex_replace', '^([^ ]+).*$', '\1')
            | select('match', '^[^:]+$')
            | list)
          }}

    - name: Filter out system-managed Rust packages
      ansible.builtin.set_fact:
        discovered_rust_packages: >-
          {%- set filtered = [] -%}
          {%- set system_lower = system_rust_packages | map('lower') | list -%}
          {%- for pkg in cargo_package_names -%}
            {%- if pkg | lower not in system_lower -%}
              {%- set _ = filtered.append(pkg) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ filtered | unique | sort }}
      vars:
        # Find system packages that match cargo package names (case-insensitive)
        # Convert rust-package -> package
        system_rust_packages: >-
          {{
            (ansible_facts.packages.keys() | default([]) | list
            | select('match', '^rust-')
            | map('regex_replace', '^rust-(.+)$', '\1')
            | list) +
            (ansible_facts.packages.keys() | default([]) | list
            | select('match', '^rust$')
            | list)
          }}
  when: >
    ansible_facts.packages is defined and (
    'rust' in ansible_facts.packages or
    'cargo' in ansible_facts.packages or
    'rustc' in ansible_facts.packages)
    or ansible_system == "Darwin"

# Go packages
- name: Discover Go packages
  block:
    - name: Find Go binaries in GOPATH/bin
      ansible.builtin.find:
        paths: "{{ ansible_env.HOME }}/go/bin"
        file_type: file
        patterns: "*"
      register: go_binaries
      failed_when: false

    - name: Extract Go package names (binaries)
      ansible.builtin.set_fact:
        go_package_names: >-
          {{
            (go_binaries.files | default([])
            | map(attribute='path')
            | map('basename')
            | list)
          }}

    - name: Filter out system-managed Go packages
      ansible.builtin.set_fact:
        discovered_go_packages: >-
          {%- set filtered = [] -%}
          {%- set system_lower = system_go_packages | map('lower') | list -%}
          {%- for pkg in go_package_names -%}
            {%- if pkg | lower not in system_lower -%}
              {%- set _ = filtered.append(pkg) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ filtered | unique | sort }}
      vars:
        # Find system packages that match go package names (case-insensitive)
        # Convert golang-package -> package, go-package -> package
        system_go_packages: >-
          {{
            (ansible_facts.packages.keys() | default([]) | list
            | select('match', '^golang?-')
            | map('regex_replace', '^golang?-(.+)$', '\1')
            | list) +
            (ansible_facts.packages.keys() | default([]) | list
            | select('match', '^golang?$')
            | list)
          }}
  when: >
    ansible_facts.packages is defined and (
    'go' in ansible_facts.packages or
    'golang' in ansible_facts.packages or
    'golang-go' in ansible_facts.packages)
    or ansible_system == "Darwin"

# Ruby packages (gem)
- name: Discover Ruby packages
  block:
    - name: Get Ruby gems (local)
      ansible.builtin.command: gem list --local --no-details
      register: gem_packages
      changed_when: false
      failed_when: false

    - name: Extract Ruby package names
      ansible.builtin.set_fact:
        ruby_package_names: >-
          {{
            (gem_packages.stdout_lines | default([])
            | map('regex_replace', '^([^ ]+).*$', '\1')
            | list)
          }}

    - name: Filter out system-managed Ruby packages
      ansible.builtin.set_fact:
        discovered_ruby_packages: >-
          {%- set filtered = [] -%}
          {%- set system_lower = system_ruby_packages | map('lower') | list -%}
          {%- for pkg in ruby_package_names -%}
            {%- if pkg | lower not in system_lower -%}
              {%- set _ = filtered.append(pkg) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ filtered | unique | sort }}
      vars:
        # Find system packages that match ruby gem names (case-insensitive)
        # Convert ruby-package -> package
        system_ruby_packages: >-
          {{
            (ansible_facts.packages.keys() | default([]) | list
            | select('match', '^ruby-')
            | map('regex_replace', '^ruby-(.+)$', '\1')
            | list) +
            (ansible_facts.packages.keys() | default([]) | list
            | select('match', '^ruby$')
            | list)
          }}
  when: >
    ansible_facts.packages is defined and (
    'ruby' in ansible_facts.packages or
    'ruby-full' in ansible_facts.packages or
    'rubygems' in ansible_facts.packages)
    or ansible_system == "Darwin"

# Snap packages
- name: Discover Snap packages
  block:
    - name: Get snap packages
      ansible.builtin.command: snap list
      register: snap_packages_cmd
      changed_when: false
      failed_when: false

    - name: Parse snap packages for community.general.snap
      ansible.builtin.set_fact:
        discovered_snap_packages: >-
          {%- set snaps = [] -%}
          {%- if snap_packages_cmd.stdout_lines is defined and snap_packages_cmd.stdout_lines | length > 1 -%}
            {%- for line in snap_packages_cmd.stdout_lines[1:] -%}
              {%- set parts = line.split() -%}
              {%- if parts | length > 0 -%}
                {%- set snap_name = parts[0] -%}
                {%- set _ = snaps.append({'name': snap_name, 'state': 'present'}) -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
          {{ snaps }}
  when: >
    ansible_facts.packages is defined and (
    'snapd' in ansible_facts.packages or
    'snap' in ansible_facts.packages)

# Flatpak packages
- name: Discover Flatpak configuration
  block:
    - name: Get flatpak remotes
      ansible.builtin.command: flatpak remotes
      register: flatpak_remotes_cmd
      changed_when: false
      failed_when: false

    - name: Parse flatpak remotes for community.general.flatpak_remote
      ansible.builtin.set_fact:
        discovered_flatpak_remotes: >-
          {%- set remotes = [] -%}
          {%- if flatpak_remotes_cmd.stdout_lines is defined -%}
            {%- for line in flatpak_remotes_cmd.stdout_lines -%}
              {%- set parts = line.split() -%}
              {%- if parts | length >= 2 -%}
                {%- set remote_name = parts[0] -%}
                {%- set remote_url = parts[1] -%}
                {%- set _ = remotes.append({'name': remote_name, 'flatpakrepo_url': remote_url, 'state': 'present'}) -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
          {{ remotes }}

    - name: Get flatpak packages
      ansible.builtin.command: flatpak list --app --columns=application
      register: flatpak_packages_cmd
      changed_when: false
      failed_when: false

    - name: Parse flatpak packages for community.general.flatpak
      ansible.builtin.set_fact:
        discovered_flatpak_packages: >-
          {%- set packages = [] -%}
          {%- if flatpak_packages_cmd.stdout_lines is defined -%}
            {%- for line in flatpak_packages_cmd.stdout_lines -%}
              {%- set app_id = line | trim -%}
              {%- if app_id and app_id != 'Application ID' -%}
                {%- set _ = packages.append({'name': app_id, 'state': 'present'}) -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
          {{ packages }}
  when: ansible_facts.packages is defined and 'flatpak' in ansible_facts.packages


# Set final discovered language packages
- name: Set discovered language packages variables
  ansible.builtin.set_fact:
    discovered_language_packages:
      python: "{{ discovered_python_packages | default([]) }}"
      nodejs: "{{ discovered_nodejs_packages_global | default([]) }}"
      rust: "{{ discovered_rust_packages | default([]) }}"
      go: "{{ discovered_go_packages | default([]) }}"
      snap: "{{ discovered_snap_packages | default([]) }}"
      flatpak: "{{ discovered_flatpak_packages | default([]) }}"
      flatpak_remotes: "{{ discovered_flatpak_remotes | default([]) }}"
      ruby: "{{ discovered_ruby_packages | default([]) }}"

- name: Debug discovered language packages
  ansible.builtin.debug:
    msg:
      - "Python (global): {{ discovered_language_packages.python | length }} packages"
      - "Node.js (global): {{ discovered_language_packages.nodejs | length }} packages"
      - "Rust: {{ discovered_language_packages.rust | length }} packages"
      - "Go: {{ discovered_language_packages.go | length }} packages"
      - "Snap: {{ discovered_language_packages.snap | length }} packages"
      - "Flatpak: {{ discovered_language_packages.flatpak | length }} packages"
      - "Flatpak remotes: {{ discovered_language_packages.flatpak_remotes | length }} remotes"
      - "Ruby: {{ discovered_language_packages.ruby | length }} packages"
  when: discovery_debug | default(false)

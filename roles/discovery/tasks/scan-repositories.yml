---
# Repository discovery for package managers
# Discovers additional repositories, PPAs, keys, and package sources

# =============================================================================
# APT REPOSITORY DISCOVERY (Ubuntu/Debian)
# =============================================================================

- name: Discover additional APT repositories (Debian/Ubuntu)
  block:
    - name: Find additional APT repository files
      ansible.builtin.find:
        paths:
          - /etc/apt/sources.list.d
        patterns:
          - "*.list"
        file_type: file
      register: apt_repo_files

    - name: Read repository files
      ansible.builtin.slurp:
        src: "{{ item.path }}"
      register: apt_repo_contents
      loop: "{{ apt_repo_files.files }}"
      when: apt_repo_files.files | length > 0

    - name: Extract repository lines
      ansible.builtin.set_fact:
        additional_apt_repos: "{{ additional_apt_repos | default([]) + (repo_lines | list) }}"
      vars:
        repo_lines: "{{ item.content | b64decode | regex_findall('^\\s*deb\\s+.*$', multiline=True) | default([]) }}"
      loop: "{{ apt_repo_contents.results | default([]) }}"
      when:
        - item.content is defined
        - (item.content | b64decode | length) > 0

    - name: Set repository config
      ansible.builtin.set_fact:
        repository_config:
          additional_repositories: "{{ additional_apt_repos | default([]) }}"

  when: ansible_os_family == "Debian"

# =============================================================================
# PACMAN REPOSITORY DISCOVERY (Arch Linux)
# =============================================================================

- name: Discover Pacman repositories (Arch Linux)
  block:
    - name: Read pacman.conf
      ansible.builtin.slurp:
        src: /etc/pacman.conf
      register: pacman_conf_content

    - name: Parse pacman repositories
      ansible.builtin.set_fact:
        pacman_repositories: "{{ pacman_conf_content.content | b64decode | regex_findall('\\[([^\\]]+)\\]', multiline=True) }}"

    - name: Check for multilib repository
      ansible.builtin.set_fact:
        pacman_multilib_enabled: "{{ 'multilib' in pacman_repositories }}"

    - name: Discover AUR helpers
      ansible.builtin.command:
        cmd: which {{ item }}
      register: aur_helper_check
      loop: "{{ discovery_repository_detection.aur_helpers | default(['paru', 'yay', 'trizen']) }}"
      failed_when: false
      changed_when: false

    - name: Build AUR helper list
      ansible.builtin.set_fact:
        installed_aur_helpers: "{{ aur_helper_check.results | selectattr('rc', 'equalto', 0) | map(attribute='item') | list }}"

    - name: Build Arch repository configuration
      ansible.builtin.set_fact:
        repository_config:
          pacman_repositories: "{{ pacman_repositories }}"
          pacman_multilib_enabled: "{{ pacman_multilib_enabled }}"
          aur_helpers_installed: "{{ installed_aur_helpers }}"

  when: ansible_distribution == "Archlinux"

# =============================================================================
# HOMEBREW REPOSITORY DISCOVERY (macOS)
# =============================================================================

- name: Discover Homebrew repositories (macOS)
  block:
    - name: Check for Homebrew installation
      ansible.builtin.stat:
        path: "{{ item }}"
      register: homebrew_paths
      loop: "{{ repository_detection.homebrew.paths | default(['/opt/homebrew/bin/brew', '/usr/local/bin/brew']) }}"

    - name: Set Homebrew path
      ansible.builtin.set_fact:
        homebrew_path: "{{ item.stat.path }}"
      loop: "{{ homebrew_paths.results }}"
      when: item.stat.exists

    - name: Get Homebrew taps
      ansible.builtin.command:
        cmd: "{{ homebrew_path }} tap"
      register: homebrew_taps_output
      changed_when: false
      when: homebrew_path is defined

    - name: Get Homebrew casks
      ansible.builtin.shell: |
        {{ homebrew_path }} list --cask 2>/dev/null || echo ""
      register: homebrew_casks_output
      changed_when: false
      when: homebrew_path is defined

    - name: Build Homebrew repository configuration
      ansible.builtin.set_fact:
        repository_config:
          homebrew_installed: "{{ homebrew_path is defined }}"
          homebrew_path: "{{ homebrew_path | default('') }}"
          homebrew_taps: "{{ homebrew_taps_output.stdout_lines | default([]) }}"
          homebrew_casks_installed: "{{ homebrew_casks_output.stdout_lines | default([]) }}"

  when: ansible_os_family == "Darwin"

# =============================================================================
# FLATPAK REPOSITORY DISCOVERY (Linux)
# =============================================================================

- name: Discover Flatpak repositories (Linux)
  block:
    - name: Check if Flatpak is installed
      ansible.builtin.command:
        cmd: which flatpak
      register: flatpak_check
      failed_when: false
      changed_when: false

    - name: Get Flatpak remotes
      ansible.builtin.command:
        cmd: flatpak remotes --show-details
      register: flatpak_remotes_output
      changed_when: false
      when: flatpak_check.rc == 0

    - name: Get installed Flatpak applications
      ansible.builtin.command:
        cmd: flatpak list --app --columns=application
      register: flatpak_apps_output
      changed_when: false
      when: flatpak_check.rc == 0

    - name: Build Flatpak configuration
      ansible.builtin.set_fact:
        flatpak_config:
          flatpak_installed: "{{ flatpak_check.rc == 0 }}"
          flatpak_remotes: "{{ flatpak_remotes_output.stdout_lines | default([]) }}"
          flatpak_apps: "{{ flatpak_apps_output.stdout_lines | default([]) }}"

  when: ansible_system == "Linux"

# =============================================================================
# SNAP REPOSITORY DISCOVERY (Ubuntu)
# =============================================================================

- name: Discover Snap packages (Ubuntu)
  block:
    - name: Check if Snap is installed
      ansible.builtin.command:
        cmd: which snap
      register: snap_check
      failed_when: false
      changed_when: false

    - name: Get installed Snap packages
      ansible.builtin.command:
        cmd: snap list
      register: snap_list_output
      changed_when: false
      when: snap_check.rc == 0

    - name: Parse snap packages
      ansible.builtin.set_fact:
        installed_snaps: "{{ snap_list_output.stdout_lines[1:] | map('regex_replace', '^(\\S+)\\s+.*', '\\1') | list }}"
      when:
        - snap_check.rc == 0
        - snap_list_output.stdout_lines | length > 1

    - name: Build Snap configuration
      ansible.builtin.set_fact:
        snap_config:
          snap_installed: "{{ snap_check.rc == 0 }}"
          installed_snaps: "{{ installed_snaps | default([]) }}"

  when: ansible_distribution == "Ubuntu"

# =============================================================================
# CONSOLIDATE REPOSITORY DISCOVERY RESULTS
# =============================================================================

- name: Consolidate repository discovery results
  ansible.builtin.set_fact:
    repositories_config: "{{ repository_config | default({}) }}"
    additional_package_managers:
      flatpak: "{{ flatpak_config | default({}) }}"
      snap: "{{ snap_config | default({}) }}"

- name: Display repository discovery summary
  ansible.builtin.debug:
    msg:
      - "=== Repository Discovery Complete ==="
      - "OS Family: {{ ansible_os_family }}"
      - >-
        Primary package manager: {{
          'apt' if ansible_os_family == 'Debian'
          else 'pacman' if ansible_distribution == 'Archlinux'
          else 'homebrew' if ansible_os_family == 'Darwin'
          else 'unknown'
        }}
      - >-
        Additional repositories found: {{
          (discovered_apt_repositories | default([])) | length if ansible_os_family == 'Debian'
          else (pacman_repositories | default([])) | length if ansible_distribution == 'Archlinux'
          else 0
        }}
      - "Additional package managers: {{ additional_package_managers.keys() | select() | list | join(', ') }}"
  when: discovery_debug | default(false)

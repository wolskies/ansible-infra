---
# Repository discovery for package managers
# Discovers additional repositories, PPAs, keys, and package sources

# =============================================================================
# APT REPOSITORY DISCOVERY (Ubuntu/Debian)
# =============================================================================

- name: Discover APT repositories and keys (Debian/Ubuntu)
  block:
    - name: Find APT repository files
      ansible.builtin.find:
        paths:
          - /etc/apt/sources.list.d
        patterns:
          - "*.list"
          - "*.sources"
        file_type: file
      register: apt_repo_files

    - name: Read APT repository content
      ansible.builtin.slurp:
        src: "{{ item.path }}"
      register: apt_repo_contents
      loop: "{{ apt_repo_files.files }}"
      when: apt_repo_files.files | length > 0

    - name: Parse APT repositories
      ansible.builtin.set_fact:
        discovered_apt_repositories: "{{ discovered_apt_repositories | default([]) + [repo_info] }}"
      vars:
        repo_content: "{{ item.content | b64decode }}"
        repo_filename: "{{ item.item.path | basename }}"
        is_sources_format: "{{ repo_filename.endswith('.sources') }}"
        # For .sources format, check for "Types:" line, for .list format check for "deb" lines
        is_enabled: "{{ 
          (repo_content | regex_search('Types:\\s*deb', multiline=True) is not none) if is_sources_format
          else (repo_content | regex_search('^\\s*deb\\s', multiline=True) is not none)
        }}"
        repo_entries: "{{
          (repo_content | regex_findall('^Types:.*deb.*$', multiline=True)) if is_sources_format
          else (repo_content | regex_findall('^\\s*deb[^\\n]*', multiline=True) | select('match', '^\\s*deb\\s') | list)
        }}"
        repo_info:
          filename: "{{ repo_filename }}"
          enabled: "{{ is_enabled }}"
          content: "{{ repo_entries }}"
          source: "{{ item.item.path }}"
          type: "{{ 'sources' if is_sources_format else 'list' }}"
          format: "{{ 'deb822' if is_sources_format else 'traditional' }}"
      loop: "{{ apt_repo_contents.results | default([]) }}"
      when: 
        - apt_repo_contents.results is defined
        - item.content is defined
        - (item.content | b64decode | length) > 0

    - name: Discover APT GPG keys
      ansible.builtin.find:
        paths:
          - /etc/apt/trusted.gpg.d
          - /usr/share/keyrings
        patterns:
          - "*.gpg"
          - "*.asc"
        file_type: file
      register: apt_key_files

    - name: Build APT keys list
      ansible.builtin.set_fact:
        discovered_apt_keys: "{{ discovered_apt_keys | default([]) + [key_info] }}"
      vars:
        key_info:
          filename: "{{ item.path | basename }}"
          path: "{{ item.path }}"
          size: "{{ item.size }}"
      loop: "{{ apt_key_files.files }}"
      when: apt_key_files.files | length > 0

    - name: Check for universe/multiverse repositories
      ansible.builtin.shell: |
        grep -h "^deb.*universe" /etc/apt/sources.list /etc/apt/sources.list.d/*.list 2>/dev/null | head -1 || echo ""
      register: ubuntu_universe_check
      changed_when: false
      failed_when: false
      when: ansible_distribution == "Ubuntu"

    - name: Check for backports repositories
      ansible.builtin.shell: |
        grep -h "^deb.*-backports" /etc/apt/sources.list /etc/apt/sources.list.d/*.list 2>/dev/null | head -1 || echo ""
      register: debian_backports_check
      changed_when: false
      failed_when: false
      when: ansible_os_family == "Debian"

    - name: Discover Ubuntu PPAs
      ansible.builtin.shell: |
        find /etc/apt/sources.list.d -name "*ppa*.list" -exec basename {} \; 2>/dev/null | sed 's/\.list$//' | grep -E "^ppa-" || true
      register: ubuntu_ppa_discovery
      changed_when: false
      failed_when: false
      when: ansible_distribution == "Ubuntu"

    - name: Build repository configuration facts
      ansible.builtin.set_fact:
        repository_config:
          apt_repositories: "{{ discovered_apt_repositories | default([]) }}"
          apt_keys: "{{ discovered_apt_keys | default([]) }}"
          ubuntu_universe_enabled: "{{ ubuntu_universe_check.stdout | length > 0 }}"
          ubuntu_ppas: "{{ ubuntu_ppa_discovery.stdout_lines | default([]) }}"
          debian_backports_enabled: "{{ debian_backports_check.stdout | length > 0 }}"

  when: ansible_os_family == "Debian"

# =============================================================================
# PACMAN REPOSITORY DISCOVERY (Arch Linux)
# =============================================================================

- name: Discover Pacman repositories (Arch Linux)
  block:
    - name: Read pacman.conf
      ansible.builtin.slurp:
        src: /etc/pacman.conf
      register: pacman_conf_content

    - name: Parse pacman repositories
      ansible.builtin.set_fact:
        pacman_repositories: "{{ pacman_conf_content.content | b64decode | regex_findall('\\[([^\\]]+)\\]', multiline=True) }}"

    - name: Check for multilib repository
      ansible.builtin.set_fact:
        pacman_multilib_enabled: "{{ 'multilib' in pacman_repositories }}"

    - name: Discover AUR helpers
      ansible.builtin.command:
        cmd: which {{ item }}
      register: aur_helper_check
      loop: "{{ discovery_repository_detection.aur_helpers | default(['paru', 'yay', 'trizen']) }}"
      failed_when: false
      changed_when: false

    - name: Build AUR helper list
      ansible.builtin.set_fact:
        installed_aur_helpers: "{{ aur_helper_check.results | selectattr('rc', 'equalto', 0) | map(attribute='item') | list }}"

    - name: Build Arch repository configuration
      ansible.builtin.set_fact:
        repository_config:
          pacman_repositories: "{{ pacman_repositories }}"
          pacman_multilib_enabled: "{{ pacman_multilib_enabled }}"
          aur_helpers_installed: "{{ installed_aur_helpers }}"

  when: ansible_distribution == "Archlinux"

# =============================================================================
# HOMEBREW REPOSITORY DISCOVERY (macOS)
# =============================================================================

- name: Discover Homebrew repositories (macOS)
  block:
    - name: Check for Homebrew installation
      ansible.builtin.stat:
        path: "{{ item }}"
      register: homebrew_paths
      loop: "{{ repository_detection.homebrew.paths | default(['/opt/homebrew/bin/brew', '/usr/local/bin/brew']) }}"

    - name: Set Homebrew path
      ansible.builtin.set_fact:
        homebrew_path: "{{ item.stat.path }}"
      loop: "{{ homebrew_paths.results }}"
      when: item.stat.exists
      
    - name: Get Homebrew taps
      ansible.builtin.command:
        cmd: "{{ homebrew_path }} tap"
      register: homebrew_taps_output
      changed_when: false
      when: homebrew_path is defined

    - name: Get Homebrew casks
      ansible.builtin.shell: |
        {{ homebrew_path }} list --cask 2>/dev/null || echo ""
      register: homebrew_casks_output
      changed_when: false
      when: homebrew_path is defined

    - name: Build Homebrew repository configuration
      ansible.builtin.set_fact:
        repository_config:
          homebrew_installed: "{{ homebrew_path is defined }}"
          homebrew_path: "{{ homebrew_path | default('') }}"
          homebrew_taps: "{{ homebrew_taps_output.stdout_lines | default([]) }}"
          homebrew_casks_installed: "{{ homebrew_casks_output.stdout_lines | default([]) }}"

  when: ansible_os_family == "Darwin"

# =============================================================================
# FLATPAK REPOSITORY DISCOVERY (Linux)
# =============================================================================

- name: Discover Flatpak repositories (Linux)
  block:
    - name: Check if Flatpak is installed
      ansible.builtin.command:
        cmd: which flatpak
      register: flatpak_check
      failed_when: false
      changed_when: false

    - name: Get Flatpak remotes
      ansible.builtin.command:
        cmd: flatpak remotes --show-details
      register: flatpak_remotes_output
      changed_when: false
      when: flatpak_check.rc == 0

    - name: Get installed Flatpak applications
      ansible.builtin.command:
        cmd: flatpak list --app --columns=application
      register: flatpak_apps_output
      changed_when: false
      when: flatpak_check.rc == 0

    - name: Build Flatpak configuration
      ansible.builtin.set_fact:
        flatpak_config:
          flatpak_installed: "{{ flatpak_check.rc == 0 }}"
          flatpak_remotes: "{{ flatpak_remotes_output.stdout_lines | default([]) }}"
          flatpak_apps: "{{ flatpak_apps_output.stdout_lines | default([]) }}"

  when: ansible_system == "Linux"

# =============================================================================
# SNAP REPOSITORY DISCOVERY (Ubuntu)
# =============================================================================

- name: Discover Snap packages (Ubuntu)
  block:
    - name: Check if Snap is installed
      ansible.builtin.command:
        cmd: which snap
      register: snap_check
      failed_when: false
      changed_when: false

    - name: Get installed Snap packages
      ansible.builtin.command:
        cmd: snap list
      register: snap_list_output
      changed_when: false
      when: snap_check.rc == 0

    - name: Parse snap packages
      ansible.builtin.set_fact:
        installed_snaps: "{{ snap_list_output.stdout_lines[1:] | map('regex_replace', '^(\\S+)\\s+.*', '\\1') | list }}"
      when: 
        - snap_check.rc == 0
        - snap_list_output.stdout_lines | length > 1

    - name: Build Snap configuration
      ansible.builtin.set_fact:
        snap_config:
          snap_installed: "{{ snap_check.rc == 0 }}"
          installed_snaps: "{{ installed_snaps | default([]) }}"

  when: ansible_distribution == "Ubuntu"

# =============================================================================
# CONSOLIDATE REPOSITORY DISCOVERY RESULTS
# =============================================================================

- name: Consolidate repository discovery results
  ansible.builtin.set_fact:
    repositories_config: "{{ repository_config | default({}) }}"
    additional_package_managers:
      flatpak: "{{ flatpak_config | default({}) }}"
      snap: "{{ snap_config | default({}) }}"

- name: Display repository discovery summary
  ansible.builtin.debug:
    msg:
      - "=== Repository Discovery Complete ==="
      - "OS Family: {{ ansible_os_family }}"
      - "Primary package manager: {{ 'apt' if ansible_os_family == 'Debian' else 'pacman' if ansible_distribution == 'Archlinux' else 'homebrew' if ansible_os_family == 'Darwin' else 'unknown' }}"
      - "Additional repositories found: {{ (discovered_apt_repositories | default([])) | length if ansible_os_family == 'Debian' else (pacman_repositories | default([])) | length if ansible_distribution == 'Archlinux' else 0 }}"
      - "Additional package managers: {{ additional_package_managers.keys() | select() | list | join(', ') }}"
  when: discovery_debug | default(false)
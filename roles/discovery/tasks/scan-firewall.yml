---
# UFW firewall discovery - generate rules compatible with community.general.ufw
# Focus: Extract existing rules and map to clean UFW module parameters

- name: Reset firewall variables
  ansible.builtin.set_fact:
    firewall_enable: false
    firewall_custom_rules: []

- name: Check UFW status and availability
  ansible.builtin.command: ufw status
  register: ufw_status
  become: true
  changed_when: false
  failed_when: false
  when: ansible_os_family == "Debian" or ansible_distribution == "Archlinux"

- name: Discover UFW configuration
  when:
    - ufw_status is defined
    - ufw_status.rc is defined
    - ufw_status.rc == 0
  block:
    - name: Set firewall enabled status
      ansible.builtin.set_fact:
        firewall_enable: true
      when: "'Status: active' in ufw_status.stdout"

    - name: Get UFW rules in numbered format
      ansible.builtin.command: ufw status numbered
      register: ufw_rules
      become: true
      changed_when: false
      failed_when: false
      when: firewall_enable

    - name: Parse UFW rules and normalize for community.general.ufw
      ansible.builtin.set_fact:
        discovered_firewall_rules: >-
          {%- set rules = [] -%}
          {%- if ufw_rules.stdout_lines is defined -%}
            {%- for line in ufw_rules.stdout_lines -%}
              {%- if line | regex_search('^\\[\\s*\\d+\\]') -%}
                {%- set clean_line = line | regex_replace('^\\[\\s*\\d+\\]\\s+', '') -%}
                {%- set has_comment = '#' in clean_line -%}
                {%- set rule_part = clean_line.split('#')[0] | trim if has_comment else clean_line -%}
                {%- set comment_part = clean_line.split('#', 1)[1] | trim if has_comment else '' -%}
                {%- set parts = rule_part.split() -%}
                {%- if parts | length >= 2 and 'ALLOW' in parts[1] and 'IN' in line -%}
                  {%- set target = parts[0] -%}
                  {%- set action = parts[1].split()[0] | lower -%}
                  {%- set source = parts[3] if parts | length > 3 and parts[3] != 'Anywhere' else '' -%}

                  {%- if '/' in target -%}
                    {%- set port_proto = target.split('/') -%}
                    {%- set rule_data = {
                      'rule': action,
                      'port': port_proto[0],
                      'protocol': port_proto[1]
                    } -%}
                  {%- elif target | regex_search('^\\d+$') -%}
                    {%- set rule_data = {
                      'rule': action,
                      'port': target
                    } -%}
                  {%- elif target | regex_search('^[a-zA-Z]') -%}
                    {%- set rule_data = {
                      'rule': action,
                      'name': target
                    } -%}
                  {%- else -%}
                    {%- set rule_data = {} -%}
                  {%- endif -%}

                  {%- if rule_data and source -%}
                    {%- set _ = rule_data.update({'source': source}) -%}
                  {%- endif -%}
                  {%- if rule_data and comment_part -%}
                    {%- set _ = rule_data.update({'comment': comment_part}) -%}
                  {%- endif -%}

                  {%- if rule_data -%}
                    {%- set _ = rules.append(rule_data) -%}
                  {%- endif -%}
                {%- endif -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
          {{ rules }}

    - name: Set final firewall configuration
      ansible.builtin.set_fact:
        firewall_custom_rules: "{{ discovered_firewall_rules | default([]) }}"

- name: Set fallback firewall configuration if UFW not available/active
  ansible.builtin.set_fact:
    firewall_enable: false
    firewall_custom_rules: []
  when:
    - ufw_status is not defined or ufw_status.rc is not defined or ufw_status.rc != 0 or not firewall_enable

- name: Debug discovered firewall rules
  ansible.builtin.debug:
    msg:
      - "Firewall enabled: {{ firewall_enable }}"
      - "Discovered {{ firewall_custom_rules | length }} custom rules"
      - "Rules: {{ firewall_custom_rules | to_nice_yaml }}"
  when:
    - discovery_debug | default(false)
    - firewall_custom_rules is defined

# =============================================================================
# SECURITY SERVICES DETECTION
# =============================================================================

- name: Check fail2ban service status
  ansible.builtin.systemd:
    name: fail2ban
  register: fail2ban_service_status
  failed_when: false
  when: ansible_system == "Linux"

- name: Detect firewall package type (Linux)
  ansible.builtin.command: "{{ item }}"
  register: firewall_detection_cmd
  loop:
    - "which ufw"
    - "which iptables"
    - "which firewalld"
  failed_when: false
  changed_when: false
  when: ansible_system == "Linux"

- name: Set security service detection variables
  ansible.builtin.set_fact:
    security_fail2ban_detected: >-
      {{
        (fail2ban_service_status is defined and
         fail2ban_service_status.status is defined and
         fail2ban_service_status.status.get('LoadState') == "loaded")
      }}
    security_fail2ban_enabled: >-
      {{
        (fail2ban_service_status is defined and
         fail2ban_service_status.status is defined and
         fail2ban_service_status.status.get('UnitFileState') == "enabled")
      }}
    security_fail2ban_active: >-
      {{
        (fail2ban_service_status is defined and
         fail2ban_service_status.status is defined and
         fail2ban_service_status.status.get('ActiveState') == "active")
      }}
    security_firewall_package: >-
      {{
        "ufw" if (firewall_detection_cmd.results | default([]) | selectattr("rc", "equalto", 0) | selectattr("cmd", "search", "ufw") | list | length > 0) else
        "firewalld" if (firewall_detection_cmd.results | default([]) | selectattr("rc", "equalto", 0) | selectattr("cmd", "search", "firewalld") | list | length > 0) else
        "iptables" if (firewall_detection_cmd.results | default([]) | selectattr("rc", "equalto", 0) | selectattr("cmd", "search", "iptables") | list | length > 0) else
        "macos_alf" if ansible_system == "Darwin" else
        "unknown"
      }}
  when: ansible_system in ["Linux", "Darwin"]

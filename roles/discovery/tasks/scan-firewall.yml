---
# UFW firewall discovery

- name: Reset firewall variables
  ansible.builtin.set_fact:
    firewall_enable: false
    firewall_custom_rules: []

- name: Check UFW status and availability
  ansible.builtin.command: ufw status
  register: ufw_status
  become: true
  changed_when: false
  failed_when: false

- name: Discover UFW configuration
  when: ufw_status.rc == 0
  block:

    - name: Set firewall enabled status
      ansible.builtin.set_fact:
        firewall_enable: true
      when: "'Status: active' in ufw_status.stdout"

    - name: Get UFW rules in numbered format
      ansible.builtin.command: ufw status numbered
      register: ufw_rules
      become: true
      changed_when: false
      failed_when: false
      when: firewall_enable

    - name: Parse UFW rules (port rules without protocol)
      ansible.builtin.set_fact:
        firewall_custom_rules: "{{ firewall_custom_rules + [new_rule] }}"
      vars:
        rule_with_comment: "{{ item | regex_replace('^\\[\\s*\\d+\\]\\s+', '') }}"
        has_comment: "{{ '#' in rule_with_comment }}"
        rule_part: "{{ rule_with_comment.split('#')[0] | trim if has_comment else rule_with_comment }}"
        comment_part: "{{ rule_with_comment.split('#', 1)[1] | trim if has_comment else '' }}"
        rule_parts: "{{ rule_part | split() }}"
        port_proto: "{{ rule_parts[0].split('/') }}"
        ufw_action: "{{ rule_parts[1] | lower if rule_parts | length > 1 else 'allow' }}"
        source_ip: "{{ rule_parts[3] if rule_parts | length > 3 and rule_parts[3] != 'Anywhere' else '' }}"
        new_rule:
          rule: "{{ ufw_action }}"
          port: "{{ port_proto[0] | int }}"
          source: "{{ source_ip if source_ip else omit }}"
          comment: "{{ comment_part if comment_part else omit }}"
      loop: "{{ ufw_rules.stdout_lines }}"
      when:
        - firewall_enable
        - item | regex_search('^\\[\\s*\\d+\\]') is not none
        - "'ALLOW' in item"
        - "'IN' in item"
        - rule_parts[0] | regex_search('^\\d+$') is not none

    - name: Parse UFW rules (port rules with protocol)
      ansible.builtin.set_fact:
        firewall_custom_rules: "{{ firewall_custom_rules + [new_rule] }}"
      vars:
        rule_with_comment: "{{ item | regex_replace('^\\[\\s*\\d+\\]\\s+', '') }}"
        has_comment: "{{ '#' in rule_with_comment }}"
        rule_part: "{{ rule_with_comment.split('#')[0] | trim if has_comment else rule_with_comment }}"
        comment_part: "{{ rule_with_comment.split('#', 1)[1] | trim if has_comment else '' }}"
        rule_parts: "{{ rule_part | split() }}"
        port_proto: "{{ rule_parts[0].split('/') }}"
        ufw_action: "{{ rule_parts[1] | lower if rule_parts | length > 1 else 'allow' }}"
        source_ip: "{{ rule_parts[3] if rule_parts | length > 3 and rule_parts[3] != 'Anywhere' else '' }}"
        new_rule:
          rule: "{{ ufw_action }}"
          port: "{{ port_proto[0] | int }}"
          protocol: "{{ port_proto[1] }}"
          source: "{{ source_ip if source_ip else omit }}"
          comment: "{{ comment_part if comment_part else omit }}"
      loop: "{{ ufw_rules.stdout_lines }}"
      when:
        - firewall_enable
        - item | regex_search('^\\[\\s*\\d+\\]') is not none
        - "'ALLOW' in item"
        - "'IN' in item"
        - rule_parts[0] | regex_search('^\\d+/') is not none

    - name: Parse UFW rules (service rules)
      ansible.builtin.set_fact:
        firewall_custom_rules: "{{ firewall_custom_rules + [new_rule] }}"
      vars:
        rule_with_comment: "{{ item | regex_replace('^\\[\\s*\\d+\\]\\s+', '') }}"
        has_comment: "{{ '#' in rule_with_comment }}"
        rule_part: "{{ rule_with_comment.split('#')[0] | trim if has_comment else rule_with_comment }}"
        comment_part: "{{ rule_with_comment.split('#', 1)[1] | trim if has_comment else '' }}"
        rule_parts: "{{ rule_part | split() }}"
        ufw_action: "{{ rule_parts[1] | lower if rule_parts | length > 1 else 'allow' }}"
        source_ip: "{{ rule_parts[3] if rule_parts | length > 3 and rule_parts[3] != 'Anywhere' else '' }}"
        new_rule:
          rule: "{{ ufw_action }}"
          name: "{{ rule_parts[0] }}"
          source: "{{ source_ip if source_ip else omit }}"
          comment: "{{ comment_part if comment_part else omit }}"
      loop: "{{ ufw_rules.stdout_lines }}"
      when:
        - firewall_enable
        - item | regex_search('^\\[\\s*\\d+\\]') is not none
        - "'ALLOW' in item"
        - "'IN' in item"
        - rule_parts[0] | regex_search('^[a-zA-Z]') is not none

- name: Set default firewall rules if UFW not active
  ansible.builtin.set_fact:
    firewall_enable: false
    firewall_custom_rules:
      - comment: SSH from local subnet
        port: 22
        protocol: tcp
        source: 192.168.100.0/24
  when: not firewall_enable

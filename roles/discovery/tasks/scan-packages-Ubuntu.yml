---
# Simplified APT Package and Repository Discovery (Debian/Ubuntu)

- name: Discover APT packages and repositories
  block:
    # Step 1: Get manually installed packages with debug info
    - name: Get all manually installed packages
      ansible.builtin.command: apt-mark showmanual
      register: all_manual_packages_result
      become: true
      changed_when: false
      failed_when: all_manual_packages_result.rc not in [0, 127]  # Allow command not found, fail on real errors

    - name: Validate package discovery succeeded
      ansible.builtin.fail:
        msg: "Package discovery failed - apt-mark command failed with error: {{ all_manual_packages_result.stderr | default('Unknown error') }}"
      when:
        - all_manual_packages_result.rc != 0
        - all_manual_packages_result.rc != 127  # 127 = command not found (OK)

    - name: Get package facts for filtering base packages
      ansible.builtin.package_facts:
        manager: apt
      become: true

    - name: Define base system packages to filter out
      ansible.builtin.set_fact:
        base_system_packages:
          - base-files
          - base-passwd
          - debian-archive-keyring
          - ubuntu-keyring
          - grub-common
          - initramfs-tools
          - systemd-sysv
          - libc6
          - libgcc-s1
          - libsystemd0
          - amd64-microcode
          - intel-microcode

    - name: Filter out base system packages and hardware-specific packages
      ansible.builtin.set_fact:
        manual_packages: >-
          {{
            all_manual_packages_result.stdout_lines | default([])
            | difference(base_system_packages)
            | reject('match', '^(linux-.*|.*-firmware|.*-microcode)$')
            | reject('match', '^(nvidia-.*|libva-nvidia.*|opencl-nvidia|cuda.*|opencl-.*)$')
            | reject('match', '^(mesa-.*|vulkan-.*|lib32-mesa.*|lib32-vulkan-.*)$')
            | reject('match', '^(alsa-.*|pulseaudio.*|pipewire.*|wireplumber.*)$')
            | list
          }}


    # Step 2: Find and read third-party repository files
    - name: Find third-party repository files
      ansible.builtin.find:
        paths: ["/etc/apt/sources.list.d"]
        patterns: "*.list,*.sources"
      register: repo_files
      become: true

    - name: Read third-party repository files
      ansible.builtin.slurp:
        src: "{{ item.path }}"
      register: repo_contents
      loop: "{{ repo_files.files }}"
      become: true
      # Let it fail if files exist but can't be read (permission issues, corruption, etc.)

    # Step 3: Parse repositories and extract key URLs for secure re-download
    - name: Parse third-party repositories and map keys to URLs
      ansible.builtin.set_fact:
        parsed_repos: >-
          {%- set repos = [] -%}
          {%- set key_urls = [] -%}
          {%- for file in repo_contents.results | default([]) -%}
            {%- if file.content is defined -%}
              {%- set content = file.content | b64decode -%}
              {%- set filename = file.item.path | basename | regex_replace('\.(list|sources)$', '') -%}
              {%- for line in content.split('\n') -%}
                {%- if line.strip() and not line.strip().startswith('#') and line.startswith('deb') -%}
                  {%- if not ('ubuntu.com' in line or 'debian.org' in line or 'archive.ubuntu.com' in line or 'security' in line) -%}
                    {%- set repo_data = {
                        'name': filename,
                        'source_file': filename + '.list',
                        'repository': line.strip()
                    } -%}
                    {%- set _ = repos.append(repo_data) -%}
                    {%- if 'docker.com' in line -%}
                      {%- if 'ubuntu' in line -%}
                        {%- set docker_key = 'https://download.docker.com/linux/ubuntu/gpg' -%}
                      {%- elif 'debian' in line -%}
                        {%- set docker_key = 'https://download.docker.com/linux/debian/gpg' -%}
                      {%- else -%}
                        {%- set docker_key = 'https://download.docker.com/linux/ubuntu/gpg' -%}
                      {%- endif -%}
                      {%- if docker_key not in key_urls -%}
                        {%- set _ = key_urls.append(docker_key) -%}
                      {%- endif -%}
                    {%- elif 'nodesource.com' in line -%}
                      {%- set nodejs_key = 'https://deb.nodesource.com/gpgkey/nodesource.gpg.key' -%}
                      {%- if nodejs_key not in key_urls -%}
                        {%- set _ = key_urls.append(nodejs_key) -%}
                      {%- endif -%}
                    {%- elif 'google.com' in line and ('chrome' in line or 'cloud-sdk' in line) -%}
                      {%- set google_key = 'https://dl.google.com/linux/linux_signing_key.pub' -%}
                      {%- if google_key not in key_urls -%}
                        {%- set _ = key_urls.append(google_key) -%}
                      {%- endif -%}
                    {%- elif 'microsoft.com' in line -%}
                      {%- set microsoft_key = 'https://packages.microsoft.com/keys/microsoft.asc' -%}
                      {%- if microsoft_key not in key_urls -%}
                        {%- set _ = key_urls.append(microsoft_key) -%}
                      {%- endif -%}
                    {%- endif -%}
                  {%- endif -%}
                {%- endif -%}
              {%- endfor -%}
            {%- endif -%}
          {%- endfor -%}
          {{ {'repos': repos, 'key_urls': key_urls} }}

    # Step 4: Store key URLs for secure re-download (no file copying)

    # Step 5: Store final results in expected format
    - name: Store APT discovery results
      ansible.builtin.set_fact:
        discovered_repositories:
          apt:
            third_party_repos: "{{ parsed_repos.repos }}"
            manual_packages: "{{ manual_packages }}"
            apt_keys: "{{ parsed_repos.key_urls }}"

    - name: Debug key extraction
      ansible.builtin.debug:
        msg:
          - "Repository URLs found: {{ parsed_repos.repos | map(attribute='repository') | list }}"
          - "Key URLs extracted: {{ parsed_repos.key_urls }}"
          - "Final discovered_repositories.apt.apt_keys: {{ discovered_repositories.apt.apt_keys | default('UNDEFINED') }}"
      when: discovery_debug | default(false) | bool

    - name: Debug APT discovery results
      ansible.builtin.debug:
        msg:
          - "Found {{ manual_packages | length }} manually installed packages"
          - "Found {{ parsed_repos.repos | length }} third-party repositories"
          - "Found {{ parsed_repos.key_urls | length }} GPG key URLs"
      when: discovery_debug | default(false) | bool

  rescue:
    - name: Handle APT discovery errors
      ansible.builtin.debug:
        msg: "APT discovery failed, setting empty results"

    - name: Set empty APT results on failure
      ansible.builtin.set_fact:
        discovered_repositories:
          apt:
            third_party_repos: []
            manual_packages: []
            apt_keys: []

---
# APT Package and Repository Discovery (Debian/Ubuntu)

- name: APT repository discovery
  block:
    - name: Read main APT sources
      ansible.builtin.slurp:
        src: /etc/apt/sources.list
      register: apt_main_sources
      become: true
      failed_when: false

    - name: Find additional APT sources
      ansible.builtin.find:
        paths: ["/etc/apt/sources.list.d"]
        patterns: "*.list"
      register: apt_additional_sources
      become: true

    - name: Read additional APT source files
      ansible.builtin.slurp:
        src: "{{ item.path }}"
      register: apt_source_contents
      loop: "{{ apt_additional_sources.files }}"
      become: true
      failed_when: false

    - name: Find APT repository keys
      ansible.builtin.find:
        paths: "{{ discovery_repository_detection.apt.keys_paths }}"
        patterns: "*.gpg"
      register: apt_keys
      become: true

    - name: Get package origins for repository correlation
      ansible.builtin.shell: |
        apt-cache policy $(apt-mark showmanual) | grep -E "^\s+\d+\s+https?://" | head -1000
      register: apt_package_origins
      become: true
      changed_when: false
      failed_when: false

    - name: Identify packages from third-party repositories
      ansible.builtin.shell: |
        for pkg in $(apt-mark showmanual); do
          origin=$(apt-cache policy "$pkg" | grep -E "^\s+\*\*\*" -A1 | tail -1 | \
                   grep -o "https\?://[^[:space:]]*" | head -1 || echo "ubuntu-standard")
          if [[ "$origin" != "ubuntu-standard" && "$origin" != *"ubuntu.com"* && \
                "$origin" != *"debian.org"* ]]; then
            echo "$pkg:$origin"
          fi
        done
      register: third_party_packages
      become: true
      changed_when: false
      failed_when: false
  rescue:
    - name: Handle APT discovery errors
      ansible.builtin.debug:
        msg: "APT repository discovery failed"

- name: Process third-party package information
  ansible.builtin.set_fact:
    third_party_package_map: >-
      {%- set pkg_map = {} -%}
      {%- for line in third_party_packages.stdout_lines | default([]) -%}
        {%- set parts = line.split(':') -%}
        {%- if parts | length >= 2 -%}
          {%- set _ = pkg_map.update({parts[0]: parts[1]}) -%}
        {%- endif -%}
      {%- endfor -%}
      {{ pkg_map }}

- name: Store APT repository discovery results
  ansible.builtin.set_fact:
    discovered_repositories:
      apt:
        main_sources: "{{ apt_main_sources.content | default('') | b64decode }}"
        additional_sources: "{{ apt_additional_sources.files | default([]) | map(attribute='path') | list }}"
        source_contents: "{{ apt_source_contents.results | default([]) | selectattr('content', 'defined') | list }}"
        keys: "{{ apt_keys.files | default([]) | map(attribute='path') | list }}"
        package_origins: "{{ third_party_package_map | default({}) }}"

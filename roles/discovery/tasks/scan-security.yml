---
# Security Configuration Discovery
# Discovers security settings, firewall, and SSH configuration

- name: Discover security configuration
  block:
    # SSH configuration discovery
    - name: Read SSH daemon configuration
      ansible.builtin.slurp:
        src: /etc/ssh/sshd_config
      register: sshd_config
      become: true
      failed_when: false

    - name: Check SSH service status
      ansible.builtin.set_fact:
        ssh_service_status: "{{ ansible_facts.services.get('ssh.service', ansible_facts.services.get('sshd.service', {})) }}"

    # Firewall discovery
    - name: Check UFW status (Ubuntu/Debian)
      ansible.builtin.command: ufw status verbose
      register: ufw_status
      become: true
      failed_when: false
      changed_when: false
      when: ansible_os_family == "Debian"

    - name: Check firewalld status (RHEL/Arch)
      ansible.builtin.command: firewall-cmd --state
      register: firewalld_status
      become: true
      failed_when: false
      changed_when: false
      when: ansible_os_family in ["RedHat", "Archlinux"]

    - name: Check iptables rules
      ansible.builtin.command: iptables -L -n
      register: iptables_rules
      become: true
      failed_when: false
      changed_when: false

    # Security services discovery
    - name: Check for security-related services
      ansible.builtin.set_fact:
        security_services:
          fail2ban: "{{ 'fail2ban' in ansible_facts.services }}"
          apparmor: "{{ 'apparmor' in ansible_facts.services }}"
          selinux: "{{ ansible_selinux.status is defined and ansible_selinux.status != 'disabled' }}"

    # System security settings
    - name: Check sudo configuration
      ansible.builtin.stat:
        path: /etc/sudoers
      register: sudoers_file
      become: true

    - name: Check for sudo group members
      ansible.builtin.getent:
        database: group
        key: sudo
      register: sudo_group
      become: true
      failed_when: false

    - name: Check for wheel group members (Arch/RHEL)
      ansible.builtin.getent:
        database: group
        key: wheel
      register: wheel_group
      become: true
      failed_when: false

    # Password policies
    - name: Check password aging settings
      ansible.builtin.command: chage -l {{ ansible_user }}
      register: password_aging
      become: true
      failed_when: false
      changed_when: false

    # Network security
    - name: Check for listening services
      ansible.builtin.command: ss -tuln
      register: listening_services
      changed_when: false
      failed_when: false

- name: Parse SSH configuration
  ansible.builtin.set_fact:
    ssh_config_parsed:
      root_login: "{{ sshd_config.content | b64decode | regex_search('PermitRootLogin\\s+(\\w+)', '\\1') | first | default('unknown') }}"
      password_auth: "{{ sshd_config.content | b64decode | regex_search('PasswordAuthentication\\s+(\\w+)', '\\1') | first | default('unknown') }}"
      pubkey_auth: "{{ sshd_config.content | b64decode | regex_search('PubkeyAuthentication\\s+(\\w+)', '\\1') | first | default('unknown') }}"
      port: "{{ sshd_config.content | b64decode | regex_search('Port\\s+(\\d+)', '\\1') | first | default('22') }}"
  when: sshd_config.content is defined

- name: Store security discovery results
  ansible.builtin.set_fact:
    discovered_security:
      ssh:
        service_enabled: "{{ ssh_service_status.get('status', '') == 'enabled' }}"
        service_running: "{{ ssh_service_status.get('state', '') == 'running' }}"
        config_accessible: "{{ sshd_config.content is defined }}"
        settings: "{{ ssh_config_parsed | default({}) }}"
        config_content: "{{ sshd_config.content | default('') | b64decode }}"

      firewall:
        ufw:
          available: "{{ ansible_os_family == 'Debian' }}"
          status: "{{ ufw_status.stdout.split('\n')[0] | default('') if ufw_status is defined else '' }}"
          rules: "{{ ufw_status.stdout_lines | default([]) if ufw_status is defined else [] }}"
        firewalld:
          available: "{{ ansible_os_family in ['RedHat', 'Archlinux'] }}"
          status: "{{ firewalld_status.stdout | default('') if firewalld_status is defined else '' }}"
        iptables:
          rules_count: "{{ iptables_rules.stdout_lines | default([]) | length }}"
          has_custom_rules: "{{ iptables_rules.stdout_lines | default([]) | length > 10 }}"

      services:
        fail2ban: "{{ security_services.fail2ban | default(false) }}"
        apparmor: "{{ security_services.apparmor | default(false) }}"
        selinux: "{{ security_services.selinux | default(false) }}"

      access_control:
        sudo_configured: "{{ sudoers_file.stat.exists | default(false) }}"
        sudo_users: "{{ sudo_group.ansible_facts.getent_group.sudo.2 | default('') if sudo_group is succeeded else '' }}"
        wheel_users: "{{ wheel_group.ansible_facts.getent_group.wheel.2 | default('') if wheel_group is succeeded else '' }}"
        current_user_privileged: "{{ ansible_user in (sudo_group.ansible_facts.getent_group.sudo.2 | default('') + ',' + wheel_group.ansible_facts.getent_group.wheel.2 | default('')) }}"

      network:
        listening_ports: "{{ listening_services.stdout_lines | default([]) | length }}"
        external_services: "{{ listening_services.stdout_lines | default([]) | select('search', '0\\.0\\.0\\.0') | list | length }}"

      password_policy:
        aging_info: "{{ password_aging.stdout_lines | default([]) if password_aging is succeeded else [] }}"
  tags:
    - security
    - firewall
    - ssh

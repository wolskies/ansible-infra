---
# Docker Environment Discovery
# Discovers Docker installation and running containers

- name: Discover Docker environment
  block:
    - name: Check Docker installation
      ansible.builtin.stat:
        path: /usr/bin/docker
      register: docker_binary

    - name: Discover Docker details
      block:
        - name: Get Docker version
          ansible.builtin.command: docker --version
          register: docker_version
          changed_when: false
          timeout: 30

        - name: Get Docker system information
          ansible.builtin.command: docker system info --format json
          register: docker_host_info
          become: true
          timeout: 60
          changed_when: false
          failed_when: false

        - name: List Docker containers
          ansible.builtin.command: docker ps -a --format json
          register: docker_containers
          become: true
          timeout: 60
          changed_when: false
          failed_when: false

        - name: List Docker networks
          ansible.builtin.command: docker network ls --format json
          register: docker_networks
          become: true
          changed_when: false
          failed_when: false
          timeout: 30

        - name: List Docker volumes
          ansible.builtin.command: docker volume ls --format json
          register: docker_volumes
          become: true
          timeout: 30
          changed_when: false
          failed_when: false

        - name: Check Docker Compose
          ansible.builtin.command: docker-compose --version
          register: docker_compose_version
          changed_when: false
          failed_when: false
          timeout: 15

        - name: Check for Docker daemon configuration
          ansible.builtin.stat:
            path: /etc/docker/daemon.json
          register: docker_daemon_config
          become: true

        - name: Read Docker daemon configuration
          ansible.builtin.slurp:
            src: /etc/docker/daemon.json
          register: docker_daemon_content
          become: true
          when: docker_daemon_config.stat.exists
          failed_when: false
      when: docker_binary.stat.exists
      rescue:
        - name: Handle Docker discovery errors
          ansible.builtin.debug:
            msg: "Docker is installed but not accessible or not running"

- name: Process Docker container information
  ansible.builtin.set_fact:
    discovered_docker:
      installed: "{{ docker_binary.stat.exists }}"
      version: "{{ docker_version.stdout | default('') }}"
      running: "{{ docker_host_info is succeeded | default(false) }}"

      # Docker service status
      service:
        enabled: "{{ ansible_facts.services.get('docker.service', {}).get('status') == 'enabled' }}"
        active: "{{ ansible_facts.services.get('docker.service', {}).get('state') == 'running' }}"

      # Container information
      containers:
        total: "{{ docker_containers.containers | default([]) | length }}"
        running: >-
          {{ docker_containers.containers | default([]) |
             selectattr('State.Status', 'equalto', 'running') |
             list | length }}
        images: >-
          {{ docker_containers.containers | default([]) |
             map(attribute='Config.Image') | unique | list }}
        names: >-
          {{ docker_containers.containers | default([]) |
             map(attribute='Name') |
             map('regex_replace', '^/', '') | list }}

      # Networks and volumes
      networks:
        total: "{{ docker_networks.networks | default([]) | length }}"
        custom: "{{ docker_networks.networks | default([]) | rejectattr('Name', 'in', ['bridge', 'host', 'none']) | map(attribute='Name') | list }}"

      volumes:
        total: "{{ docker_volumes.volumes | default([]) | length }}"
        names: "{{ docker_volumes.volumes | default([]) | map(attribute='Name') | list }}"

      # Docker Compose
      compose:
        available: "{{ docker_compose_version.rc | default(1) == 0 }}"
        version: "{{ docker_compose_version.stdout | default('') }}"

      # Configuration
      daemon_config:
        exists: "{{ docker_daemon_config.stat.exists | default(false) }}"
        content: "{{ docker_daemon_content.content | default('') | b64decode }}"

      # Service mapping for deployment
      suggested_services: >-
        {{ docker_containers.containers | default([]) |
           map(attribute='Config.Image') |
           map('regex_replace', ':.*$', '') |
           map('regex_replace', '.*/([^/]+)$', '\\1') |
           unique | list }}
  when: docker_binary.stat.exists
  tags:
    - docker

- name: Set empty Docker facts when not installed
  ansible.builtin.set_fact:
    discovered_docker:
      installed: false
      version: ""
      running: false
      containers: { total: 0, running: 0, images: [], names: [] }
      networks: { total: 0, custom: [] }
      volumes: { total: 0, names: [] }
      compose: { available: false, version: "" }
      daemon_config: { exists: false, content: "" }
      suggested_services: []
  when: not docker_binary.stat.exists
  tags:
    - docker

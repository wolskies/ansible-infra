---
# Docker Compose-Centric Discovery
# Discovers Docker installation and folder-based compose services

- name: Discover Docker environment
  block:
    - name: Check Docker installation
      ansible.builtin.stat:
        path: /usr/bin/docker
      register: docker_binary

    - name: Discover Docker details
      block:
        - name: Get Docker system information using native module
          community.docker.docker_info:
          register: docker_host_info
          become: true
          # This provides version info, compose availability, and system details in one call

        - name: Check for Docker daemon configuration
          ansible.builtin.stat:
            path: /etc/docker/daemon.json
          register: docker_daemon_config
          become: true

        - name: Read Docker daemon configuration
          ansible.builtin.slurp:
            src: /etc/docker/daemon.json
          register: docker_daemon_content
          become: true
          when: docker_daemon_config.stat.exists
          # Let this fail if file exists but can't be read (permission/corruption)


      when: docker_binary.stat.exists
      rescue:
        - name: Handle Docker discovery errors
          ansible.builtin.debug:
            msg: "Docker is installed but not accessible or not running"

- name: Discover Docker Compose services
  block:
    - name: Find actual user home directories
      ansible.builtin.find:
        paths: /home
        file_type: directory
        depth: 1
      register: home_directories
      
    - name: Build final search paths with proper home directory expansion
      ansible.builtin.set_fact:
        docker_search_paths: >-
          {%- set paths = [] -%}
          {%- for path in discovery_docker_compose_paths -%}
            {%- if '/home/*/' in path -%}
              {%- for home_dir in home_directories.files -%}
                {%- set user_name = home_dir.path.split('/')[-1] -%}
                {%- set expanded_path = path.replace('/home/*/', '/home/' + user_name + '/') -%}
                {%- set _ = paths.append(expanded_path) -%}
              {%- endfor -%}
            {%- else -%}
              {%- set _ = paths.append(path) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ paths | unique | list }}

    - name: Find Docker Compose service folders
      ansible.builtin.find:
        paths: "{{ item }}"
        patterns:
          - "docker-compose.yml"
          - "docker-compose.yaml"
          - "compose.yml"
          - "compose.yaml"
        recurse: true
        depth: 3  # Don't go too deep
      register: compose_file_results
      loop: "{{ docker_search_paths }}"
      when: docker_binary.stat.exists
      # Let it fail if directories exist but can't be read (permission issues)

    - name: Process discovered compose services
      ansible.builtin.set_fact:
        docker_compose_services: >-
          {%- set services = [] -%}
          {%- for path_result in compose_file_results.results | default([]) -%}
            {%- if path_result.files is defined -%}
              {%- for file in path_result.files -%}
                {%- set service_dir = file.path | dirname -%}
                {%- set service_name = service_dir | basename -%}
                {%- set existing = services | selectattr('directory', 'equalto', service_dir) | list -%}
                {%- if not existing -%}
                  {%- set _ = services.append({
                      'name': service_name,
                      'directory': service_dir,
                      'compose_file': file.path
                  }) -%}
                {%- endif -%}
              {%- endfor -%}
            {%- endif -%}
          {%- endfor -%}
          {{ services }}

    - name: Read compose files and gather service details
      block:
        - name: Read compose file contents
          ansible.builtin.slurp:
            src: "{{ item.compose_file }}"
          register: compose_contents
          loop: "{{ docker_compose_services }}"
          failed_when: false

        - name: Find .env files in service directories
          ansible.builtin.find:
            paths: "{{ item.directory }}"
            patterns:
              - ".env"
              - "*.env"
            hidden: true
          register: env_file_results
          loop: "{{ docker_compose_services }}"
          failed_when: false

        - name: Parse compose services with details
          ansible.builtin.set_fact:
            docker_services_detailed: >-
              {%- set services = [] -%}
              {%- for idx in range(docker_compose_services | length) -%}
                {%- set service = docker_compose_services[idx] -%}
                {%- set compose_result = compose_contents.results[idx] -%}
                {%- set env_result = env_file_results.results[idx] -%}

                {%- set service_info = {
                    'name': service.name,
                    'directory': service.directory,
                    'compose_file': service.compose_file,
                    'env_files': env_result.files | default([]) | map(attribute='path') | list
                } -%}

                {%- if compose_result.content is defined -%}
                  {%- set compose_data = compose_result.content | b64decode | from_yaml -%}
                  {%- if compose_data.services is defined -%}
                    {%- set containers = [] -%}
                    {%- set ports = [] -%}
                    {%- for svc_name, svc_config in compose_data.services.items() -%}
                      {%- set container_info = {
                          'name': svc_name,
                          'image': svc_config.get('image', 'build-context')
                      } -%}
                      {%- set _ = containers.append(container_info) -%}

                      {# Extract ports #}
                      {%- if svc_config.ports is defined -%}
                        {%- for port in svc_config.ports -%}
                          {%- if port is string -%}
                            {%- set _ = ports.append(port) -%}
                          {%- elif port is mapping and port.published is defined -%}
                            {%- set _ = ports.append(port.published ~ ':' ~ port.target) -%}
                          {%- endif -%}
                        {%- endfor -%}
                      {%- endif -%}
                    {%- endfor -%}

                    {%- set _ = service_info.update({
                        'containers': containers,
                        'ports': ports,
                        'volumes': compose_data.get('volumes', {}).keys() | list,
                        'networks': compose_data.get('networks', {}).keys() | list
                    }) -%}
                  {%- endif -%}
                {%- endif -%}

                {%- set _ = services.append(service_info) -%}
              {%- endfor -%}
              {{ services }}

        - name: Map services to collection roles
          ansible.builtin.set_fact:
            docker_services_mapped: >-
              {%- set mapped = {'canned': [], 'generic': []} -%}
              {%- for service in docker_services_detailed -%}
                {%- set is_canned = [] -%}
                {%- for container in service.containers | default([]) if not is_canned -%}
                  {%- if container.image != 'build-context' -%}
                    {%- set image_base = container.image.split(':')[0] -%}
                    {%- if image_base in discovery_docker_service_mapping -%}
                      {%- set _ = service.update({'role': discovery_docker_service_mapping[image_base]}) -%}
                      {%- set _ = mapped.canned.append(service) -%}
                      {%- set _ = is_canned.append(true) -%}
                    {%- endif -%}
                  {%- endif -%}
                {%- endfor -%}
                {%- if not is_canned -%}
                  {%- set _ = mapped.generic.append(service) -%}
                {%- endif -%}
              {%- endfor -%}
              {{ mapped }}

  when: docker_binary.stat.exists
  tags:
    - docker
    - compose

- name: Copy Docker Compose files to inventory structure
  block:
    - name: Create docker_compose directories for each service
      ansible.builtin.file:
        path: "{{ discovery_paths.host_vars_dir }}/docker_compose/{{ item.name }}"
        state: directory
        mode: '0755'
      loop: "{{ docker_services_detailed | default([]) }}"
      delegate_to: localhost
      become: false

    - name: Copy docker-compose.yml file for each service
      ansible.builtin.fetch:
        src: "{{ item.compose_file }}"
        dest: "{{ discovery_paths.host_vars_dir }}/docker_compose/{{ item.name }}/{{ item.compose_file | basename }}"
        flat: true
      loop: "{{ docker_services_detailed | default([]) }}"
      loop_control:
        label: "{{ item.name }}/{{ item.compose_file | basename }}"

    - name: Copy .env files for each service
      ansible.builtin.fetch:
        src: "{{ env_file }}"
        dest: "{{ discovery_paths.host_vars_dir }}/docker_compose/{{ item.name }}/{{ env_file | basename }}"
        flat: true
      loop: "{{ docker_services_detailed | default([]) }}"
      loop_control:
        label: "{{ item.name }}/.env files"
      vars:
        env_file: "{{ item.env_files | first | default('') }}"
      when: item.env_files | length > 0

  when:
    - docker_binary.stat.exists
    - docker_services_detailed is defined
    - docker_services_detailed | length > 0
  tags:
    - docker
    - compose
    - copy

- name: Store Docker discovery results
  ansible.builtin.set_fact:
    discovered_docker:
      installed: "{{ docker_binary.stat.exists }}"
      version: "{{ docker_host_info.version.Version | default('') }}"
      running: "{{ docker_host_info is succeeded | default(false) }}"

      # Docker service status
      service:
        enabled: "{{ ansible_facts.services.get('docker.service', {}).get('status') == 'enabled' }}"
        active: "{{ ansible_facts.services.get('docker.service', {}).get('state') == 'running' }}"

      # Docker Compose - detected from plugins
      compose:
        available: "{{ 'compose' in (docker_host_info.plugins | default({})) }}"
        version: "{{ docker_host_info.plugins.compose.Version | default('') if 'compose' in (docker_host_info.plugins | default({})) else '' }}"
        legacy: false  # Modern Docker includes compose as plugin


      # Compose-based services
      compose_services:
        search_paths: "{{ docker_search_paths | default([]) }}"
        all: "{{ docker_services_detailed | default([]) }}"
        canned: "{{ docker_services_mapped.canned | default([]) }}"
        generic: "{{ docker_services_mapped.generic | default([]) }}"
        total: "{{ docker_services_detailed | default([]) | length }}"

      # Configuration
      daemon_config:
        exists: "{{ docker_daemon_config.stat.exists | default(false) }}"
        content: "{{ docker_daemon_content.content | default('') | b64decode }}"

  when: docker_binary.stat.exists
  tags:
    - docker

- name: Set empty Docker facts when not installed
  ansible.builtin.set_fact:
    discovered_docker:
      installed: false
      version: ""
      running: false
      service: { enabled: false, active: false }
      compose: { available: false, version: "", legacy: false }
      compose_services: { search_paths: [], all: [], canned: [], generic: [], total: 0 }
      daemon_config: { exists: false, content: "" }
  when: not docker_binary.stat.exists
  tags:
    - docker

---
# Simplified Docker discovery with better error handling

- name: Discover Docker environment
  block:
    - name: Check Docker installation
      ansible.builtin.stat:
        path: /usr/bin/docker
      register: docker_binary

    - name: Get Docker system information
      community.docker.docker_host_info:
      register: docker_host
      become: true
      when: docker_binary.stat.exists
      failed_when: false

    - name: Check for Docker daemon configuration
      ansible.builtin.stat:
        path: /etc/docker/daemon.json
      register: docker_daemon_config
      become: true
      when: docker_binary.stat.exists

    - name: Read Docker daemon configuration
      ansible.builtin.slurp:
        src: /etc/docker/daemon.json
      register: docker_daemon_content
      become: true
      when: 
        - docker_binary.stat.exists
        - docker_daemon_config.stat.exists
      failed_when: false

    - name: Set Docker installation status
      ansible.builtin.set_fact:
        docker_discovered:
          installed: "{{ docker_binary.stat.exists }}"
          running: "{{ docker_host is not failed and docker_host.ServerVersion is defined }}"
          version: "{{ docker_host.ServerVersion | default('') }}"
          compose_available: "{{ docker_host.Plugins is defined and 'compose' in docker_host.Plugins }}"
          daemon_config: >-
            {%- if docker_daemon_content.content is defined -%}
              {{ docker_daemon_content.content | b64decode | from_json }}
            {%- else -%}
              {}
            {%- endif -%}

  rescue:
    - name: Set Docker discovery failure status
      ansible.builtin.set_fact:
        docker_discovered:
          installed: "{{ docker_binary.stat.exists | default(false) }}"
          running: false
          error: "Docker discovery failed - Docker may not be running or accessible"

    - name: Add Docker warning
      ansible.builtin.set_fact:
        discovery_warnings: "{{ discovery_warnings | default([]) + ['Docker is installed but not accessible or not running'] }}"

# Discover Docker Compose services
- name: Discover Docker Compose services
  block:
    - name: Find home directories for path expansion
      ansible.builtin.find:
        paths: /home
        file_type: directory
        depth: 1
      register: home_directories

    - name: Build search paths
      ansible.builtin.set_fact:
        docker_compose_search_paths: >-
          {%- set paths = [] -%}
          {%- for base_path in discovery_docker_compose_paths -%}
            {%- if '/home/*/' in base_path -%}
              {%- for home in home_directories.files -%}
                {%- set expanded = base_path.replace('/home/*/', home.path + '/') -%}
                {%- set _ = paths.append(expanded) -%}
              {%- endfor -%}
            {%- else -%}
              {%- set _ = paths.append(base_path) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ paths | unique }}

    - name: Find Docker Compose files
      ansible.builtin.find:
        paths: "{{ item }}"
        patterns: ["docker-compose.yml", "docker-compose.yaml", "compose.yml", "compose.yaml"]
        recurse: true
        depth: 3
      register: compose_file_search
      loop: "{{ docker_compose_search_paths }}"
      failed_when: false
      when: docker_discovered.installed | default(false)

    - name: Process compose services
      ansible.builtin.set_fact:
        compose_services_raw: >-
          {%- set services = [] -%}
          {%- for result in compose_file_search.results | default([]) if result.files is defined -%}
            {%- for file in result.files -%}
              {%- set service_dir = file.path | dirname -%}
              {%- set service_name = service_dir | basename -%}
              {%- if not services | selectattr('directory', 'equalto', service_dir) | list -%}
                {%- set _ = services.append({
                  'name': service_name,
                  'directory': service_dir,
                  'compose_file': file.path
                }) -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endfor -%}
          {{ services }}

    - name: Read compose files to identify services
      ansible.builtin.slurp:
        src: "{{ item.compose_file }}"
      register: compose_contents
      loop: "{{ compose_services_raw }}"
      failed_when: false
      when: compose_services_raw | length > 0

    - name: Categorize Docker services
      ansible.builtin.set_fact:
        docker_canned_services: []
        docker_generic_services: []

    - name: Create compose files directory in host_vars
      ansible.builtin.file:
        path: "{{ discovery_paths.host_vars_dir }}/docker-compose"
        state: directory
        mode: '0755'
      delegate_to: localhost

    - name: Save compose files to host_vars directory
      ansible.builtin.copy:
        content: "{{ compose_contents.results[item].content | b64decode }}"
        dest: "{{ discovery_paths.host_vars_dir }}/docker-compose/{{ compose_services_raw[item].name }}.yml"
        mode: '0644'
      delegate_to: localhost
      loop: "{{ range(compose_services_raw | length) | list }}"
      when: 
        - compose_contents.results[item].content is defined

    - name: Find all .env files in service directories
      ansible.builtin.find:
        paths: "{{ item.directory }}"
        patterns: ["*.env"]
        depth: 1
      register: env_files_find
      loop: "{{ compose_services_raw }}"
      when: compose_services_raw | length > 0

    - name: Read all .env files from service directories
      ansible.builtin.slurp:
        src: "{{ item.1.path }}"
      register: env_file_contents
      loop: "{{ env_files_find.results | subelements('files', skip_missing=True) }}"
      failed_when: false

    - name: Save .env files to host_vars directory
      ansible.builtin.copy:
        content: "{{ item.content | b64decode }}"
        dest: "{{ discovery_paths.host_vars_dir }}/docker-compose/{{ service_name }}-{{ env_filename }}"
        mode: '0600'
      delegate_to: localhost
      loop: "{{ env_file_contents.results }}"
      vars:
        service_name: "{{ item.item.0.item.name }}"
        env_filename: "{{ item.item.1.path | basename }}"
      when: 
        - item.content is defined

    - name: Categorize each Docker service
      ansible.builtin.set_fact:
        docker_canned_services: "{{ docker_canned_services + [service_with_role] }}"
      vars:
        service: "{{ compose_services_raw[item] }}"
        content: "{{ compose_contents.results[item].content | default('') | b64decode | default('{}', true) }}"
        matched_images: "{{ discovery_docker_service_mapping.keys() | select('in', content) | list }}"
        env_files_list: "{{ env_files_find.results[item].files | map(attribute='path') | map('basename') | list }}"
        env_files_local: "{{ env_files_list | map('regex_replace', '^(.*)$', discovery_paths.host_vars_dir + '/docker-compose/' + service.name + '-\\1') | list }}"
        service_with_role: "{{ service | combine({'role': discovery_docker_service_mapping[matched_images[0]], 'compose_file_local': discovery_paths.host_vars_dir + '/docker-compose/' + service.name + '.yml', 'env_files_local': env_files_local if env_files_list | length > 0 else omit}) }}"
      loop: "{{ range(compose_services_raw | length) | list }}"
      when: 
        - compose_contents.results[item].content is defined
        - discovery_docker_service_mapping.keys() | select('in', content) | list | length > 0

    - name: Add unmatched services to generic list
      ansible.builtin.set_fact:
        docker_generic_services: "{{ docker_generic_services + [service_with_role] }}"
      vars:
        service: "{{ compose_services_raw[item] }}"
        content: "{{ compose_contents.results[item].content | default('') | b64decode | default('{}', true) }}"
        env_files_list: "{{ env_files_find.results[item].files | map(attribute='path') | map('basename') | list }}"
        env_files_local: "{{ env_files_list | map('regex_replace', '^(.*)$', discovery_paths.host_vars_dir + '/docker-compose/' + service.name + '-\\1') | list }}"
        service_with_role: "{{ service | combine({'role': 'generic_docker_compose', 'compose_file_local': discovery_paths.host_vars_dir + '/docker-compose/' + service.name + '.yml', 'env_files_local': env_files_local if env_files_list | length > 0 else omit}) }}"
      loop: "{{ range(compose_services_raw | length) | list }}"
      when: 
        - compose_contents.results[item].content is defined
        - discovery_docker_service_mapping.keys() | select('in', content) | list | length == 0

    - name: Combine Docker service categorization
      ansible.builtin.set_fact:
        docker_compose_categorized:
          canned: "{{ docker_canned_services }}"
          generic: "{{ docker_generic_services }}"

  rescue:
    - name: Set empty compose services on failure
      ansible.builtin.set_fact:
        docker_compose_categorized:
          canned: []
          generic: []

    - name: Add compose discovery warning
      ansible.builtin.set_fact:
        discovery_warnings: "{{ discovery_warnings | default([]) + ['Docker Compose service discovery failed'] }}"

# Build final Docker discovery results
- name: Store Docker discovery results
  ansible.builtin.set_fact:
    discovered_docker:
      installed: "{{ docker_discovered.installed | default(false) }}"
      running: "{{ docker_discovered.running | default(false) }}"
      version: "{{ docker_discovered.version | default('') }}"
      compose:
        available: "{{ docker_discovered.compose_available | default(false) }}"
      daemon_config: "{{ docker_discovered.daemon_config | default({}) }}"
      compose_services:
        search_paths: "{{ docker_compose_search_paths | default([]) }}"
        canned: "{{ docker_compose_categorized.canned | default([]) }}"
        generic: "{{ docker_compose_categorized.generic | default([]) }}"
        total: "{{ (docker_compose_categorized.canned | default([]) | length) + (docker_compose_categorized.generic | default([]) | length) }}"

- name: Debug Docker discovery results
  ansible.builtin.debug:
    msg:
      - "Docker installed: {{ discovered_docker.installed }}"
      - "Docker running: {{ discovered_docker.running }}"
      - "Docker version: {{ discovered_docker.version }}"
      - "Compose services found: {{ discovered_docker.compose_services.total }}"
      - "  Canned services: {{ discovered_docker.compose_services.canned | length }}"
      - "  Generic services: {{ discovered_docker.compose_services.generic | length }}"
  when: discovery_debug | default(false)
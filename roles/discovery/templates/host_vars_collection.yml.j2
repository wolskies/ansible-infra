---
# Host Variables for {{ inventory_hostname }}
# Generated by wolskinet.infrastructure.discovery role

{% if discovered_packages is not none and discovered_packages.all_native is defined and discovered_packages.all_native | length > 0 %}
host_packages_install_{{ ansible_distribution }}:
{% for package in discovered_packages.all_native | sort %}
  - {{ package }}
{% endfor %}

host_packages_remove_{{ ansible_distribution }}: []
{% endif %}
{% if discovered_repositories is not none and discovered_repositories.apt is defined and discovered_repositories.apt.third_party_repos | default([]) | length > 0 %}
additional_apt_repositories:
{% for repo in discovered_repositories.apt.third_party_repos %}
  - "{{ repo.repository }}"
{% endfor %}

{% endif %}
{% if discovered_packages is not none and discovered_packages.languages is defined %}
third_party_packages:
{% if discovered_packages.languages.python is defined and discovered_packages.languages.python | default([]) | length > 0 %}
  python:
{% for package in discovered_packages.languages.python | default([]) | sort %}
    - {{ package }}
{% endfor %}
{% endif %}
{% if discovered_packages.languages.nodejs is defined and discovered_packages.languages.nodejs.npm_global | default([]) | length > 0 %}
  nodejs:
{% for package in discovered_packages.languages.nodejs.npm_global | sort %}
    - {{ package }}
{% endfor %}
{% endif %}
{% if discovered_packages.languages.rust is defined and discovered_packages.languages.rust.cargo | default([]) | length > 0 %}
  rust:
{% for package in discovered_packages.languages.rust.cargo | sort %}
    - {{ package }}
{% endfor %}
{% endif %}
{% if discovered_packages.languages.go is defined and discovered_packages.languages.go.modules | default([]) | length > 0 %}
  go:
{% for package in discovered_packages.languages.go.modules | default([]) | sort %}
    - {{ package }}
{% endfor %}
{% endif %}
{% if discovered_packages.languages.system is defined and (discovered_packages.languages.system.snap | default([]) | length > 0 or discovered_packages.languages.system.flatpak | default([]) | length > 0) %}
  snap:
{% for package in discovered_packages.languages.system.snap | default([]) | sort %}
    - {{ package }}
{% endfor %}
  flatpak:
{% for package in discovered_packages.languages.system.flatpak | default([]) | sort %}
    - {{ package }}
{% endfor %}
{% endif %}

{% endif %}
{% if discovered_repositories.homebrew is defined and discovered_repositories.homebrew.formulae is defined %}
host_packages_install_homebrew:
{% for package in discovered_repositories.homebrew.formulae | sort %}
  - {{ package }}
{% endfor %}

{% if discovered_repositories.homebrew.casks is defined and discovered_repositories.homebrew.casks | length > 0 %}
host_packages_install_homebrew_casks:
{% for cask in discovered_repositories.homebrew.casks | sort %}
  - {{ cask }}
{% endfor %}
{% endif %}
{% endif %}

{% if discovered_users is not none and discovered_users.system_users.regular_users_detailed is defined and discovered_users.system_users.regular_users_detailed | length > 0 %}
discovered_users_config:
{% for user_info in discovered_users.system_users.regular_users_detailed %}
  - name: "{{ user_info.name }}"
    uid: {{ user_info.uid }}
    gid: {{ user_info.gid }}
    home: "{{ user_info.home }}"
    shell: "{{ user_info.shell }}"
    default_user_shell: "{{ user_info.shell.split('/') | last }}"
{% if user_info.groups is defined and user_info.groups | length > 0 %}    groups: {{ user_info.groups }}
{% endif %}    sudo_nopasswd: false
    ssh_public_key: "{{ '{{' }} vault_{{ user_info.name }}_ssh_public_key | default('') {{ '}}' }}"
    ssh_password_auth: true
    password: "{{ '{{' }} vault_{{ user_info.name }}_password | default(omit) {{ '}}' }}"
{% set user_dotfiles = (discovered_dotfiles.users_with_dotfiles | default([]) if discovered_dotfiles is not none else []) | selectattr('name', 'equalto', user_info.name) | list %}
{% if user_dotfiles | length > 0 %}
{% set user_dot = user_dotfiles[0] %}
{% if user_dot.dotfiles_repo | default(false) %}
    dotfiles_repo: true
    dotfiles_source_type: "repository"
    dotfiles_repository_url: "{{ user_dot.dotfiles_repo_url }}"
    dotfiles_branch: "{{ user_dot.dotfiles_repo_branch | default('main') }}"
    dotfiles_directory: "{{ user_info.home }}/{{ user_dot.dotfiles_dir }}"
{% else %}
    dotfiles_repo: false
{% endif %}
{% else %}
    dotfiles_repo: false
{% endif %}

{% endfor %}
{% endif %}

{% if discovered_docker is not none and discovered_docker is defined and discovered_docker.installed | default(false) %}
install_docker: true
{% if discovered_docker.compose_services.total > 0 %}
{% if discovered_docker.compose_services.canned | length > 0 or discovered_docker.compose_services.generic | length > 0 %}

install_docker_services:
{% for service in discovered_docker.compose_services.canned %}
  - name: "{{ service.name }}"
    directory: "{{ service.directory }}"
    role: "{{ service.role }}"
{% endfor %}
{% for service in discovered_docker.compose_services.generic %}
  - name: "{{ service.name }}"
    directory: "{{ service.directory }}"
    role: "generic"
{% endfor %}
{% endif %}
{% endif %}

{% endif %}
{% if discovered_security is not none and discovered_security.firewall is defined %}
{% if discovered_security.firewall.detected | default(false) and discovered_security.firewall.type | default('none') != 'none' %}
enable_firewall: true
firewall_type: "{{ discovered_security.firewall.type }}"
{% if discovered_security.firewall.original_type | default('') == 'iptables' %}# Note: raw iptables management detected - switched to UFW frontend for easier rule management
{% endif %}
{% if discovered_security.firewall.rules is defined and discovered_security.firewall.rules | length > 0 %}

firewall_rules:
{% for rule in discovered_security.firewall.rules %}
  - rule: "{{ rule.rule }}"
    port: "{{ rule.port }}"
    proto: "{{ rule.proto }}"
{% if rule.comment is defined and rule.comment != "" %}    comment: "{{ rule.comment }}"
{% endif %}
{% endfor %}
{% endif %}
{% else %}
enable_firewall: false
# No firewall detected or type is 'none'
{% endif %}

{% endif %}
{% if discovered_security is not none and discovered_security.fail2ban is defined and discovered_security.fail2ban.service_enabled | default(false) %}
enable_fail2ban: true

{% endif %}

# === SYSTEM TUNING CONFIGURATION ===

gaming:
  enabled: false
  kernel_params: ["mitigations=off"]
  cpu_governor: "performance"

gpu:
  enabled: false
  nvidia_support: false
  amd_support: false
  intel_support: false

bluetooth:
  enabled: false
  audio_codecs: ["aptx", "ldac", "aac"]

camera:
  enabled: false
  v4l2_support: true

audio:
  enabled: false
  low_latency: false
  real_time_audio: false

security:
  ssh_hardening: false
  firewall_strict: false
  fail2ban: false

network:
  performance_tuning: false
  tcp_optimization: false

# === DISCOVERY METADATA ===

discovery_info:
  source_hostname: "{{ inventory_hostname }}"
  source_os: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
  source_architecture: "{{ ansible_architecture }}"
  discovery_date: "{{ ansible_date_time.iso8601 }}"
  packages_discovered: {{ discovered_packages.all_native | default([]) | length if discovered_packages is not none else 0 }}
  services_discovered: {{ (discovered_services.running | default([])) | length if discovered_services is not none else 0 }}
{% if discovered_docker is not none and discovered_docker is defined and discovered_docker.installed | default(false) %}
  docker_detected: true
  docker_version: "{{ discovered_docker.version | default('') }}"
  docker_compose_available: {{ discovered_docker.compose.available | default(false) }}
  docker_compose_search_paths: {{ discovered_docker.compose_services.search_paths | default([]) }}
{% else %}
  docker_detected: false
{% endif %}

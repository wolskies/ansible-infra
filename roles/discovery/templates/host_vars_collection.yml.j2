---
# Host Variables for {{ inventory_hostname }}
# Generated by wolskinet.infrastructure.discovery role
# These variables work directly with the wolskinet.infrastructure collection

# ===============================================================================
# PACKAGE LISTS
# ===============================================================================

{% if discovered_packages is not none and discovered_packages.all_native is defined and discovered_packages.all_native | length > 0 %}
host_packages_install_{{ ansible_distribution }}:
{% for package in discovered_packages.all_native | sort %}
  - {{ package }}
{% endfor %}

{% endif %}
{% if discovered_repositories is not none and discovered_repositories.apt is defined and discovered_repositories.apt.third_party_repos | default([]) | length > 0 %}
discovered_apt_repositories:
{% for repo in discovered_repositories.apt.third_party_repos %}
  - name: {{ repo.name }}
    source_file: {{ repo.source_file }}
    repository: {{ repo.repository }}
{% endfor %}

discovered_apt_keys:
{% if discovered_repositories.apt.gpg_keys is defined and discovered_repositories.apt.gpg_keys is sequence and discovered_repositories.apt.gpg_keys | length > 0 %}
{% for key in discovered_repositories.apt.gpg_keys %}
  - {{ key | basename }}
{% endfor %}
{% else %}
  []
{% endif %}

{% endif %}
{% if discovered_packages is not none and discovered_packages.languages is defined %}
{% if discovered_packages.languages.python is defined and discovered_packages.languages.python | default([]) | length > 0 %}
third_party_packages_python:
{% for package in discovered_packages.languages.python | default([]) | sort %}
  - {{ package }}
{% endfor %}
{% endif %}
{% if discovered_packages.languages.nodejs is defined and discovered_packages.languages.nodejs.npm_global | default([]) | length > 0 %}
third_party_packages_nodejs:
{% for package in discovered_packages.languages.nodejs.npm_global | sort %}
  - {{ package }}
{% endfor %}
{% endif %}
{% if discovered_packages.languages.rust is defined and discovered_packages.languages.rust.cargo | default([]) | length > 0 %}
third_party_packages_rust:
{% for package in discovered_packages.languages.rust.cargo | sort %}
  - {{ package }}
{% endfor %}
{% endif %}
{% if discovered_packages.languages.go is defined and discovered_packages.languages.go.modules | default([]) | length > 0 %}
third_party_packages_go:
{% for package in discovered_packages.languages.go.modules | default([]) | sort %}
  - {{ package }}
{% endfor %}
{% endif %}
{% if discovered_packages.languages.system is defined and (discovered_packages.languages.system.snap | default([]) | length > 0 or discovered_packages.languages.system.flatpak | default([]) | length > 0) %}
third_party_packages_snap:
{% for package in discovered_packages.languages.system.snap | default([]) | sort %}
  - {{ package }}
{% endfor %}
third_party_packages_flatpak:
{% for package in discovered_packages.languages.system.flatpak | default([]) | sort %}
  - {{ package }}
{% endfor %}
{% endif %}
{% endif %}
{% if discovered_repositories.homebrew is defined and discovered_repositories.homebrew.formulae is defined %}
host_packages_install_homebrew:
{% for package in discovered_repositories.homebrew.formulae | sort %}
  - {{ package }}
{% endfor %}

{% if discovered_repositories.homebrew.casks is defined and discovered_repositories.homebrew.casks | length > 0 %}
host_packages_install_homebrew_casks:
{% for cask in discovered_repositories.homebrew.casks | sort %}
  - {{ cask }}
{% endfor %}

{% endif %}
{% endif %}
# ===============================================================================
# USER CONFIGURATIONS
# ===============================================================================

{% if discovered_users is not none and discovered_users.system_users.regular_users_detailed is defined %}
discovered_users_config:
{% for user_info in discovered_users.system_users.regular_users_detailed %}
  "{{ user_info.name }}":
    uid: {{ user_info.uid }}
    gid: {{ user_info.gid }}
    home: "{{ user_info.home }}"
    shell: "{{ user_info.shell }}"
    default_user_shell: "{{ user_info.shell | basename }}"
{% if user_info.groups is defined and user_info.groups | length > 0 %}    groups: {{ user_info.groups }}
{% endif %}    system_tuning_sudo_nopasswd: false
{% set user_dotfiles = (discovered_dotfiles.users_with_dotfiles | default([]) if discovered_dotfiles is not none else []) | selectattr('name', 'equalto', user_info.name) | list %}
{% if user_dotfiles | length > 0 %}
{% set user_dot = user_dotfiles[0] %}
{% if user_dot.dotfiles_repo | default(false) %}
    dotfiles_repo: true
    dotfiles_source_type: "repository"
    dotfiles_repository_url: "{{ user_dot.dotfiles_repo_url }}"
    dotfiles_branch: "{{ user_dot.dotfiles_repo_branch | default('main') }}"
    dotfiles_directory: "{{ user_info.home }}/{{ user_dot.dotfiles_dir }}"
{% else %}
    dotfiles_repo: false
{% endif %}
{% else %}
    dotfiles_repo: false
{% endif %}

{% endfor %}

{% endif %}
# ===============================================================================
# DOCKER CONFIGURATION - Ready for container_platform role
# ===============================================================================

{% if discovered_docker is not none and discovered_docker is defined and discovered_docker.installed | default(false) %}
# Docker detected
docker_detected: true
docker_version: "{{ discovered_docker.version | default('') }}"

{% if discovered_docker.services is defined and discovered_docker.services.canned_roles is defined %}
# Services that have dedicated collection roles
docker_canned_services:
{% for role in discovered_docker.services.canned_roles %}
  - {{ role }}
{% endfor %}

{% endif %}
{% if discovered_docker.compose_files is defined and (discovered_docker.compose_files | length) > 0 %}
# Docker Compose files have been copied to {{ discovery_paths.host_vars_dir }}/docker_compose/
docker_compose_detected: true
docker_compose_services: {{ discovered_docker.compose_files | length }}

{% endif %}
{% endif %}
# ===============================================================================
# SYSTEM CONFIGURATION
# ===============================================================================
{% if discovered_security is not none and discovered_security.ssh is defined and discovered_security.ssh.service_running | default(false) %}
# SSH configuration detected
ssh_service_detected: true
{% if discovered_security.ssh.settings is defined and discovered_security.ssh.settings.port is defined and discovered_security.ssh.settings.port != '22' %}
ssh_port_custom: {{ discovered_security.ssh.settings.port | default('22') }}
{% endif %}

{% endif %}
{% if discovered_security is not none and discovered_security.firewall is defined %}
# Security services
{% if discovered_security.firewall.detected | default(false) %}
enable_firewall: true
firewall_type: "{{ discovered_security.firewall.type | default('ufw') }}"{% if discovered_security.firewall.allowed_ports is defined and discovered_security.firewall.allowed_ports | length > 0 %}
firewall_allowed_ports: {{ discovered_security.firewall.allowed_ports }}{% endif %}
{% endif %}
{% endif %}
{% if discovered_security is not none and discovered_security.fail2ban is defined and discovered_security.fail2ban.service_enabled | default(false) %}
enable_fail2ban: true
{% endif %}

# ===============================================================================
# DISCOVERY METADATA
# ===============================================================================

discovery_info:
  source_hostname: "{{ inventory_hostname }}"
  source_os: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
  source_architecture: "{{ ansible_architecture }}"
  discovery_date: "{{ ansible_date_time.iso8601 }}"
  packages_discovered: {{ discovered_packages.all_native | default([]) | length if discovered_packages is not none else 0 }}
  services_discovered: {{ (discovered_services.running | default([])) | length if discovered_services is not none else 0 }}
  docker_detected: {{ discovered_docker.installed | default(false) if discovered_docker is not none else false }}

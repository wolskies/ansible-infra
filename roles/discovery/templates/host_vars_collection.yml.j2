---
# Host Variables for {{ inventory_hostname }}
# Generated by wolskinet.infrastructure.discovery role
# These variables work directly with the wolskinet.infrastructure collection

# ===============================================================================
# PACKAGE LISTS - Ready for basic_setup role
# ===============================================================================

{% if discovered_packages.all is defined and discovered_packages.all | length > 0 %}
# Discovered packages for {{ ansible_distribution }}
# These packages were found installed on the source machine
"host_packages_install_{{ ansible_distribution }}":
{% for package in discovered_packages.all | sort %}
  - {{ package }}
{% endfor %}

{% endif %}
{% if discovered_packages.aur_packages is defined and discovered_packages.aur_packages | length > 0 %}
# AUR packages (Arch Linux only)
host_packages_install_aur:
{% for package in discovered_packages.aur_packages | sort %}
  - {{ package }}
{% endfor %}

{% endif %}
{% if discovered_repositories.homebrew is defined and discovered_repositories.homebrew.formulae is defined %}
# Homebrew packages (macOS only)
host_packages_install_homebrew:
{% for package in discovered_repositories.homebrew.formulae | sort %}
  - {{ package }}
{% endfor %}

{% if discovered_repositories.homebrew.casks is defined and discovered_repositories.homebrew.casks | length > 0 %}
# Homebrew casks (macOS GUI applications)
host_packages_install_homebrew_casks:
{% for cask in discovered_repositories.homebrew.casks | sort %}
  - {{ cask }}
{% endfor %}

{% endif %}
{% endif %}
# ===============================================================================
# USER CONFIGURATIONS - Ready for dotfiles and system_tuning roles
# ===============================================================================

{% if discovered_users.system_users.regular_users_detailed is defined %}
# Discovered users with their individual configurations
discovered_users_config:
{% for user_info in discovered_users.system_users.regular_users_detailed %}
  "{{ user_info.name }}":
    # Basic user information
    uid: {{ user_info.uid }}
    gid: {{ user_info.gid }}
    home: "{{ user_info.home }}"
    shell: "{{ user_info.shell }}"
    default_user_shell: "{{ user_info.shell | basename }}"
{% if user_info.groups is defined and user_info.groups | reject('equalto', '') | select('string') | list | length > 0 %}
    groups:
{% for group in user_info.groups | reject('equalto', '') | select('string') | list %}
      - {{ group }}
{% endfor %}
{% elif user_info.name == discovered_users.current_user.name and discovered_users.current_user.groups is defined and discovered_users.current_user.groups | reject('equalto', '') | select('string') | list | length > 0 %}
    groups:
{% for group in discovered_users.current_user.groups | reject('equalto', '') | select('string') | list %}
      - {{ group }}
{% endfor %}
{% endif %}
    system_tuning_sudo_nopasswd: false
    
    # Dotfiles configuration
{% set user_dotfiles = discovered_dotfiles.users_with_dotfiles | default([]) | selectattr('user', 'equalto', user_info.name) | list %}
{% if user_dotfiles | length > 0 %}
{% set user_dot = user_dotfiles[0] %}
{% if user_dot.dotfiles_repo | default(false) %}
    dotfiles_repo: true
    dotfiles_source_type: "repository"
    dotfiles_repository_url: "{{ user_dot.repository_url }}"
    dotfiles_branch: "{{ user_dot.repository_branch | default('main') }}"
    dotfiles_directory: "{{ user_info.home }}/{{ user_dot.dotfiles_dir }}"
{% else %}
    dotfiles_repo: false
    dotfiles_source_type: "local_files"
{% if user_dot.discovered_config_files is defined and user_dot.discovered_config_files | length > 0 %}
    dotfiles_discovered_files:
{% for config_file in user_dot.discovered_config_files %}
      - {{ config_file }}
{% endfor %}
{% else %}
    dotfiles_discovered_files: []
{% endif %}
{% endif %}
{% else %}
    dotfiles_repo: false
    dotfiles_source_type: "local_files"
    dotfiles_discovered_files: []
{% endif %}

{% endfor %}

{% endif %}
# ===============================================================================
# DOCKER CONFIGURATION - Ready for container_platform role
# ===============================================================================

{% if discovered_docker is defined and discovered_docker.installed | default(false) %}
# Docker detected
docker_detected: true
docker_version: "{{ discovered_docker.version | default('') }}"

{% if discovered_docker.services is defined and discovered_docker.services.canned_roles is defined %}
# Services that have dedicated collection roles
docker_canned_services:
{% for role in discovered_docker.services.canned_roles %}
  - {{ role }}
{% endfor %}

{% endif %}
{% if discovered_docker.compose_files is defined and discovered_docker.compose_files | length > 0 %}
# Docker Compose files have been copied to {{ discovery_paths.host_vars_dir }}/docker_compose/
docker_compose_detected: true
docker_compose_services: {{ discovered_docker.compose_files | length }}

{% endif %}
{% endif %}
# ===============================================================================
# SYSTEM CONFIGURATION
# ===============================================================================
{% if discovered_security.ssh is defined and discovered_security.ssh.service_running | default(false) %}
# SSH configuration detected
ssh_service_detected: true
{% if discovered_security.ssh.settings is defined and discovered_security.ssh.settings.port is defined and discovered_security.ssh.settings.port != '22' %}
ssh_port_custom: {{ discovered_security.ssh.settings.port | default('22') }}
{% endif %}

{% endif %}
{% if discovered_services.security is defined %}
# Security services
{% if discovered_services.security.firewall_detected | default(false) %}
enable_firewall: true
firewall_type: "{{ discovered_services.security.firewall_type | default('ufw') }}"
{% endif %}
{% if discovered_services.security.fail2ban_detected | default(false) %}
enable_fail2ban: true
{% endif %}

{% endif %}
# ===============================================================================
# DISCOVERY METADATA
# ===============================================================================

discovery_info:
  source_hostname: "{{ inventory_hostname }}"
  source_os: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
  source_architecture: "{{ ansible_architecture }}"
  discovery_date: "{{ ansible_date_time.iso8601 }}"
  packages_discovered: {{ discovered_packages.total | default(0) }}
  services_discovered: {{ discovered_services.running | default([]) | length }}
  docker_detected: {{ discovered_docker.installed | default(false) }}

---
# Generated by wolskinet.infrastructure.discovery role
# Host variables for {{ inventory_hostname }}
# Structured to match infrastructure variable hierarchy

# =============================================================================
# INFRASTRUCTURE CONFIGURATION
# =============================================================================

infrastructure:
  # Domain-level settings (shared across all hosts)
  domain:
    name: {{ config_domain | default('') | to_json }}
    timezone: {{ config_system_timezone | default('UTC') | to_json }}
    locale: {{ config_locale_settings | default('en_US.UTF-8') | to_json }}
    language: {{ config_locale_settings | default('en_US.UTF-8') | to_json }}
{% if config_ntp_enabled is defined %}
    ntp:
      enabled: {{ config_ntp_enabled | lower }}
      servers:
        - "0.pool.ntp.org"
        - "1.pool.ntp.org"
{% endif %}
{% if users is defined and users is sequence and users | length > 0 %}
    users:
{{ users | to_nice_yaml(indent=6) }}
{% else %}
    users: []
{% endif %}

  # Host-specific settings
  host:
    hostname: {{ config_hostname | default(ansible_hostname) | to_json }}
    update_hosts: false  # Set to true if you want to update /etc/hosts

{% if discovered_sysctl_current is defined or discovered_modules_loaded is defined or discovered_services_enabled is defined or discovered_limits_configured is defined %}
    # System optimization and tuning
    optimizations:
      tune_swappiness: false  # Set to true and configure swappiness value below
      swappiness: 10  # Only used if tune_swappiness is true

    # Kernel parameters (sysctl)
    sysctl:
      parameters: {}  # Add kernel parameters as needed
      # Example:
      # parameters:
      #   net.ipv4.ip_forward: "1"
      #   vm.max_map_count: "262144"

    # PAM limits configuration
    limits:
      limits: []  # Add limits as needed
      # Example:
      # limits:
      #   - domain: "*"
      #     limit_type: "soft"
      #     limit_item: "nofile"
      #     value: "65536"

    # Kernel modules
    modules:
      load: []  # Modules to load at boot
      blacklist: []  # Modules to blacklist

{% if discovered_udev_rules is defined and discovered_udev_rules | length > 0 %}
    # Udev rules (discovered)
    udev:
      rules:
{% for rule in discovered_udev_rules %}
        - name: {{ rule.name | to_json }}
          content: {{ rule.content | to_json }}
          priority: {{ rule.priority }}
          state: present
{% endfor %}
{% else %}
    # Udev rules
    udev:
      rules: []
      # Example:
      # rules:
      #   - name: pico
      #     content: 'SUBSYSTEM=="usb", ATTRS{idVendor}=="2e8a", ATTRS{idProduct}=="000c", MODE="0666"'
      #     priority: 99
      #     state: present
{% endif %}

    # System services management
    services:
{% if discovered_services_enabled is defined and discovered_services_enabled | length > 0 %}
      # Currently enabled services (discovered):
      # {{ discovered_services_enabled | join(', ') }}
{% endif %}
      enable: []  # Services to enable
      disable: []  # Services to disable
{% endif %}

{% if discovered_sysctl_current is defined and discovered_sysctl_current | length > 0 %}
    # Current sysctl values detected (for reference):
    # discovered_sysctl_current:
{% for key, value in discovered_sysctl_current.items() %}
    #   {{ key }}: {{ value }}
{% endfor %}
{% endif %}

    # Journald configuration
    journal:
      configure: false  # Set to true to configure journald
      max_size: "500M"
      max_use: "2G"
      compress: true

    # Remote syslog configuration
    rsyslog:
      enabled: false
      remote_host: ""
      remote_port: 514

    # Package management configuration
    packages:
{% if ansible_os_family == "Debian" %}
      apt:
        unattended_upgrades:
          enabled: true
          auto_fix_interrupted_dpkg: true
          minimal_steps: true
          install_on_shutdown: false
          mail: ""
          mail_report: "only-on-error"
          automatic_reboot: false
          automatic_reboot_with_users: false
        no_recommends: true
        proxy: ""
{% if discovered_repositories is defined and discovered_repositories | length > 0 %}
        repositories:
{{ discovered_repositories | to_nice_yaml(indent=10) }}
{% endif %}
{% elif ansible_os_family == "Archlinux" %}
      pacman:
        no_confirms: false
        multilib: false
        proxy: ""
{% elif ansible_system == "Darwin" %}
      homebrew:
{% if homebrew_discovered_taps is defined %}
        taps:
{{ homebrew_discovered_taps | to_nice_yaml(indent=10) }}
{% endif %}
{% if homebrew_discovered_casks is defined %}
        casks:
{{ homebrew_discovered_casks | to_nice_yaml(indent=10) }}
{% endif %}
{% endif %}
{% if vars['host_packages_install_' + ansible_distribution] is defined and vars['host_packages_install_' + ansible_distribution] is sequence %}
      # Distribution-specific packages
      {{ ansible_distribution }}:
        install:
{{ vars['host_packages_install_' + ansible_distribution] | to_nice_yaml(indent=10) }}
        remove: []
{% endif %}

{% if discovered_snap_packages is defined or discovered_flatpak_packages is defined %}
    # Alternative package managers
{% if discovered_snap_packages is defined %}
    snap:
      remove_completely: {{ (discovered_snap_packages | length == 0) | lower }}
      packages:
{% if discovered_snap_packages | length > 0 %}
        install:
{{ discovered_snap_packages | to_nice_yaml(indent=10) }}
{% else %}
        install: []
{% endif %}
        remove: []
{% endif %}

{% if discovered_flatpak_packages is defined %}
    flatpak:
      enabled: {{ (discovered_flatpak_packages | length > 0) | lower }}
      packages:
{% if discovered_flatpak_packages | length > 0 %}
        install:
{{ discovered_flatpak_packages | to_nice_yaml(indent=10) }}
{% else %}
        install: []
{% endif %}
        remove: []
      flathub: true
      plugins:
        gnome: false
        plasma: false
{% endif %}
{% endif %}

{% if firewall_enable is defined or security_fail2ban_detected is defined %}
    # Security services configuration
    security:
{% if firewall_enable is defined %}
      firewall:
        enabled: {{ firewall_enable | lower }}
        start: {{ firewall_enable | lower }}
        prevent_ssh_lockout: true
{% if security_firewall_package is defined and security_firewall_package != "unknown" %}
        package: {{ security_firewall_package | to_json }}
{% endif %}
{% if firewall_custom_rules is defined and firewall_custom_rules is sequence and firewall_custom_rules | length > 0 %}
        rules:
{{ firewall_custom_rules | to_nice_yaml(indent=10) }}
{% endif %}
{% endif %}
{% if security_fail2ban_detected is defined %}
      fail2ban:
        enabled: {{ (security_fail2ban_detected and security_fail2ban_enabled) | lower }}
        start: {{ (security_fail2ban_detected and security_fail2ban_active) | lower }}
{% endif %}
{% endif %}

{% if ansible_system == "Darwin" %}
    # macOS-specific settings
    macosx:
      updates:
        auto_check: true
        auto_download: false
      gatekeeper:
{% if discovered_macos_preferences is defined and discovered_macos_preferences.gatekeeper_enabled is defined %}
        enabled: {{ discovered_macos_preferences.gatekeeper_enabled }}
{% else %}
        enabled: true
{% endif %}
{% if discovered_macos_preferences is defined %}
      system_preferences:
        natural_scroll: {{ discovered_macos_preferences.natural_scroll | default(true) }}
        measurement_units: {{ discovered_macos_preferences.measurement_units | default('Inches') | to_json }}
        use_metric: {{ discovered_macos_preferences.use_metric | default(false) }}
        show_all_extensions: {{ discovered_macos_preferences.show_all_extensions | default(false) }}
      airdrop:
        ethernet_enabled: {{ discovered_macos_preferences.airdrop_ethernet | default(false) }}
{% else %}
      system_preferences:
        natural_scroll: true
        measurement_units: "Inches"
        use_metric: false
        show_all_extensions: false
      airdrop:
        ethernet_enabled: false
{% endif %}
{% endif %}

# vim: set ft=yaml ts=2 sw=2 et:

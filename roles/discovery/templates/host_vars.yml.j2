---
# Host Variables for {{ inventory_hostname }}
# Generated by wolskinet.infrastructure.discovery role
# Machine Type: {{ discovered_machine.type }}
# 
# IMPORTANT: These are DISCOVERED packages/services from the source machine.
# They will be ADDED to global and group variables (not override them).
# Edit this file to customize what gets installed on this specific host.

# === DISCOVERED CONFIGURATION ===
# Packages found on the source machine

{% if discovered_docker.installed %}
# Docker Configuration
docker_detected: true
docker_version: "{{ discovered_docker.version }}"
docker_compose_available: {{ discovered_docker.compose.available }}
docker_compose_dir: "{{ discovered_docker.compose_dir }}"

{% if discovered_docker.services.canned %}
# Canned Services (will use dedicated collection roles)
docker_canned_services:
{% for service in discovered_docker.services.canned %}
  - name: "{{ service.name }}"
    role: "{{ service.role }}"
    image: "{{ service.image }}"
    compose_file: "{{ service.compose_file }}"
{% endfor %}

docker_canned_roles: {{ discovered_docker.services.canned_roles }}
{% endif %}

{% if discovered_docker.services.generic %}
# Generic Services (will use generic deployment)
docker_generic_services:
{% for service in discovered_docker.services.generic %}
  - name: "{{ service.name }}"
    image: "{{ service.image }}"
    compose_file: "{{ service.compose_file }}"
    compose_dir: "{{ service.compose_dir }}"
{% endfor %}
{% endif %}

{% if discovered_docker.compose_files %}
# Discovered Compose Files
docker_compose_files: {{ discovered_docker.compose_files }}
{% endif %}

{% if discovered_docker.env_files %}
# Discovered Environment Files
docker_env_files: {{ discovered_docker.env_files }}
{% endif %}

{% if discovered_docker.services.generic %}
# Generic compose files have been copied to:
# ./host_vars/{{ inventory_hostname }}/docker_compose/
# Review and customize these files, especially .env files for secrets
{% endif %}

{% endif %}
{% if discovered_dotfiles.users_with_dotfiles | default([]) | length > 0 %}
# Dotfiles Configuration (Multi-User Discovery)
dotfiles_users_scanned: {{ discovered_dotfiles.total_users_scanned | default(0) }}
dotfiles_users_with_configs: {{ discovered_dotfiles.users_with_dotfiles | length | default(0) }}

{% if discovered_dotfiles.primary_dotfiles.user | default('') != '' %}
# Primary dotfiles user: {{ discovered_dotfiles.primary_dotfiles.user }}
{% if discovered_dotfiles.primary_dotfiles.repository_detected %}
dotfiles_repository_url: "{{ discovered_dotfiles.primary_dotfiles.repository_url }}"
dotfiles_branch: "{{ discovered_dotfiles.primary_dotfiles.repository_branch }}"
dotfiles_method: "{{ 'stow' if discovered_dotfiles.primary_dotfiles.uses_stow else 'symlink' }}"
{% if discovered_dotfiles.primary_dotfiles.stow_packages | length > 0 %}
dotfiles_stow_packages: {{ discovered_dotfiles.primary_dotfiles.stow_packages }}
{% endif %}
{% endif %}
{% endif %}

# All users with dotfiles:
{% for user in discovered_dotfiles.users_with_dotfiles %}
# - {{ user.user }}: {{ 'repository' if user.repository_detected else 'local configs' }}{% if user.repository_url %} ({{ user.repository_url }}){% endif %}
{% endfor %}

{% endif %}
{% if discovered_users.shell_config.preferred_shell and discovered_users.shell_config.preferred_shell != '/bin/bash' %}
# Shell Configuration
default_user_shell: "{{ discovered_users.shell_config.preferred_shell }}"
shell_config_files_detected:
{% for config in discovered_users.shell_config.config_files %}
  - "{{ config }}"
{% endfor %}

{% endif %}
{% if discovered_repositories.apt.additional_sources %}
# APT Repository Configuration
apt_additional_sources: {{ discovered_repositories.apt.additional_sources | length }}

{% endif %}
{% if discovered_repositories.pacman.aur_helpers %}
# AUR Configuration (Arch Linux)
aur_helper: "{{ discovered_repositories.pacman.aur_helpers[0] }}"
{% if discovered_packages.aur_packages %}
aur_packages_count: {{ discovered_packages.aur_packages | length }}
{% endif %}

{% endif %}
{% if discovered_repositories.homebrew.taps %}
# Homebrew Configuration (macOS)
homebrew_taps_detected: {{ discovered_repositories.homebrew.taps | length }}

{% endif %}
{% if discovered_security.ssh.service_running %}
# SSH Configuration
ssh_service_detected: true
{% if discovered_security.ssh.settings.port and discovered_security.ssh.settings.port != '22' %}
ssh_port_custom: {{ discovered_security.ssh.settings.port }}
{% endif %}

{% endif %}
# System Tuning Configuration
# Placeholders for system-level optimizations and user permissions
# system_tuning_network_enabled: false           # Uncomment to enable network performance tuning
# system_tuning_security_enabled: false          # Uncomment to enable SSH hardening
# system_tuning_sudo_nopasswd: false             # Uncomment to enable passwordless sudo for primary user
# system_tuning_ssh_hardening_enabled: false     # Uncomment to harden SSH configuration
{% if discovered_desktop.detected | default(false) %}
# Desktop environment detected - gaming/hardware optimizations available:
# system_tuning_gaming_enabled: false            # Uncomment for gaming optimizations
# system_tuning_gpu_enabled: false               # Uncomment for GPU-specific configurations
# system_tuning_camera_support_enabled: false    # Uncomment for camera/webcam support
# system_tuning_bluetooth_enabled: false         # Uncomment for Bluetooth support
{% endif %}

# User Groups Configuration
# Based on discovered services and environment
{% if discovered_docker.installed | default(false) or discovered_desktop.detected | default(false) %}
system_tuning_user_groups_add:                   # Discovered services suggest these groups:
{% if discovered_docker.installed | default(false) %}
  - docker                                        # Docker service detected
{% endif %}
{% if discovered_desktop.detected | default(false) %}
  - audio                                         # Desktop environment detected
{% endif %}
{% else %}
# system_tuning_user_groups_add: []              # Uncomment to add user to additional groups
{% endif %}

# System Security Configuration
# Based on discovered security services and configurations
{% if discovered_services.security.firewall_detected | default(false) %}
enable_firewall: true                            # Firewall service detected
firewall_type: "{{ discovered_services.security.firewall_type }}"  # Discovered: {{ discovered_services.security.firewall_type }}
{% else %}
# enable_firewall: false                         # No firewall detected - uncomment to enable
# firewall_type: "ufw"                           # Uncomment and set desired firewall type
{% endif %}
{% if discovered_services.security.fail2ban_detected | default(false) %}
enable_fail2ban: true                            # fail2ban service detected
{% else %}
# enable_fail2ban: true                          # No fail2ban detected - uncomment to enable
{% endif %}
{% if discovered_security.ssh.service_running | default(false) %}
# firewall_allowed_ports:                        # SSH service detected
#   - "22"                                        # Uncomment to configure firewall ports
{% endif %}

# System Information (for reference)
discovered_info:
  os: "{{ discovered_system.os.distribution }} {{ discovered_system.os.version }}"
  architecture: "{{ discovered_system.os.architecture }}"
  memory_mb: {{ discovered_system.hardware.memory_mb }}
  cpu_cores: {{ discovered_system.hardware.cpu_cores }}
  packages_total: {{ discovered_packages.total }}
  services_running: {{ discovered_services.running | length }}
  machine_type: "{{ discovered_machine.type }}"
  discovery_date: "{{ ansible_date_time.iso8601 }}"

# TODO: Review and uncomment Docker service entries
# TODO: Configure service-specific settings
# TODO: Set up vault variables for sensitive data
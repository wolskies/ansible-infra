---
# Host Variables for {{ inventory_hostname }}
# Generated by wolskinet.infrastructure.discovery role
# Machine Type: {{ discovered_machine.type | default('unknown') }}
# 
# IMPORTANT: These are DISCOVERED packages/services from the source machine.
# They will be ADDED to global and group variables (not override them).
# Edit this file to customize what gets installed on this specific host.

# === DISCOVERED CONFIGURATION ===
# Packages found on the source machine

{% if discovered_docker is defined and discovered_docker.installed | default(false) %}
# Docker Configuration
docker_detected: true
docker_version: "{{ discovered_docker.version | default('') }}"
docker_compose_available: {{ discovered_docker.compose.available | default(false) }}

# Docker Compose Search Paths
docker_compose_search_paths: {{ discovered_docker.compose_services.search_paths | default([]) }}

{% if discovered_docker.containers.count > 0 %}
# Running Docker Containers: {{ discovered_docker.containers.count }}
docker_running_containers:
{% for container in discovered_docker.containers.running | default([]) %}
  - name: "{{ container.Names | default('') }}"
    image: "{{ container.Image | default('') }}"
    ports: "{{ container.Ports | default('') }}"
    status: "{{ container.Status | default('') }}"
{% endfor %}
{% endif %}

{% if discovered_docker.compose_services.total > 0 %}
# Discovered Docker Compose Services: {{ discovered_docker.compose_services.total }}
# Services are organized by folder, each with its own docker-compose.yml

{% if discovered_docker.compose_services.canned | length > 0 %}
# === Canned Services (with dedicated collection roles) ===
docker_compose_canned_services:
{% for service in discovered_docker.compose_services.canned %}
  - name: "{{ service.name }}"  # Folder: {{ service.directory }}
    directory: "{{ service.directory }}"
    role: "{{ service.role }}"  # Collection role to use
    compose_file: "{{ service.compose_file }}"
{% if service.ports is defined and service.ports | length > 0 %}
    ports: {{ service.ports }}
{% endif %}
{% if service.containers is defined %}
    containers:
{% for container in service.containers %}
      - name: "{{ container.name }}"
        image: "{{ container.image }}"
{% endfor %}
{% endif %}
{% if service.env_files is defined and service.env_files | length > 0 %}
    env_files: {{ service.env_files }}
{% endif %}

{% endfor %}
{% endif %}

{% if discovered_docker.compose_services.generic | length > 0 %}
# === Generic Services (custom deployments) ===
docker_compose_generic_services:
{% for service in discovered_docker.compose_services.generic %}
  - name: "{{ service.name }}"  # Folder: {{ service.directory }}
    directory: "{{ service.directory }}"
    compose_file: "{{ service.compose_file }}"
{% if service.ports is defined and service.ports | length > 0 %}
    ports: {{ service.ports }}
{% endif %}
{% if service.containers is defined %}
    containers:
{% for container in service.containers %}
      - name: "{{ container.name }}"
        image: "{{ container.image }}"
{% endfor %}
{% endif %}
{% if service.env_files is defined and service.env_files | length > 0 %}
    env_files: {{ service.env_files }}
{% endif %}
{% if service.volumes is defined and service.volumes | length > 0 %}
    volumes: {{ service.volumes }}
{% endif %}

{% endfor %}

# NOTE: Review these generic services and their configurations
# Consider creating dedicated roles or using container_platform role
{% endif %}
{% endif %}

{% endif %}
{% if discovered_dotfiles.users_with_dotfiles | default([]) | length > 0 %}
# Dotfiles Configuration (Multi-User Discovery)
dotfiles_users_scanned: {{ discovered_dotfiles.total_users_scanned | default(0) }}
dotfiles_users_with_configs: {{ discovered_dotfiles.users_with_dotfiles | length | default(0) }}

{% if discovered_dotfiles.primary_dotfiles is defined and discovered_dotfiles.primary_dotfiles.user | default('') != '' %}
# Primary dotfiles user: {{ discovered_dotfiles.primary_dotfiles.user | default('') }}
{% if discovered_dotfiles.primary_dotfiles.repository_detected | default(false) %}
dotfiles_repository_url: "{{ discovered_dotfiles.primary_dotfiles.repository_url | default('') }}"
dotfiles_branch: "{{ discovered_dotfiles.primary_dotfiles.repository_branch | default('main') }}"
dotfiles_method: "{{ 'stow' if discovered_dotfiles.primary_dotfiles.uses_stow | default(false) else 'symlink' }}"
{% if discovered_dotfiles.primary_dotfiles.stow_packages | default([]) | length > 0 %}
dotfiles_stow_packages: {{ discovered_dotfiles.primary_dotfiles.stow_packages | default([]) }}
{% endif %}
{% endif %}
{% endif %}

# All users with dotfiles:
{% for user in discovered_dotfiles.users_with_dotfiles | default([]) %}
# - {{ user.user }}: {{ 'repository' if user.repository_detected else 'local configs' }}{% if user.repository_url %} ({{ user.repository_url }}){% endif %}
{% endfor %}

{% endif %}
{% if discovered_users.shell_config is defined and discovered_users.shell_config.preferred_shell is defined and discovered_users.shell_config.preferred_shell != '/bin/bash' %}
# Shell Configuration
default_user_shell: "{{ discovered_users.shell_config.preferred_shell | default('/bin/bash') }}"
shell_config_files_detected:
{% for config in discovered_users.shell_config.config_files | default([]) %}
  - "{{ config }}"
{% endfor %}

{% endif %}
{% if discovered_repositories.apt is defined and discovered_repositories.apt.additional_sources is defined %}
# APT Repository Configuration
apt_additional_sources: {{ discovered_repositories.apt.additional_sources | length }}

{% endif %}
{% if discovered_repositories.pacman is defined and discovered_repositories.pacman.aur_helpers is defined %}
# AUR Configuration (Arch Linux)
aur_helper: "{{ discovered_repositories.pacman.aur_helpers[0] }}"
{% if discovered_packages.aur_packages is defined %}
aur_packages_count: {{ discovered_packages.aur_packages | length }}
{% endif %}

{% endif %}
{% if discovered_repositories.homebrew is defined and discovered_repositories.homebrew.taps is defined %}
# Homebrew Configuration (macOS)
homebrew_taps_detected: {{ discovered_repositories.homebrew.taps | length }}

{% endif %}
{% if discovered_security.ssh is defined and discovered_security.ssh.service_running | default(false) %}
# SSH Configuration
ssh_service_detected: true
{% if discovered_security.ssh.settings is defined and discovered_security.ssh.settings.port is defined and discovered_security.ssh.settings.port != '22' %}
ssh_port_custom: {{ discovered_security.ssh.settings.port | default('22') }}
{% endif %}

{% endif %}
# === SYSTEM TUNING CONFIGURATION ===
# Hardware and performance optimizations with sensible defaults

# Gaming optimizations
gaming:
  enabled: false                                # Enable gaming-specific optimizations
  kernel_params: ["mitigations=off"]           # Kernel parameters for performance
  cpu_governor: "performance"                   # CPU frequency governor

# GPU configuration  
gpu:
  enabled: false                                # Enable GPU-specific configurations
  nvidia_support: false                        # NVIDIA driver support
  amd_support: false                           # AMD driver support  
  intel_support: false                         # Intel integrated graphics

# Bluetooth support
bluetooth:
  enabled: false                                # Enable Bluetooth functionality
  audio_codecs: ["aptx", "ldac", "aac"]        # Supported audio codecs

# Camera/webcam support
camera:
  enabled: false                                # Enable camera/webcam support
  v4l2_support: true                           # Video4Linux2 support

# Audio system optimizations
audio:
  enabled: false                                # Enable audio optimizations
  low_latency: false                           # Low-latency audio configuration
  real_time_audio: false                       # Real-time audio processing

# Security configuration
security:
  ssh_hardening: false                         # Enable SSH security hardening
  firewall_strict: false                       # Enable strict firewall rules
  fail2ban: false                              # Enable fail2ban intrusion prevention

# Network performance tuning  
network:
  performance_tuning: false                    # Enable network performance optimizations
  tcp_optimization: false                      # Enable TCP stack optimizations

# Discovered Users and Groups  
# All regular users and their groups discovered on the system
discovered_user_details: {{ discovered_users.system_users.regular_users_detailed | default([]) }}

# User-specific configuration options (configure per user as needed):
# For user management, create individual entries like:
# users:
#   - name: "username"
#     sudo_nopasswd: false                     # Enable passwordless sudo for this user
#     ssh_public_key: ""                       # SSH public key content to deploy for this user  
#     ssh_password_auth: true                  # Allow password authentication for this user

# === SECURITY CONFIGURATION ===
# Based on discovered security services and configurations
{% if discovered_security.firewall is defined and discovered_security.firewall.detected | default(false) %}
enable_firewall: true                            # Firewall service detected
firewall_type: "{{ discovered_security.firewall.type | default('') }}"  # Discovered: {{ discovered_security.firewall.type | default('') }}

{% if discovered_security.firewall.rules is defined and discovered_security.firewall.rules | length > 0 %}
# Discovered firewall rules (ready for community.general.ufw module)
firewall_rules:
{% for rule in discovered_security.firewall.rules %}
  - rule: "{{ rule.rule }}"          # {{ rule.comment }}
    port: "{{ rule.port }}"
    proto: "{{ rule.proto }}"
{% endfor %}
{% endif %}
{% else %}
# enable_firewall: false                         # No firewall detected - uncomment to enable
# firewall_type: "ufw"                           # Uncomment and set desired firewall type
{% endif %}
{% if discovered_security.fail2ban is defined and discovered_security.fail2ban.service_enabled | default(false) %}
enable_fail2ban: true                            # fail2ban service detected
{% else %}
# enable_fail2ban: true                          # No fail2ban detected - uncomment to enable
{% endif %}

# === SYSTEM INFORMATION ===
# Discovery metadata and system details (for reference)
discovered_info:
  os: "{{ discovered_system.os.distribution | default('unknown') }} {{ discovered_system.os.version | default('') }}"
  architecture: "{{ discovered_system.os.architecture | default('unknown') }}"
  memory_mb: {{ discovered_system.hardware.memory_mb | default(0) }}
  cpu_cores: {{ discovered_system.hardware.cpu_cores | default(0) }}
  packages_total: {{ discovered_packages.total | default(0) }}
  services_running: {{ discovered_services.running | default([]) | length }}
  machine_type: "{{ discovered_machine.type | default('unknown') }}"
  discovery_date: "{{ ansible_date_time.iso8601 }}"

# TODO: Review and uncomment Docker service entries
# TODO: Configure service-specific settings
# TODO: Set up vault variables for sensitive data
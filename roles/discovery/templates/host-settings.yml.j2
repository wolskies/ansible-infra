---
# {{ inventory_hostname }} - Host Settings
# Generated by wolskinet.infrastructure.discovery on {{ ansible_date_time.iso8601 }}
# Source: {{ ansible_distribution }} {{ ansible_distribution_version }} ({{ ansible_architecture }})

# =============================================================================
# BASIC SETUP ROLE VARIABLES
# =============================================================================

# System configuration
ansible_user: "{{ discovered_users.current_user.name }}"
default_user_shell: "{{ discovered_users.shell_config.preferred_shell | default('/bin/bash') }}"

# User management
{% if discovered_users.current_user is defined %}
user_details:
  - name: "{{ discovered_users.current_user.name }}"
    uid: {{ discovered_users.current_user.uid }}
    shell: "{{ discovered_users.current_user.shell }}"
{% endif %}

# Package installation (hierarchical system: all + group + host)
{% if discovered_packages.standard_packages | default([]) | length > 0 %}
host_packages_install_{{ ansible_distribution }}:
{% for package in discovered_packages.standard_packages | default([]) | unique | sort %}
  - "{{ package }}"
{% endfor %}
{% endif %}

# Package categories to install
install_development_packages: {{ 'development' in discovered_machine_characteristics | default([]) | lower }}
install_media_packages: {{ discovered_desktop.detected | default(false) | lower }}
install_desktop_packages: {{ discovered_desktop.detected | default(false) | lower }}

# =============================================================================
# CONTAINER PLATFORM ROLE VARIABLES
# =============================================================================

{% if discovered_docker.installed | default(false) %}
# Docker detected - container_platform role variables
docker_users:
  - "{{ discovered_users.current_user.name }}"

{% if discovered_docker.services | default([]) | length > 0 %}
# Discovered container services
container_services:
{% for service in discovered_docker.services | default([]) %}
  - name: "{{ service.name }}"
    image: "{{ service.image }}"
{% if service.ports is defined %}
    ports:
{% for port in service.ports %}
      - "{{ port }}"
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}

{% if discovered_docker.networks | default([]) | length > 0 %}
# Discovered Docker networks
docker_networks:
{% for network in discovered_docker.networks | default([]) %}
  - name: "{{ network.name }}"
    driver: "{{ network.driver | default('bridge') }}"
{% endfor %}
{% endif %}
{% endif %}

# =============================================================================
# DOTFILES ROLE VARIABLES
# =============================================================================

{% if discovered_dotfiles.suggested_dotfiles_source_type != 'none' %}
# Dotfiles configuration
dotfiles_source_type: "{{ discovered_dotfiles.suggested_dotfiles_source_type }}"

{% if discovered_dotfiles.suggested_dotfiles_source_type == 'repository' %}
# Repository method - dotfiles git repository detected
dotfiles_repository_url: "{{ discovered_dotfiles.repository_url }}"
dotfiles_branch: "{{ discovered_dotfiles.repository_branch | default('main') }}"
dotfiles_method: "{{ 'stow' if discovered_dotfiles.uses_stow else 'symlink' }}"
{% endif %}

{% if discovered_dotfiles.suggested_dotfiles_source_type == 'local_files' %}
# Local files method - configuration files discovered and copied
dotfiles_local_files:
{% for config_file in discovered_dotfiles.local_config_files | default([]) %}
  - src: "{{ inventory_dir }}/host_vars/{{ inventory_hostname }}/config_files/{{ config_file.dest }}"
    dest: "{{ config_file.dest }}"
{% if config_file.mode is defined %}
    mode: "{{ config_file.mode }}"
{% endif %}
{% endfor %}
{% endif %}

# Backup settings
dotfiles_backup_existing: true
dotfiles_backup_suffix: ".pre-ansible"
{% endif %}

# =============================================================================
# SYSTEM TUNING ROLE VARIABLES
# =============================================================================

# Network and performance tuning
system_tuning_network_enabled: true
system_tuning_gaming_enabled: {{ 'gaming' in discovered_machine_characteristics | default([]) | lower }}

# Hardware-specific tuning
{% if discovered_hardware.gpu.nvidia_detected | default(false) %}
system_tuning_gpu_enabled: true
system_tuning_gpu_nvidia_enabled: true
{% endif %}

# Security hardening (enabled for servers)
system_tuning_security_enabled: {{ 'server' in discovered_machine_characteristics | default([]) | lower }}
system_tuning_ssh_hardening_enabled: {{ discovered_services.ssh_detected | default(false) | lower }}

# Service management
{% if discovered_services.should_enable | default([]) | length > 0 %}
system_tuning_services_enable:
{% for service in discovered_services.should_enable | default([]) %}
  - "{{ service }}"
{% endfor %}
{% endif %}

{% if discovered_services.should_disable | default([]) | length > 0 %}
system_tuning_services_disable:
{% for service in discovered_services.should_disable | default([]) %}
  - "{{ service }}"
{% endfor %}
{% endif %}

# User groups for hardware access
{% set user_groups = [] %}
{% if discovered_hardware.serial_devices | default(false) %}
{% set _ = user_groups.append('dialout') %}
{% endif %}
{% if discovered_docker.installed | default(false) %}
{% set _ = user_groups.append('docker') %}
{% endif %}
{% if discovered_desktop.detected | default(false) %}
{% set _ = user_groups.extend(['audio', 'video']) %}
{% endif %}
{% if user_groups | length > 0 %}
system_tuning_user_groups_add:
{% for group in user_groups | unique %}
  - "{{ group }}"
{% endfor %}
{% endif %}

# =============================================================================
# MAINTENANCE ROLE VARIABLES
# =============================================================================

# Automatic updates (enabled for servers, optional for workstations)
enable_automatic_updates: {{ 'server' in discovered_machine_characteristics | default([]) | lower }}

# System maintenance
system_maintenance_enabled: true
cleanup_old_packages: true
maintain_dev_tools: {{ 'development' in discovered_machine_characteristics | default([]) | lower }}

# =============================================================================
# FIREWALL ROLE VARIABLES (Servers)
# =============================================================================

{% if 'server' in discovered_machine_characteristics | default([]) %}
# Firewall configuration for server
enable_firewall: true

{% set firewall_ports = [] %}
{% if discovered_services.ssh_detected | default(false) %}
{% set _ = firewall_ports.append('22') %}
{% endif %}
{% for service in discovered_services.public_services | default([]) %}
{% set _ = firewall_ports.append(service.port | string) %}
{% endfor %}
{% if firewall_ports | length > 0 %}
firewall_allowed_ports:
{% for port in firewall_ports | unique %}
  - "{{ port }}"
{% endfor %}
{% endif %}
{% endif %}

# =============================================================================
# DISCOVERY METADATA
# =============================================================================

# Discovery information
discovery_completed_at: "{{ ansible_date_time.iso8601 }}"
discovery_source_os: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
discovery_architecture: "{{ ansible_architecture }}"

# Machine characteristics (for reference)
{% if discovered_machine_characteristics | default([]) | length > 0 %}
discovered_machine_characteristics:
{% for characteristic in discovered_machine_characteristics | default([]) %}
  - "{{ characteristic }}"
{% endfor %}
{% endif %}

# Hardware summary
system_memory_mb: {{ ansible_memory_mb.real.total }}
system_cpu_cores: {{ ansible_processor_vcpus }}
system_architecture: "{{ ansible_architecture }}"

{% if ansible_default_ipv4.interface is defined %}
# Network configuration
primary_network_interface: "{{ ansible_default_ipv4.interface }}"
primary_ip_address: "{{ ansible_default_ipv4.address }}"
{% endif %}

# =============================================================================
# USAGE NOTES
# =============================================================================

# This file contains role-specific variables for {{ inventory_hostname }}
#
# RECOMMENDED PLAYBOOK STRUCTURE:
# - hosts: {{ inventory_hostname }}
#   roles:
#     - wolskinet.infrastructure.basic_setup
{% if discovered_docker.installed | default(false) %}
#     - wolskinet.infrastructure.container_platform
{% endif %}
{% if discovered_dotfiles.suggested_dotfiles_source_type != 'none' %}
#     - wolskinet.infrastructure.dotfiles
{% endif %}
#     - wolskinet.infrastructure.system_tuning
#     - wolskinet.infrastructure.maintenance
{% if 'server' in discovered_machine_characteristics | default([]) %}
#     - wolskinet.infrastructure.firewall
{% endif %}
#
# HIERARCHICAL VARIABLES:
# All role variables support all/group/host hierarchy:
# - all_packages_install_{{ ansible_distribution }} (group_vars/all)
# - group_packages_install_{{ ansible_distribution }} (group_vars/[group])
# - host_packages_install_{{ ansible_distribution }} (this file)
#
# Variables in this file represent HOST-level configuration.
# Add GROUP and ALL level variables in appropriate group_vars/ files.

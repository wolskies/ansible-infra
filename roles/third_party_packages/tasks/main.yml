---
# Simplified third-party packages role - all tasks consolidated

# Configure additional repositories
- name: Configure additional repositories
  block:
    # APT repositories (Debian/Ubuntu)
    - name: Add APT repositories
      block:
        - name: Add APT keys
          ansible.builtin.apt_key:
            url: "{{ item }}"
            state: present
          loop: "{{ additional_repositories.apt.keys | default([]) }}"
          become: true

        - name: Add APT sources
          ansible.builtin.apt_repository:
            repo: "{{ item }}"
            state: present
          loop: "{{ additional_repositories.apt.sources | default([]) }}"
          become: true

        - name: Update APT cache after adding repositories
          ansible.builtin.apt:
            update_cache: true
          become: true
          when: additional_repositories.apt.sources | default([]) | length > 0
      when: ansible_os_family == "Debian"

    # Homebrew taps (macOS)
    - name: Add Homebrew taps
      community.general.homebrew_tap:
        name: "{{ item }}"
        state: present
      loop: "{{ additional_repositories.homebrew.taps | default([]) }}"
      when: ansible_os_family == "Darwin"

    # YUM/DNF repositories (RedHat family)
    - name: Add YUM repositories
      ansible.builtin.yum_repository:
        name: "{{ item.name }}"
        description: "{{ item.description | default(item.name) }}"
        baseurl: "{{ item.baseurl }}"
        gpgkey: "{{ item.gpgkey | default(omit) }}"
        enabled: "{{ item.enabled | default(true) }}"
      loop: "{{ additional_repositories.yum.repos | default([]) }}"
      become: true
      when: ansible_os_family == "RedHat"
  when:
    - enable_repositories | default(true)
    - additional_repositories is defined
  tags:
    - repositories
    - third-party-packages

# Install third-party system packages
- name: Install third-party system packages
  ansible.builtin.package:
    name: "{{ third_party_packages }}"
    state: present
  become: true
  when:
    - third_party_packages is defined
    - third_party_packages | length > 0
  tags:
    - system-packages
    - third-party-packages

# Python packages via pip
- name: Setup Python packages
  block:
    - name: Validate pip installation method
      ansible.builtin.fail:
        msg: "Invalid pip_install_method: {{ pip_install_method }}. Must be 'user', 'virtualenv', or 'global'"
      when: pip_install_method not in ['user', 'virtualenv', 'global']

    - name: Warn about global pip installation
      ansible.builtin.debug:
        msg: |
          WARNING: Global pip installation can conflict with system packages.
          Consider using 'user' or 'virtualenv' method instead.
      when: pip_install_method == 'global'

    - name: Ensure pip is available
      ansible.builtin.command: "python3 -m pip --version"
      register: pip_check
      changed_when: false
      failed_when: pip_check.rc != 0

    - name: Create virtual environment if needed
      ansible.builtin.command:
        cmd: "python3 -m venv {{ pip_virtualenv_path }}"
        creates: "{{ pip_virtualenv_path }}/bin/activate"
      become: false
      when: pip_install_method == 'virtualenv'

    - name: Install Python packages
      ansible.builtin.pip:
        name: "{{ pip_packages }}"
        state: present
        virtualenv: "{{ pip_virtualenv_path if pip_install_method == 'virtualenv' else omit }}"
        extra_args: "{{ '--user' if pip_install_method == 'user' else '' }}"
      become: "{{ pip_install_method == 'global' }}"
      become_user: "{{ ansible_user if pip_install_method in ['user', 'virtualenv'] else omit }}"
  when:
    - enable_python_packages | default(true)
    - pip_packages is defined
    - pip_packages | length > 0
  tags:
    - python
    - pip
    - third-party-packages

# Node.js packages via npm
- name: Setup Node.js packages
  block:
    - name: Ensure npm is installed
      ansible.builtin.package:
        name:
          - nodejs
          - npm
        state: present
      become: true

    - name: Install npm packages globally
      community.general.npm:
        name: "{{ item }}"
        global: true
        state: present
      loop: "{{ npm_packages }}"
      become: true
  when:
    - enable_npm_packages | default(true)
    - npm_packages is defined
    - npm_packages | length > 0
  tags:
    - nodejs
    - npm
    - third-party-packages

# Rust packages via cargo
- name: Setup Rust packages
  block:
    - name: Check if cargo is installed
      ansible.builtin.command: which cargo
      register: cargo_check
      changed_when: false
      failed_when: false

    - name: Install Rust if not present
      ansible.builtin.shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        creates: "{{ ansible_env.HOME }}/.cargo/bin/cargo"
      when: cargo_check.rc != 0

    - name: Install Rust packages
      ansible.builtin.command: "{{ ansible_env.HOME }}/.cargo/bin/cargo install {{ item }}"
      loop: "{{ rust_packages }}"
      register: cargo_install
      changed_when: "'Installed' in cargo_install.stdout"
      environment:
        PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.cargo/bin"
  when:
    - enable_rust_packages | default(false)
    - rust_packages is defined
    - rust_packages | length > 0
  tags:
    - rust
    - cargo
    - third-party-packages

# Go packages
- name: Setup Go packages
  block:
    - name: Check if go is installed
      ansible.builtin.command: which go
      register: go_check
      changed_when: false
      failed_when: false

    - name: Fail if Go is not installed
      ansible.builtin.fail:
        msg: "Go is not installed. Please install Go first."
      when: go_check.rc != 0

    - name: Install Go packages
      ansible.builtin.command: "go install {{ item }}"
      loop: "{{ go_packages }}"
      environment:
        GO111MODULE: "on"
        GOPATH: "{{ ansible_env.HOME }}/go"
        PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/go/bin"
      register: go_install
      changed_when: go_install.rc == 0
  when:
    - enable_go_packages | default(false)
    - go_packages is defined
    - go_packages | length > 0
  tags:
    - golang
    - go
    - third-party-packages

# Display summary
- name: Display third-party packages summary
  ansible.builtin.debug:
    msg:
      - "=== Third-Party Packages Summary ==="
      - "Repositories configured: {{ (additional_repositories.apt.sources | default([]) | length) + (additional_repositories.homebrew.taps | default([]) | length) + (additional_repositories.yum.repos | default([]) | length) }}"
      - "System packages: {{ third_party_packages | default([]) | length }}"
      - "Python packages: {{ pip_packages | default([]) | length }} (method: {{ pip_install_method | default('user') }})"
      - "Node.js packages: {{ npm_packages | default([]) | length }}"
      - "Rust packages: {{ rust_packages | default([]) | length }}"
      - "Go packages: {{ go_packages | default([]) | length }}"
  tags:
    - always
    - summary
    - third-party-packages

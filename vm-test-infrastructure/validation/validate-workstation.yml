---
# Workstation Configuration Validation Tasks
# Compares discovery results against expected workstation configuration

- name: Load discovery results for {{ host_name }}
  ansible.builtin.set_fact:
    actual_config: "{{ lookup('file', 'inventory/host_vars/' + host_name + '/vars.yml', errors='ignore') | default('{}', true) | from_yaml }}"
  failed_when: false

- name: Initialize validation result for {{ host_name }}
  ansible.builtin.set_fact:
    host_validation:
      hostname: "{{ host_name }}"
      type: "workstation"
      status: "unknown"
      checks: []
      passed: 0
      failed: 0
      errors: []

- name: Validate timezone configuration
  ansible.builtin.set_fact:
    host_validation: >
      {{ host_validation | combine({
        'checks': host_validation.checks + [{
          'test': 'timezone',
          'expected': expected_config.domain_timezone,
          'actual': actual_config.get('domain_timezone', 'not_found'),
          'passed': (actual_config.get('domain_timezone', '') == expected_config.domain_timezone)
        }]
      }) }}
  when: actual_config is defined

- name: Validate target user creation
  ansible.builtin.set_fact:
    host_validation: >
      {{ host_validation | combine({
        'checks': host_validation.checks + [{
          'test': 'target_user',
          'expected': expected_config.users[0].name,
          'actual': actual_config.get('users', []) | map(attribute='name') | list,
          'passed': (expected_config.users[0].name in (actual_config.get('users', []) | map(attribute='name') | list))
        }]
      }) }}
  when: actual_config is defined and expected_config.users | length > 0

- name: Validate sample package installation
  # This test verifies that the package management system is working by checking
  # for a few representative packages from the config. Not meant to be exhaustive.
  ansible.builtin.set_fact:
    sample_packages: >-
      {{
        ['firefox', 'mc', 'lynx'] if 'Archlinux' in (actual_config.get('packages', {}).get('present', {}).get('host', {}).keys() | list)
        else ['mc', 'emacs-nox', 'lynx']
      }}
    installed_packages: "{{ actual_config.get('packages', {}).get('present', {}).get('host', {}).values() | list | flatten | map(attribute='name') | list }}"
  when: actual_config is defined

- name: Check sample packages installed
  ansible.builtin.set_fact:
    host_validation: >
      {{ host_validation | combine({
        'checks': host_validation.checks + [{
          'test': 'sample_packages_installed',
          'expected': sample_packages,
          'actual': installed_packages | intersect(sample_packages),
          'passed': (sample_packages | difference(installed_packages) | length == 0)
        }]
      }) }}
  when: actual_config is defined

- name: Calculate validation summary
  ansible.builtin.set_fact:
    host_validation: >
      {{ host_validation | combine({
        'passed': host_validation.checks | selectattr('passed') | list | length,
        'failed': host_validation.checks | rejectattr('passed') | list | length,
        'status': 'pass' if (host_validation.checks | rejectattr('passed') | list | length == 0) else 'fail'
      }) }}

- name: Add host validation to results
  ansible.builtin.set_fact:
    validation_results: "{{ validation_results + [host_validation] }}"

- name: Display workstation validation result for {{ host_name }}
  ansible.builtin.debug:
    msg:
      - "Workstation {{ host_name }}: {{ host_validation.status | upper }}"
      - "Passed: {{ host_validation.passed }}/{{ host_validation.checks | length }}"
      - "Failed checks: {{ host_validation.checks | rejectattr('passed') | map(attribute='test') | list }}"

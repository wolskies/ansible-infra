---
# Workstation Configuration for Final Release Testing
# Based on MASTER_REFERENCE_CONFIG.yml - proven variable formats

# =============================================================================
# BASE SYSTEM CONFIGURATION
# =============================================================================

# OS Configuration (from os_configuration role testing)
host_hostname: "{{ inventory_hostname }}"
domain_name: "dev.local"
host_update_hosts: true
domain_locale: "en_US.UTF-8"
domain_language: "en_US.UTF-8"
domain_timezone: "America/Los_Angeles" # Different from servers

# =============================================================================
# PACKAGE MANAGEMENT
# =============================================================================

# Package Management (from manage_packages role testing)
manage_packages_all:
  Ubuntu:
    - curl
    - wget
    - git
    - vim
    - htop
    - build-essential
    - python3-pip
    - tree
    - jq
    - tmux
    - neovim
  Debian:
    - curl
    - wget
    - git
    - vim
    - htop
    - build-essential
    - python3-pip
    - tree
    - jq
    - tmux
    - neovim
  Archlinux:
    - curl
    - wget
    - git
    - vim
    - htop
    - base-devel
    - python-pip
    - tree
    - jq
    - tmux
    - neovim

manage_packages_group:
  # Development tools
  Ubuntu:
    - code
    - docker.io
    - docker-compose
    - nodejs
    - npm
    - golang
    - rustc
    - cargo
  Debian:
    - docker.io
    - docker-compose
    - nodejs
    - npm
    - golang
    - rustc
    - cargo
  Archlinux:
    - docker
    - docker-compose
    - nodejs
    - npm
    - go
    - rust
    - cargo

# =============================================================================
# DEVELOPMENT ENVIRONMENTS
# =============================================================================

# Development environment configuration is now part of the users variable above
# Individual role variables are set automatically by configure_users role

# =============================================================================
# USER MANAGEMENT
# =============================================================================

# User Management (from configure_users role testing)
users:
  - name: devuser
    password: "{{ vault_devuser_password | default('!') }}" # Locked if no vault password
    groups: [sudo, docker]
    shell: /bin/bash
    comment: "Development User"
    state: present
    ssh_keys:
      - key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAITestDevKeyForVMTesting devuser@dev"
      - key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC... devuser@dev-backup"
    git:
      user_name: "Dev User"
      user_email: "devuser@example.com"
      editor: "nvim"
    nodejs:
      packages:
        - typescript
        - eslint
        - prettier
    rust:
      packages:
        - ripgrep
        - bat
    go:
      packages:
        - "github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
    neovim:
      enabled: true
    terminal_entries:
      - alacritty
      - kitty
    dotfiles:
      enable: true
      repository: "https://github.com/example/dotfiles.git" # Example - would be real repo

# =============================================================================
# TERMINAL CONFIGURATION
# =============================================================================

# Terminal configuration is now part of the users variable above
# terminal_user and terminal_entries are set automatically by configure_users role

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Minimal security for development
firewall:
  enabled: false # Workstations need open access for development

fail2ban:
  enabled: false # Not needed on workstations

# =============================================================================
# PACKAGE SYSTEM CONFIGURATION
# =============================================================================

# Snap Configuration (development tools)
snap:
  remove_completely: false
snap_packages:
  - name: code
    state: present
    classic: true
  - name: discord
    state: present

# Flatpak Configuration (GUI applications)
flatpak:
  enabled: true
flatpak_packages:
  - name: org.mozilla.firefox
    state: present
  - name: org.gimp.GIMP
    state: present

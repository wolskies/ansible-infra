---
# =============================================================================
# MASTER REFERENCE CONFIGURATION FOR VM TESTING
# =============================================================================
# This file contains PROVEN variable formats extracted from working CI molecule tests
# and the collection's defaults/main.yml. Use this as the authoritative source for
# VM test scenario configurations to avoid variable format mistakes.
#
# Source: Extracted from individual role molecule tests + collection defaults
# Status: PROVEN - these formats work in CI
# Usage: Copy sections as needed for VM test scenarios
# =============================================================================

# Host configuration (from os_configuration role testing)
host_hostname: "{{ inventory_hostname }}"
host_update_hosts: true
host_locale: en_US.UTF-8
host_timezone: America/New_York

# Package management (from manage_packages role testing)
# CRITICAL: Use manage_packages_{all|group|host}.{Distribution} format
manage_packages_all:
  Ubuntu:
    - curl
    - wget
    - git
    - vim
    - htop
    - fail2ban
    - ufw
    - build-essential
    - python3-pip
    - tree
  Debian:
    - curl
    - wget
    - git
    - vim
    - htop
    - fail2ban
    - ufw
    - build-essential
    - python3-pip
    - tree

manage_packages_host:
  Ubuntu:
    - jq
    - rsync
    - neovim
    - tmux
  Debian:
    - jq
    - rsync
    - neovim
    - tmux

# User management (from configure_users role testing + collection defaults)
users:
  - name: testdev
    uid: 1001
    groups: [sudo]
    shell: /bin/bash
    comment: "Test Developer User"
    state: present
    create_home: true
    ssh_keys:
      - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAITestKeyForVMTesting test@vm"

# Language toolchains (from individual role molecule tests)
# NodeJS role variables
node_user: testdev
node_packages:
  - typescript
  - eslint
  - prettier

# Rust role variables
rust_user: testdev
rust_packages:
  - cargo-watch
  - ripgrep

# Go role variables
go_user: testdev
go_packages:
  - github.com/golangci/golangci-lint/cmd/golangci-lint@latest

# Firewall configuration (from manage_security_services role testing)
# CRITICAL: Use firewall.enabled, NOT host_security.firewall
firewall:
  enabled: true
  prevent_ssh_lockout: true
  stealth_mode: false
  block_all: false
  logging: false
  rules:
    - rule: allow
      port: 22
      protocol: tcp
      comment: "SSH access"
    - rule: allow
      port: 80
      protocol: tcp
      comment: "HTTP"

# Fail2ban configuration (from manage_security_services role testing)
fail2ban:
  enabled: true
  bantime: "1h"
  findtime: "10m"
  maxretry: 5
  jails:
    - name: sshd
      enabled: true
      maxretry: 3
      bantime: "1h"
      findtime: "10m"
      logpath: /var/log/auth.log

# Terminal configuration (from terminal_config role testing)
terminal_config:
  install_terminfo: true
  terminals:
    - alacritty
    - kitty

# Snap configuration (from manage_snap_packages role testing)
snap:
  remove_completely: true

# Flatpak configuration (from manage_flatpak role testing)
flatpak:
  enabled: false
# =============================================================================
# VARIABLE FORMAT MISTAKES TO AVOID
# =============================================================================
# These were the incorrect formats found in VM test scenarios:
#
# ❌ host_packages.debian → ✅ manage_packages_host.Debian
# ❌ host_security.firewall → ✅ firewall.enabled
# ❌ dev_nodejs.install → ✅ node_user, node_packages
# ❌ security_services.fail2ban → ✅ fail2ban.enabled
# ❌ security_services.ufw → ✅ firewall.enabled (ufw is the package)
#
# Key principle: Each role expects its own specific variable names,
# not generic "dev_*" or "host_*" or "*_services.*" wrapper formats
# =============================================================================

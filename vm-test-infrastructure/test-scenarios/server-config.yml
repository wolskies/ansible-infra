---
# Server Configuration for Final Release Testing
# Based on MASTER_REFERENCE_CONFIG.yml - proven variable formats

# =============================================================================
# BASE SYSTEM CONFIGURATION
# =============================================================================

# OS Configuration (from os_configuration role testing)
# host_hostname is set per-host in inventory, validated against actual hostname
domain_name: "test.local"
host_update_hosts: true
domain_locale: "en_US.UTF-8"
domain_language: "en_US.UTF-8"
domain_timezone: "America/New_York"

# =============================================================================
# PACKAGE MANAGEMENT
# =============================================================================

# Package Management (manage_packages role)
# Uses current manage_packages_all/group/host format with ansible_distribution keys
# IMPORTANT: Packages deliberately differ per distribution to catch bugs where code
# incorrectly uses ansible_os_family instead of ansible_distribution
manage_packages_all:
  Ubuntu:
    - { name: curl }
    - { name: wget }
    - { name: git }
    - { name: vim }
    - { name: htop }
    - { name: fail2ban }
    - { name: ufw }
    - { name: build-essential }
    - { name: python3-pip }
    - { name: tree } # Ubuntu-specific for testing
    - { name: jq } # Ubuntu-specific for testing
  Debian:
    - { name: curl }
    - { name: wget }
    - { name: git }
    - { name: vim }
    - { name: htop }
    - { name: fail2ban }
    - { name: ufw }
    - { name: build-essential }
    - { name: python3-pip }
    - { name: rsync } # Debian-specific for testing
    - { name: dnsutils } # Debian-specific for testing

manage_packages_group:
  Ubuntu:
    - { name: nginx }
    - { name: postgresql } # Ubuntu uses PostgreSQL for testing
    - { name: docker.io }
    - { name: docker-compose-v2 }
    - { name: redis-server } # Ubuntu-specific database for testing
  Debian:
    - { name: nginx }
    - { name: mariadb-server } # Debian uses MariaDB for testing (catches distro bugs)
    - { name: docker.io }
    - { name: docker-compose }
    - { name: memcached } # Debian-specific cache for testing

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Firewall Configuration (from manage_security_services role testing)
firewall:
  enabled: true
  prevent_ssh_lockout: true
  stealth_mode: false
  block_all: false
  logging: true
  rules:
    - rule: allow
      port: 22
      protocol: tcp
      comment: "SSH access"
    - rule: allow
      port: 80
      protocol: tcp
      comment: "HTTP"
    - rule: allow
      port: 443
      protocol: tcp
      comment: "HTTPS"
    - rule: allow
      port: 5432
      protocol: tcp
      source: "192.168.0.0/16"
      comment: "PostgreSQL internal"

# Fail2ban Configuration (from manage_security_services role testing)
fail2ban:
  enabled: true
  bantime: "1h"
  findtime: "10m"
  maxretry: 5
  jails:
    - name: sshd
      enabled: true
      maxretry: 3
      bantime: "1h"
      findtime: "10m"
      logpath: /var/log/auth.log
    - name: nginx-http-auth
      enabled: true
      maxretry: 5
      bantime: "30m"
      findtime: "10m"
      logpath: /var/log/nginx/error.log

# =============================================================================
# USER MANAGEMENT
# =============================================================================

# User Configuration (configure_users role)
# Note: configure_users only configures preferences for existing users
# The 'ed' user is created by cloud-init
users:
  - name: ed
    shell: /bin/bash
    git:
      user_name: "Ed Wolski"
      user_email: "ed@test.local"
      editor: "vim"
    dotfiles:
      enable: false # Minimal server setup

# =============================================================================
# SYSTEM SERVICES
# =============================================================================

# System Services Configuration (os_configuration role)
host_services:
  enable:
    - ssh
  disable:
    - snapd # Disable snap on servers
  mask: []

# =============================================================================
# PACKAGE SYSTEM CONFIGURATION
# =============================================================================

# Snap Configuration (from manage_snap_packages role testing)
snap:
  remove_completely: true # Servers use traditional packages

# Flatpak Configuration (from manage_flatpak role testing)
flatpak:
  enabled: false # Not needed on servers
